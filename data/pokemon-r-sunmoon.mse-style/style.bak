mse version: 2.0.0
game: pokemon
full name: Sun & Moon Series
short name: SunMoon
icon: card-sample.jpg
position hint: 063

version: 2018-07-22
depends on:
	package: pokemon.mse-game
	version: 2018-07-22
depends on:
	package: pokemon-a-energy.mse-symbol-font
	version: 2018-06-28
depends on:
	package: pokemon-a-color.mse-symbol-font
	version: 2016-09-10
depends on:
	package: pokemon-a-lg-color.mse-symbol-font
	version: 2018-06-19
depends on:
	package: pokemon-a-title.mse-symbol-font
	version: 2018-07-08
depends on:
	package: pokemon-a-rule.mse-symbol-font
	version: 2018-06-28
depends on:
	package: pokemon-a-rule-1.mse-symbol-font
	version: 2018-07-08
depends on:
	package: pokemon-a-rule-2.mse-symbol-font
	version: 2018-07-08
depends on:
	package: pokemon-a-rule-behind.mse-symbol-font
	version: 2018-06-28
depends on:
	package: pokemon-b-common.mse-include
	version: 2018-07-04

#By: Imp Elemental Spirit Guide

#NOTES: The Prism Star rule text is impossible to emulate perfectly using MSE as when they put it on the cards they did it character by character, the entire text of the second line often doesn't fit in the regulated box (flowing over into the title box).  In addition they used different line spacing to fit their needs.  It was obviously done with an image editor unlike MSE does.

#expand_size()==2
#border included
#card width: 736
#card height: 1026
#card dpi: 294

#expand_size()==1
card width: 368
card height: 513
card dpi: 147

#Actual card width is 2.5", height is 3.5" almost exactly
############################################################## Extra scripts
init script:
	diagnostic := { to_string(card.general_options_07) }
	##############################These two equations were originally used for centering and placing the different frames and text so that they matched the original card.
	##############################			They have been kept in here because they would allow a different resolution of card should such thing apply
	##############################                  Be careful to change the card size when altering these value
	expand_size := { 1 }
	is_not_blur := { expand_size()==2 }
	# 2 is the size of the actual images used
	# to watch 2 , card width 736, height 750, expand_size==2, slide_up == 0 or 276
	# for 2   card width: 736, card height: 1026, card dpi: 294
	# for 1.5 card width: 552, card height:  770, card dpi: 220
	# for 1.4 card width: 515, card height:  717, card dpi: 205
	# for 1   card width: 368, card height:  513, card dpi: 147
	slide_left := { 0 }
	slide_up := { 0 }
	x_left := { to_int(input * expand_size()) - slide_left() }
	y_top := { to_int(input * expand_size()) - slide_up() }
	fun_expand_size := { to_int(input * expand_size()) }
	fun_expand_font := { input * expand_size() }
	fun_decompress := { input / expand_size() }
	###############################Equations for transfering between templates
	##############################These equations make sure that the cost for the classic template and the modern template match in spite of being different fields
	cost_classic_1_placekeep := { card.cost_new_1 }
	cost_classic_2_placekeep := { card.cost_new_2 }
	cost_classic_3_placekeep := { card.cost_new_3 }
	############################### Equations for symbol text coloration
	############################### Tag equations for the symbol fonts
	is_outline_energy := { is_outline() }
	is_outline_rule := { is_outline() }
	is_outline_rule_1 := { false }
	is_outline_rule_2 := { false }
	is_wt_rule := { is_wt_text() }
	is_wt_rule_1 := { true }
	is_wt_rule_2 := { false }
	is_two_tone_rule := { is_two_tone() }
	is_outline_title := { is_outline() }
	is_wt_title := { is_wt_top() }
	is_ec_pbp := { contains(styling.Ability_and_Energy_Icons, match: "Use E-Card Poke-Body & Poke-Power Icons") }
	is_sm_ab := { not(contains(styling.Ability_and_Energy_Icons, match: "Use Black & White or XY Style Ability Icon")) }
	is_ab_gold := { contains(card.general_options_09, match: "Secret Rare (Gold)") }
	is_dpp_free := { contains(styling.Ability_and_Energy_Icons, match: "Use Transparent Free Energy Icon (aka No Energy)") }
	gx_color := { if contains(card.general_options_09, match: "Ultra Beast Pokemon") then "Red" else "Blue" }
	two_tone_font := { "pokemon-a-rule-behind" }
	############################### Simplify multiple stage choice variables
	text_option_filter_1 := { text_option_filter(card.text_options_3) } + replace@(match: "Default Ability Color", replace: "Default Pokemon Power Color")
	text_option_filter_2 := { text_option_filter(card.text_options_3) } + replace@(match: "Default Ability Color", replace: "Default PokeBody and PokePower Color")
	text_option_filter_3 := { text_option_filter(value) }
	stage := { card.stage_base }
	stage_default := { if card.stage_base=="" then "Basic" else card.stage_base }
	############################### Other diagnostic equations
	############################## Equations to centralize the mask settings for dual types
	dual_mask := { if card.dual_blend_type=="Dark EX Series" then "/pokemon-b-common.mse-include/mask-p-split-darkg1.png"
		else if card.dual_blend_type=="Metal EX Series" then "/pokemon-b-common.mse-include/mask-p-split-metalg1.png"
		else "/pokemon-b-common.mse-include/mask-p-split-ss.png" }
	dual_mask_reverse := { if card.dual_blend_type=="Dark EX Series" then "/pokemon-b-common.mse-include/mask-p-split-darkg1-reverse.png"
		else if card.dual_blend_type=="Metal EX Series" then "/pokemon-b-common.mse-include/mask-p-split-metalg1-reverse.png"
		else "/pokemon-b-common.mse-include/mask-p-split-ss-reverse.png" }
	blend_mask := { if card.dual_blend_type=="Dark EX Series" then "/pokemon-b-common.mse-include/mask-p-blend-darkg1.png"
		else if card.dual_blend_type=="Metal EX Series" then "/pokemon-b-common.mse-include/mask-p-blend-metalg1.png"
		else "/pokemon-b-common.mse-include/mask-p-split-ss.png" }
	blend_mask_reverse := { if card.dual_blend_type=="Dark EX Series" then "/pokemon-b-common.mse-include/mask-p-blend-darkg1-reverse.png"
		else if card.dual_blend_type=="Metal EX Series" then "/pokemon-b-common.mse-include/mask-p-blend-metalg1-reverse.png"
		else "/pokemon-b-common.mse-include/mask-p-split-ss-reverse.png" }
	##############################Equations for the backgrounds
	frame_type := { if contains(card.general_options_09, match: "Secret Rare (Gold)") then "-gold" else "" }
	trainer_type := { if card.trainer=="Tool" then "Item" else to_string(card.trainer) }
	trainer_color := { if trainer_type()=="Item" then rgb(74,190,239)
			else if trainer_type()=="Stadium" then rgb(125,195,96)
			else if trainer_type()=="Supporter" then rgb(244,128,55)
			else card.energy_color_1 }
	texture_type_1 := { if background_type_1()=="User Defined" then to_string(card.color_texture_1)
		else if card.texture_type_1=="Default" then "SunMoon"
		else to_string(card.texture_type_1) }
	texture_type_2 := { if background_type_2()=="User Defined" then to_string(card.color_texture_2)
		else if card.texture_type_2=="Default" then "SunMoon"
		else to_string(card.texture_type_2) }
	colored_pokemon_suffix_1 := { to_string(card.color_texture_1) } + replace@(match: " Black Text", replace: "") + replace@(match: " White Text", replace: "")
	colored_pokemon_suffix_2 := { to_string(card.color_texture_2) } + replace@(match: " Black Text", replace: "") + replace@(match: " White Text", replace: "")
	background_type_1 := { to_string(card.card_color_1) }
	background_type_2 := { to_string(card.card_color_2) }
	is_image_1 := { (is_pokemon() and contains(texture_type_1(), match: "User Image")) or (is_energy() and contains(basic_energy_suffix(), match: "User Image")) }
	is_image_2 := { (card.card_type=="Dual-Type" and contains(texture_type_2(), match: "User Image")) }
	basic_energy_suffix := { if card.basic_texture=="Default" then "SunMoon"
		else to_string(card.basic_texture) } + replace@(match: " Black Text", replace: "") + replace@(match: " White Text", replace: "")
	############################### Equations for text coloration
	############################### Text color equations to determin the color and types of text
	ability_color := { if (contains(card.text_options_3, match: "Default") and (((card.card_color_1=="Fire" or card.card_color_1=="Fairy") or card.card_color_1=="Psychic") or (card.card_color_1=="Fighting" and (card.texture_type_1=="Nintendo" or card.texture_type_1=="SunMoon")))) or contains(card.text_options_3, match: "Purple") then rgb(89,46,132)
				else if contains(card.text_options_3, match: "Yellow") then rgb(255,242,19)
				else if contains(card.text_options_3, match: "Dark Red") then rgb(134,35,38)
				else if contains(card.text_options_3, match: "Green") then rgb(2,146,64)
				else rgb(198,34,12) }
	is_outline := { (contains(card.text_options_3, match: "Outline Text") or contains(card.art_options, match: "Full Art") or contains(card.art_options, match: "Popout Art (for Advanced Users)")) }
	is_two_tone := { card.card_type=="Dual-Type" and not(is_outline()) and not(is_dark_1()==is_dark_2()) and not(contains(card.text_options_3, match: "Body Fade Box")) }
	is_wt_text := { (card.card_type=="Pokemon" and is_dark_1() and not(is_outline()) and not(contains(card.text_options_3, match: "Body Fade Box"))) or
			(card.card_type=="Dual-Type" and not(is_outline()) and is_dark_1() and is_dark_2() and not(contains(card.text_options_3, match: "Body Fade Box"))) }
	is_wt_top := { is_wt_text() or (card.card_type=="Dual-Type" and is_dark_1() and not(is_outline())) }
	is_dark_1 := { is_pokemon() and
		((background_type_1()=="Dark" or 
			((background_type_1()=="Dragon" and not(texture_type_1()=="SunMoon")) or 
				(texture_type_1()=="ISG" and (background_type_1()=="Fighting" or background_type_1()=="Grass")))) or
		(contains(texture_type_1(), match: "White Text"))) }
	is_dark_2 := { ((background_type_2()=="Dark" or 
			((background_type_2()=="Dragon" and not(texture_type_2()=="SunMoon")) or 
				(texture_type_2()=="ISG" and (background_type_2()=="Fighting" or background_type_2()=="Grass")))) or
		(contains(texture_type_2(), match: "White Text"))) }
	rarity_color := { (is_wt_text() or (is_two_tone() and
				((is_dark_1() and card.dual_blend_type=="Metal EX Series") or
				((is_dark_2() and card.dual_blend_type=="Dark EX Series") or
				(is_dark_1() and card.dual_blend_type=="Steam Siege"))))) }
	############################## Reminder Text Equations
	ret_text := { "retreat" }
	##############################Equations to centralize the information for the pokemon attack energy symbol so that user defined and dual texts are synchronized.
	energy_left := { if is_energy() then 328 else 323 }
	energy_top := { if is_energy() then 12 else 20 }
	energy_left_difference := { 9 }
	energy_right_difference := { 9 }
	energy_width := { if is_energy() then 21 else 24 }
	###############################################Equations that define spacing and text for attack
	#is_ability_classic_1 := { false }
	#is_ability_classic_2 := { false }
	#is_ability_classic_3 := { false }
	#######Determines if the number of lines of rule text are currently being used
	#rule_line_1 := { card_style.rule_text_1.content_lines - (if length(to_text(card.rule_text_1))==0 and card_style.rule_text_1.content_lines==1 then 1 else 0) }
	#rule_line_2 := { card_style.rule_text_2.content_lines - (if length(to_text(card.rule_text_2))==0 and card_style.rule_text_2.content_lines==1 then 1 else 0) }
	#rule_line_3 := { card_style.rule_text_3.content_lines - (if length(to_text(card.rule_text_3))==0 and card_style.rule_text_3.content_lines==1 then 1 else 0) }
	#rule_lines := { rule_line_1() + rule_line_2() + rule_line_3() }
	#######Determines how many attacks have been input
	#attack_no := { if length(to_text(card.cost_classic_3))!=0 or length(to_text(card.damage_3))!=0 or length(to_text(card.rule_text_3))!=0 then 3
	#	else if length(to_text(card.cost_classic_2))!=0 or length(to_text(card.damage_2))!=0 or length(to_text(card.rule_text_2))!=0 then 2
	#	else 1 }
	#################Determines spacing for reminder text at the top (equals out left and right)
	evo_field_width := { fun_decompress(card_style.evolution_reminder_1.content_width) }
	evo_field_width_evo := { fun_decompress(card_style.evolution_entry.content_width) }
	evo_total_width := { if contains(styling.Automated_Text_Usage, match: "Evolution Reminder") then evo_field_width()+evo_field_width_evo() else evo_field_width_evo() }
	evo_goal := { 100 }
	evo_width_rem := { if contains(styling.Automated_Text_Usage, match: "Evolution Reminder")
			then if evo_field_width()<=10 then 10
			else if evo_total_width()>=evo_goal() then evo_goal()*(evo_field_width()/evo_total_width())
			else evo_field_width() else 0 }
	evo_width_evo := { if evo_field_width_evo()<=10 then 10
		else if contains(styling.Automated_Text_Usage, match: "Evolution Reminder")
			then if evo_total_width()>=evo_goal() then evo_goal()*(evo_field_width_evo()/evo_total_width())
			else evo_field_width_evo()
		else if evo_field_width_evo()>=evo_goal() then evo_goal()
		else evo_field_width_evo() }
	#######The height of the attack dividers for Classic
	#top_height := { 292 }
	#divider_height_1 := { if attack_no()==1 then 392
	#	else if attack_no()==2
	#		then if (if is_ability_classic_2() then 0.77 
	#		else if length(to_text(card.damage_2))==0 then 0.83 else 1)*length(to_text(card.rule_text_2))+(if is_ability_classic_1() then 0.77 else if length(to_text(card.damage_1))==0 then 0.83 else 1)*length(to_text(card.rule_text_1))>=269 then 353-0.0153*((if is_ability_classic_2() then 0.77 else if length(to_text(card.damage_2))==0 then 0.83 else 1)*length(to_text(card.rule_text_2))-(if is_ability_classic_1() then 0.77 else if length(to_text(card.damage_1))==0 then 0.83 else 1)*length(to_text(card.rule_text_1))) else 354
	#	else 335 }
	#divider_height_2 := { if attack_no()==3 then 378 else 416 }
	#bottom_height := { if attack_no()==2 then 421 else 419 }
	###################################################### Functions to centralize information for all text fields
	###################################################### Functions to centralize information for all text fields allowing two-tone & outline texts
	#######Card Name
	card_name_left := { x_left(if is_pokemon() then 68 else 22) }
	card_name_top := { y_top(if is_pokemon() then 20 else 40) }
	card_name_width := { fun_expand_size(if is_energy() then 250 else if is_trainer() then 320
		else if fun_decompress(card_style.hp.content_width)>=10 then 244-fun_decompress(card_style.hp.content_width) else 234) }
	card_name_height := { fun_expand_size(if is_energy() and card.energy_type=="Basic" then 0 else 25) }
	card_name_visible := { not(is_energy() and card.energy_type=="Basic") }
	card_name_outline_visible := { card_name_visible() and is_outline() and is_not_blur() }
	card_name_outline_blur := { card_name_visible() and is_outline() and not(is_not_blur()) }
	card_name_font := { "PokeTitleXY" }
	card_name_weight := { "normal" }
	card_name_style := { "normal" }
	card_name_size := { fun_expand_font(if is_pokemon() then 18.5 else 18.5) }
	card_name_align := { "bottom shrink-overflow" }
	card_name_symbol_font := { "pokemon-a-title" }
	card_name_symbol_size := { fun_expand_font(140) }

	#######HP Number
	hp_left := { x_left(if is_pokemon() 
			then 318-((if fun_decompress(card_style.hp.content_width)>=10 then fun_decompress(card_style.hp.content_width)+1 else 10)+(if card.card_type=="Dual-Type" then energy_left_difference()/2 else 0)) 
		else 255) }
	hp_top := { y_top(if is_pokemon() then if contains(card.general_options_09, match: "GX Pokemon") then 22 else 25 else 12) }
	hp_width := { fun_expand_size(if is_pokemon() 
			then if fun_decompress(card_style.hp.content_width)>=10 then fun_decompress(card_style.hp.content_width)+1 
			else 10 
		else 93) }
	hp_height := { fun_expand_size(if is_pokemon() then if contains(card.general_options_09, match: "GX Pokemon") then 30 else 24 
		else if is_trainer() and card.trainer=="User Defined" then 19 
		else 0) }
	hp_size := { fun_expand_font(if is_trainer() and card.trainer=="User Defined" then 10 else if contains(card.general_options_09, match: "GX Pokemon") then 22 else 16.5) }
	hp_font := { if is_trainer() and (card.trainer=="User Defined") then "Nakadai Italic" else "PokeTitleNeo" }
	hp_visible := { is_pokemon() or (is_trainer() and card.trainer=="User Defined") }
	hp_outline_visible := { hp_visible() and (is_outline() or is_trainer()) and is_not_blur() }
	hp_outline_blur := { hp_visible() and (is_outline() or is_trainer()) and not(is_not_blur()) }
	hp_weight := { "normal" }
	hp_style := { "normal" }
	hp_align := { "bottom right shrink-overflow" }
	hp_color := { if is_trainer() and card.trainer=="User Defined" then card.energy_color_1 else if is_wt_top() then rgb(255,255,255) else rgb(0,0,0) }

	###Remove outline text later
	#######Reminder text explaining what this pokemone evolved from
	evolution_left := { x_left(63) }
	evolution_top := { y_top(43) }
	evolution_width := { fun_expand_size(evo_width_rem()) }
	evolution_size := { fun_expand_font(6) }
	evolution_font := { "Humanist521BT" }
	evolution_weight := { "bold" }
	evolution_style := { "italic" }
	evolution_align := { "bottom left shrink-overflow" }
	evolution_color := { rgb(0,0,0) }
	evolution_visible := { is_pokemon() and not(stage()=="Basic") and contains(styling.Automated_Text_Usage, match: "Evolution Reminder") }
	evolution_outline_visible := { false }
	evolution_outline_blur := { false }
	evolution_outline_separator := { card.evolution_reminder_1 }
	evolution_height := { fun_expand_size(if evolution_visible() then 15 else 0) }
	evolution_rem_visible := { evolution_visible() }
	evolution_rem_height := { evolution_height() }
	evo_left := { x_left(if contains(styling.Automated_Text_Usage, match: "Evolution Reminder") then 65+evo_width_rem() else 63) }
	evo_width := { fun_expand_size(evo_width_evo()) }
	evo_height := { fun_expand_size(if is_pokemon() and not(stage()=="Basic") then 15 else 0) }
	evo_visible := { is_pokemon() and not(stage()=="Basic") }
	evo_outline_visible := { false }
	evo_outline_blur := { false }

	#######Pokedex text entry
	pokedex1_left := { x_left(32) }
	pokedex1_top := { y_top(246) }
	pokedex1_width := { fun_expand_size(302) }
	pokedex1_height := { fun_expand_size(if is_pokemon() and not(contains(card.art_options, match: "Full Art")) and not(contains(card.general_options_09, match: "Prism Star Card")) then 10 else 0) }
	pokedex1_align := { "middle center shrink-overflow" }
	pokedex1_visible := { is_pokemon() and not(contains(card.art_options, match: "Full Art")) and not(contains(card.general_options_09, match: "Prism Star Card"))}
	pokedex1_outline_visible := { false }
	pokedex1_outline_blur := { false }
	pokedex1_two_tone_visible := { false }
	pokedex1_font := { "Humanist521BT" }
	pokedex1_weight := { "normal" }
	pokedex1_style := { "normal" }
	pokedex1_size := { fun_expand_font(6) }
	pokedex1_color := { rgb(0,0,0) }

	#######Weakness/Resistance/Retreat Cost Title Lines
	weak_ov_left := { x_left(16) }
	weak_ov_top := { y_top(441) }
	weak_ov_width := { fun_expand_size(60) }
	weak_ov_height := { fun_expand_size(14) }
	res_ov_left := { x_left(119) }
	res_ov_top := { y_top(441) }
	res_ov_width := { fun_expand_size(60) }
	res_ov_height := { fun_expand_size(14) }
	ret_ov_left := { x_left(239) }
	ret_ov_top := { y_top(441) }
	ret_ov_width := { fun_expand_size(140) }
	ret_ov_height := { fun_expand_size(14) }
	wrr_ov_size := { fun_expand_font(7) }
	wrr_ov_visible := { if is_pokemon() then true else false }
	wrr_ov_outline_visible := { false }
	wrr_ov_outline_blur := { false }
	wrr_ov_align := { "left middle" }
	wrr_ov_font := { "GillSansCdn" }
	wrr_ov_weight := { "bold" }
	wrr_ov_style := { "normal" }

	#######Weakness & Special Energy Color Field
	weak_left := { x_left(if is_pokemon() then 61 else 178) }
	weak_top := { y_top(if is_pokemon() then 437 else 12) }
	weak_width := { fun_expand_size(if is_pokemon() then 55 else 171) }
	weak_height := { fun_expand_size(if is_pokemon() then 22 else if is_energy() and card.energy_type=="Special" then 21 else 0) }
	weak_visible := { is_pokemon() or (is_energy() and card.energy_type=="Special") }
	weak_font := { "PokeTitleXY" }
	weak_outline_visible := { false }
	weak_outline_blur := { false }
	weak_size := { fun_expand_font(if is_pokemon() then 12 else 16) }
	weak_weight := { "normal" }
	weak_style := { "normal" }
	weak_symbol_font := { "pokemon-a-energy" }
	weak_symbol_size := { fun_expand_font(if is_energy() then 21 else if is_outline() then 16 else 14) }
	weak_align := { if is_pokemon() then "middle left" else "bottom right" }

	#######Resistance
	resist_left := { x_left(169) }
	resist_top := { y_top(437) }
	resist_width := { fun_expand_size(58) }
	resist_height := { fun_expand_size(if is_pokemon() then 22 else 0) }
	resist_visible := { is_pokemon() }
	resist_font := { "PokeTitleXY" }
	resist_outline_visible := { false }
	resist_outline_blur := { false }
	resist_size := { fun_expand_font(13) }
	resist_weight := { "normal" }
	resist_style := { "normal" }
	resist_symbol_font := { "pokemon-a-energy" }
	resist_symbol_size := { fun_expand_font(if is_outline() then 16 else 14) }
	resist_align := { "middle left" }

	#######Retreat Cost
	retreat_left := { x_left(272) }
	retreat_top := { y_top(438) }
	retreat_width := { fun_expand_size(68) }
	retreat_height := { fun_expand_size(if is_pokemon() then 18 else 0) }
	retreat_visible := { is_pokemon() }
	retreat_symbol_font := { "pokemon-a-energy" }
	retreat_symbol_size := { fun_expand_font(if is_outline() then 16 else 14) }
	retreat_align := { "bottom left" }

	#######GX Rules Title & Special Energy Title
	title_1_left := { x_left(if is_energy() then 271 else 158) }
	title_1_top := { y_top(if is_energy() then 39 else 462) }
	title_1_width := { fun_expand_size(if is_energy() then 80 else 58) }
	title_1_font := { if is_energy() then "Humanist521BT" else "Humanist521EBD" }
	title_1_weight := { "bold" }
	title_1_style := { "italic" }
	title_1_size := { fun_expand_font(if is_energy() then 9 else 5) }
	title_1_align := { if is_energy() then "bottom left shrink-overflow" else "center middle shrink-overflow" }
	title_1_color := { rgb(0,0,0) }
	title_1_outline_visible := { false }
	title_1_outline_blur := { false }
	title_1_outline_separator := { if is_energy() or contains(styling.Automated_Text_Usage, match: "GX Rule Reminder") then card.title_reminder_1_9 else card.title_text_1 }
	title_1_height := { fun_expand_size(if is_energy() and card.energy_type=="Special" then 20 else if is_pokemon() then 10 else 0) }
	title_rem_1_visible := { is_energy() or (is_pokemon() and contains(styling.Automated_Text_Usage, match: "GX Rule Reminder")) }
	title_rem_1_height := { fun_expand_size(if is_energy() and card.energy_type=="Special" then 20 else if is_pokemon() and contains(styling.Automated_Text_Usage, match: "GX Rule Reminder") then 10 else 0) }
	title_txt_1_visible := { is_pokemon() and not(contains(styling.Automated_Text_Usage, match: "GX Rule Reminder")) }
	title_txt_1_height := { fun_expand_size(if is_pokemon() and not(contains(styling.Automated_Text_Usage, match: "GX Rule Reminder")) then 10 else 0) }

	#######GX Rules & Trainer Play Rule
	special_rule_left := { x_left(if is_pokemon() then 124 else 122) }
	special_rule_top := { y_top(if is_pokemon() then 464 else 451) }
	special_rule_width := { fun_expand_size(if is_pokemon() then 208 else 218) }
	special_rule_align := { if is_pokemon() then "middle left" else "top left" }
	special_rule_font := { if is_pokemon() then "Humanist521BDCdn" else "Humanist521BT" }
	special_rule_weight := { "normal" }
	special_rule_style := { "normal" }
	special_rule_size := { fun_expand_font(if is_pokemon() then 6 else 8) }
	special_rule_lh_soft := { 1 }
	special_rule_color := { if is_pokemon() then rgb(255,255,255) else rgb(0,0,0) }
	special_rule_outline_visible := { is_trainer() and is_outline() and is_not_blur() }
	special_rule_outline_blur := { is_trainer() and is_outline() and not(is_not_blur()) }
	special_rule_outline_separator := { if (is_pokemon() and contains(styling.Automated_Text_Usage, match: "GX Rule Reminder")) or (is_trainer() and (card.trainer=="User Defined" or not(contains(styling.Automated_Text_Usage, match: "Trainer Play Rule Reminder")))) then card.special_rule_text_1 else card.special_rule_reminder_1_9 }
	special_rule_content_height := { if (is_trainer() and (card.trainer=="User Defined" or not(contains(styling.Automated_Text_Usage, match: "Trainer Play Rule Reminder")))) then card_style.special_rule_text_1.content_height else card_style.special_rule_reminder_1_9.content_height }
	special_rule_height := { fun_expand_size(if is_pokemon() and contains(styling.Automated_Text_Usage, match: "GX Rule Reminder") then 24 else if is_trainer() then 36 else 0) }
	special_rule_rem_visible := { (is_pokemon() and contains(styling.Automated_Text_Usage, match: "GX Rule Reminder")) or 
		(is_trainer() and not(card.trainer=="User Defined") and contains(styling.Automated_Text_Usage, match: "Trainer Play Rule Reminder")) }
	special_rule_rem_height := { fun_expand_size(if special_rule_rem_visible() then if is_pokemon() then 24 else 36 else 0) }
	special_rule_txt_visible := { (is_pokemon() and not(contains(styling.Automated_Text_Usage, match: "GX Rule Reminder"))) or 
		(is_trainer() and (card.trainer=="User Defined" or not(contains(styling.Automated_Text_Usage, match: "Trainer Play Rule Reminder")))) }
	special_rule_txt_height := { fun_expand_size(if special_rule_txt_visible() then if is_pokemon() then 24 else 36 else 0) }
	special_rule_mask := { if is_pokemon() then "mask-gx.png" else "/pokemon-b-common.mse-include/mask-blank.png" }

	#######Tool Rule Title
	title_2_left := { x_left(if contains(card.art_options, match: "Full Art") then 22 else 29) }
	title_2_top := { y_top(if contains(card.art_options, match: "Full Art") then 74 else 266) }
	title_2_width := { fun_expand_size(103) }
	title_2_font := { "Humanist521EBD" }
	title_2_weight := { "bold" }
	title_2_style := { "italic" }
	title_2_size := { fun_expand_font(7) }
	title_2_align := { "left bottom shrink-overflow" }
	title_2_visible := { is_trainer() and card.trainer=="Tool" }
	title_2_outline_visible := { title_2_visible() and is_not_blur() }
	title_2_outline_blur := { title_2_visible() and not(is_not_blur()) }
	title_2_outline_separator := { if contains(styling.Automated_Text_Usage, match: "Tool Play Rule Reminder") then card.title_reminder_2_9 else card.title_text_2 }
	title_2_height := { fun_expand_size(if title_2_visible() then 10 else 0) }
	title_rem_2_visible := { title_2_visible() and contains(styling.Automated_Text_Usage, match: "Tool Play Rule Reminder") }
	title_rem_2_height := { fun_expand_size(if title_rem_2_visible() then 10 else 0) }
	title_txt_2_visible := { title_2_visible() and not(contains(styling.Automated_Text_Usage, match: "Tool Play Rule Reminder")) }
	title_txt_2_height := { fun_expand_size(if title_txt_2_visible() then 10 else 0) }
	title_2_color := { rgb(8,109,179) }

	#######Tool Play Rule
	special_rule_2_left := { x_left(if contains(card.art_options, match: "Full Art") then 23 else 35) }
	special_rule_2_top := { y_top(if contains(card.art_options, match: "Full Art") then 74 else 272) }
	special_rule_2_width := { fun_expand_size(if contains(card.art_options, match: "Full Art") then 318 else 292) }
	special_rule_2_align := { "middle left" }
	special_rule_2_font := { "Humanist521BT" }
	special_rule_2_weight := { "normal" }
	special_rule_2_style := { "normal" }
	special_rule_2_size := { fun_expand_font(if contains(card.art_options, match: "Full Art") then 7.5 else 6) }
	special_rule_2_lh_soft := { 1.2 }
	special_rule_2_color := { rgb(0,0,0) }
	special_rule_2_outline_visible := { false }
	special_rule_2_outline_blur := { false }
	special_rule_2_outline_separator := { if contains(styling.Automated_Text_Usage, match: "Tool Play Rule Reminder") then card.special_rule_reminder_2_9 else card.special_rule_text_2 }
	special_rule_2_content_height := { if contains(styling.Automated_Text_Usage, match: "Tool Play Rule Reminder") then card_style.special_rule_reminder_2_9.content_height else card_style.special_rule_text_2.content_height }
	special_rule_2_height := { fun_expand_size(if is_trainer() and card.trainer=="Tool" and contains(styling.Automated_Text_Usage, match: "Tool Play Rule Reminder") then if contains(card.art_options, match: "Full Art") then 28 else 22 else 0) }
	special_rule_2_rem_visible := { is_trainer() and card.trainer=="Tool" and contains(styling.Automated_Text_Usage, match: "Tool Play Rule Reminder") }
	special_rule_2_rem_height := { fun_expand_size(if special_rule_2_rem_visible() then if contains(card.art_options, match: "Full Art") then 28 else 22 else 0) }
	special_rule_2_txt_visible := { is_trainer() and card.trainer=="Tool" and not(contains(styling.Automated_Text_Usage, match: "Tool Play Rule Reminder")) }
	special_rule_2_txt_height := { fun_expand_size(if special_rule_2_txt_visible() then if contains(card.art_options, match: "Full Art") then 28 else 22 else 0) }
	special_rule_2_mask := { if contains(card.art_options, match: "Full Art") then "mask-tool-fa.png" else "mask-tool.png" }

	#######Prism Reminder Title
	ability_1_left := { x_left(if is_energy() then 20 else 35) }
	ability_1_top := { y_top(if is_energy() then if contains(card.art_options, match: "Full Art") then 73 else 298 else if is_trainer() then if contains(card.art_options, match: "Full Art") then if card.trainer=="Tool" then 110 else 73 else 235 else if contains(card.art_options, match: "Full Art") then 84 else 226) }
	ability_1_width := { fun_expand_size(if is_energy() then 91 else 90) }
	ability_1_size := { fun_expand_font(7) }
	ability_1_font := { "Humanist521BT" }
	ability_1_symbol_font := { "pokemon-a-rule-1" }
	ability_1_symbol_size := { fun_expand_font(16) }
	ability_1_weight := { "bold" }
	ability_1_style := { "italic" }
	ability_1_align := { "bottom left shrink-overflow" }
	ability_1_color := { rgb(255,255,255) }
	ability_1_visible := { contains(card.general_options_09, match: "Prism Star Card") }
	ability_1_outline_visible := { false }
	ability_1_outline_blur := { false }
	ability_1_outline_separator := { if contains(styling.Automated_Text_Usage, match: "Prism Play Rule Reminder") then card.ability_reminder_1_9 else card.ability_text_1 }
	ability_1_height := { fun_expand_size(if ability_1_visible() then 12 else 0) }
	ability_rem_1_visible := { ability_1_visible() and contains(styling.Automated_Text_Usage, match: "Prism Play Rule Reminder") }
	ability_rem_1_height := { fun_expand_size(if ability_rem_1_visible() then 12 else 0) }
	ability_txt_1_visible := { ability_1_visible() and not(contains(styling.Automated_Text_Usage, match: "Prism Play Rule Reminder")) }
	ability_txt_1_height := { fun_expand_size(if ability_txt_1_visible() then 12 else 0) }

	#######Prism Reminder Text
	abilrule_1_left := { x_left(if is_energy() then 23 else 37) }
	abilrule_1_top := { y_top(if contains(card.art_options, match: "Full Art") then if is_energy() then 74 else if is_trainer() then if card.trainer=="Tool" then 110 else 73 else 83 else if is_energy() then 299 else if is_trainer() then 235 else 226) }
	abilrule_1_width := { fun_expand_size(if is_energy() then 315 else 291) }
	abilrule_1_align := { "middle left" }
	abilrule_1_font := { "Humanist521BT" }
	abilrule_1_symbol_font := { "pokemon-a-rule-2" }
	abilrule_1_symbol_size := { fun_expand_font(16) }
	abilrule_1_weight := { "normal" }
	abilrule_1_style := { "normal" }
	abilrule_1_size := { fun_expand_font(7) }
	abilrule_1_lh_soft := { 0.9 }
	abilrule_1_color := { rgb(0,0,0) }
	abilrule_1_outline_visible := { false }
	abilrule_1_outline_blur := { false }
	abilrule_1_outline_separator := { if contains(styling.Automated_Text_Usage, match: "Prism Play Rule Reminder") then card.rule_reminder_1_9 else card.ability_rule_text_1 }
	abilrule_1_height := { fun_expand_size(if contains(card.general_options_09, match: "Prism Star Card") then 28 else 0) }
	abilrule_1_rem_visible := { contains(card.general_options_09, match: "Prism Star Card") and contains(styling.Automated_Text_Usage, match: "Prism Play Rule Reminder") }
	abilrule_1_rem_height := { fun_expand_size(if abilrule_1_rem_visible() then 28 else 0) }
	abilrule_1_txt_visible := { contains(card.general_options_09, match: "Prism Star Card") and not(contains(styling.Automated_Text_Usage, match: "Prism Play Rule Reminder")) }
	abilrule_1_txt_height := { fun_expand_size(if abilrule_1_txt_visible() then 28 else 0) }
	abilrule_1_mask := { if is_energy() then "mask-prism-e.png" else "mask-prism-p.png" }
	abilrule_1_pad_top := { 6 }

	######Flavor Text
	flavor_left := { x_left(166) }
	flavor_top := { y_top(460) }
	flavor_width := { fun_expand_size(182) }
	flavor_height := { fun_expand_size(if is_pokemon() and not(contains(card.general_options_09, match: "GX Pokemon")) then 34 else 0) }
	flavor_visible := { if is_pokemon() then true else false }
	flavor_align := { "middle left shrink-overflow" }
	flavor_font := { "Humanist521BT" }
	flavor_outline_visible := { flavor_visible() and is_outline() and is_not_blur() }
	flavor_outline_blur := { flavor_visible() and is_outline() and not(is_not_blur()) }
	flavor_weight := { "normal" }
	flavor_style := { "normal" }
	flavor_size := { fun_expand_font(7) }
	flavor_lh_soft := { 0.9 }

	#######Artist 348-138=210
	ill_left := { x_left(if is_energy() then 206 else 25) }
	ill_top := { y_top(if is_energy() then 487 else 464) }
	ill_width := { fun_expand_size(if is_trainer() then 89 else 138) }
	ill_height := { fun_expand_size(if is_energy() and card.energy_type=="Basic" and not(basic_energy_suffix()=="Special" or basic_energy_suffix()=="User Image") then 0 else 10) }
	ill_size := { fun_expand_font(5.5) }
	ill_font := { "GillSans" }
	ill_weight := { "bold" }
	ill_style := { "italic" }
	ill_align := { if is_energy() then "bottom right" else "bottom left" }
	ill_outline_visible := { is_outline() and not(is_energy()) and is_not_blur() }
	ill_outline_blur := { is_outline() and not(is_energy()) and not(is_not_blur()) }
	ill_outline_separator := { if contains(card.text_options_3, match: "Use Primary Set Artist") then set.artist else card.illustrator }

	#######Copyright
	copy_left := { x_left(23) }
	copy_top := { y_top(487) }
	copy_width := { fun_expand_size(if is_trainer() then 91 else 140) }
	copy_height := { fun_expand_size(10) }
	copy_size := { fun_expand_font(5) }
	copy_font := { "GillSans" }
	copy_weight := { "normal" }
	copy_style := { "normal" }
	copy_align := { "bottom left" }
	copy_outline_visible := { is_outline() and not(is_energy()) and contains(set.visibility_options, match: "Visible Copyright on all cards") and is_not_blur() }
	copy_outline_blur := { is_outline() and not(is_energy()) and contains(set.visibility_options, match: "Visible Copyright on all cards") and not(is_not_blur()) }
	copy_outline_separator := { if contains(card.text_options_3, match: "Use Primary Set Artist") then set.copyright else card.copyright }
	copy_color := { if is_two_tone() then rgba(0,0,0,0) else if is_wt_text() or contains(card.text_options_3, match: "Body Fade Box") then rgb(255,255,255) else rgb(0,0,0) }

	#######Card Number
	card_no_left := { x_left(30) }
	card_no_top := { y_top(473) }
	card_no_width := { fun_expand_size(44) }
	card_no_height := { fun_expand_size(16) }
	card_no_size := { fun_expand_font(7) }
	card_no_font := { "GillSans" }
	card_no_style := { "italic" }
	card_no_weight := { "bold" }
	card_no_align := { "bottom right" }
	card_no_outline_visible := { is_outline() and not(is_energy()) and contains(set.visibility_options, match: "Visible Card Numbers on all cards") and is_not_blur() }
	card_no_outline_blur := { is_outline() and not(is_energy()) and contains(set.visibility_options, match: "Visible Card Numbers on all cards") and not(is_not_blur()) }

	#######Rules text for trainers and energy
	rule_np_1_left := { x_left((if is_trainer() then 41 else 32)) }
	rule_np_1_top := { y_top(if is_trainer() then if card.trainer=="Tool" then 303 else 272 else 339) }
	rule_np_1_width := { fun_expand_size(if is_trainer() then 285 else 307) }
	rule_np_1_height := { fun_expand_size(if is_energy() and card.energy_type=="Special" then 127 else if is_trainer() then if card.trainer=="Tool" then 111 else 169 else 0) }
	rule_np_1_visible := { (is_energy() and card.energy_type=="Special") or is_trainer() }
	rule_np_1_size := { fun_expand_font(if is_trainer() then 10 else 10) }
	rule_np_1_align := { "middle left justify" }
	rule_np_1_font := { if is_trainer() then "Humanist521BT" else "GillSans" }
	rule_np_1_outline_visible := { rule_np_1_visible() and is_outline() and is_not_blur() }
	rule_np_1_outline_blur := { rule_np_1_visible() and is_outline() and not(is_not_blur()) }
	rule_np_1_weight := { "normal" }
	rule_np_1_style := { "normal" }
	rule_np_1_symbol_font := { "pokemon-a-rule" }
	rule_np_1_symbol_size := { fun_expand_font(if is_trainer() then 11 else 18) }
	rule_np_1_lh_hard := { if is_energy() then 1.3 else 1.05 }
	rule_np_1_lh_soft := { if is_energy() then 0.95 else 1.05 }

	#######Attack Costs
	cost_1_left := { x_left(if is_pokemon() then 24 else 35) }
	cost_1_top := { y_top(0) }
	cost_1_width := { fun_expand_size(46) }
	cost_1_height := { fun_expand_size(0) }
	cost_1_visible := { false }
	cost_2_left := { x_left(24) }
	cost_2_top := { y_top(0) }
	cost_2_width := { fun_expand_size(46) }
	cost_2_height := { fun_expand_size(0) }
	cost_2_visible := { false }
	cost_3_left := { x_left(24) }
	cost_3_top := { y_top(0) }
	cost_3_width := { fun_expand_size(46) }
	cost_3_height := { fun_expand_size(0) }
	cost_3_visible := { false }
	cost_align := { "middle center" }
	cost_symbol_font := { "pokemon-a-energy" }
	cost_symbol_size := { fun_expand_size(21) }

	##########Poke-Power / Poke-Body Titles
	attack_1_left := { x_left(153) }
	attack_1_top := { y_top(0) }
	attack_1_width := { fun_expand_size(155) }
	attack_1_height := { fun_expand_size(0) }
	attack_1_visible := { false }
	attack_1_outline_visible := { attack_1_visible() and is_outline() and is_not_blur() }
	attack_1_outline_blur := { attack_1_visible() and is_outline() and not(is_not_blur()) }
	attack_2_left := { x_left(153) }
	attack_2_top := { y_top(0) }
	attack_2_width := { fun_expand_size(155) }
	attack_2_height := { fun_expand_size(0) }
	attack_2_visible := { false }
	attack_2_outline_visible := { attack_2_visible() and is_outline() and is_not_blur() }
	attack_2_outline_blur := { attack_2_visible() and is_outline() and not(is_not_blur()) }
	attack_3_left := { x_left(153) }
	attack_3_top := { y_top(0) }
	attack_3_width := { fun_expand_size(155) }
	attack_3_height := { fun_expand_size(0) }
	attack_3_visible := { false }
	attack_3_outline_visible := { attack_3_visible() and is_outline() and is_not_blur() }
	attack_3_outline_blur := { attack_3_visible() and is_outline() and not(is_not_blur()) }
	attack_align := { "middle center" }
	attack_font := { "GillSans" }
	attack_weight := { "bold" }
	attack_style := { "normal" }
	attack_size := { fun_expand_font(11) }
	attack_color := { ability_color() }

	#######Attack Damage
	damage_1_left := { x_left(297) }
	damage_1_top := { y_top(0) }
	damage_1_width := { fun_expand_size(48) }
	damage_1_height := { fun_expand_size(0) }
	damage_1_visible := { false }
	damage_1_outline_visible := { damage_1_visible() and is_outline() and is_not_blur() }
	damage_1_outline_blur := { damage_1_visible() and is_outline() and not(is_not_blur()) }
	damage_2_left := { x_left(297) }
	damage_2_top := { y_top(0) }
	damage_2_width := { fun_expand_size(48) }
	damage_2_height := { fun_expand_size(0) }
	damage_2_visible := { false }
	damage_2_outline_visible := { damage_2_visible() and is_outline() and is_not_blur() }
	damage_2_outline_blur := { damage_2_visible() and is_outline() and not(is_not_blur()) }
	damage_3_left := { x_left(297) }
	damage_3_top := { y_top(0) }
	damage_3_width := { fun_expand_size(48) }
	damage_3_height := { fun_expand_size(0) }
	damage_3_visible := { false }
	damage_3_outline_visible := { damage_3_visible() and is_outline() and is_not_blur() }
	damage_3_outline_blur := { damage_3_visible() and is_outline() and not(is_not_blur()) }
	damage_align := { "middle left" }
	damage_font := { "GillSans" }
	damage_weight := { "normal" }
	damage_style := { "normal" }
	damage_size := { fun_expand_font(20) }

	#######Attack rules text and title
	rule_1_left := { x_left(0) }
	rule_1_top := { y_top(0) }
	rule_1_width := { fun_expand_size(0) }
	rule_1_height := { fun_expand_size(0) }
	rule_1_visible := { false }
	rule_1_align := { "middle left" }
	rule_1_outline_visible := { rule_1_visible() and is_outline() and is_not_blur() }
	rule_1_outline_blur := { rule_1_visible() and is_outline() and not(is_not_blur()) }
	rule_2_left := { x_left(0) }
	rule_2_top := { y_top(0) }
	rule_2_width := { fun_expand_size(0) }
	rule_2_height := { fun_expand_size(0) }
	rule_2_visible := { false }
	rule_2_align := { "middle left" }
	rule_2_outline_visible := { rule_2_visible() and is_outline() and is_not_blur() }
	rule_2_outline_blur := { rule_2_visible() and is_outline() and not(is_not_blur()) }
	rule_3_left := { x_left(0) }
	rule_3_top := { y_top(0) }
	rule_3_width := { fun_expand_size(0) }
	rule_3_height := { fun_expand_size(0) }
	rule_3_visible := { false }
	rule_3_align := { "middle left" }
	rule_3_outline_visible := { rule_3_visible() and is_outline() and is_not_blur() }
	rule_3_outline_blur := { rule_3_visible() and is_outline() and not(is_not_blur()) }
	rule_size := { fun_expand_font(13.7) }
	rule_font := { "PokeRuleClassic" }
	rule_weight := { "normal" }
	rule_style := { "normal" }
	rule_symbol_font := { "pokemon-a-rule" }
	rule_symbol_size := { fun_expand_font(18) }
	rule_lh_hard := { if is_energy() then 1 else 1.4 }
	rule_lh_soft := { 1 }
############################################################## Styling fields
#All Card Options
styling field:
	type: multiple choice
	name: General Choices
	choice: Test Image
	choice: Diagnostic Text
styling field:
	type: multiple choice
	name: Automated Text Usage
	choice: Evolution Reminder
	choice: GX Rule Reminder
	choice: Trainer Play Rule Reminder
	choice: Tool Play Rule Reminder
	choice: Prism Play Rule Reminder
	initial: Evolution Reminder, GX Rule Reminder, Trainer Play Rule Reminder, Tool Play Rule Reminder, Prism Play Rule Reminder
styling field:
	type: multiple choice
	name: Ability and Energy Icons
	choice: Use Black & White or XY Style Ability Icon
	choice: Use E-Card Poke-Body & Poke-Power Icons
	choice: Use Transparent Free Energy Icon (aka No Energy)
styling style:
	General Choices:
		render style: checklist
		direction: vertical
	Automated Text Usage:
		render style: checklist
		direction: vertical
	Ability and Energy Icons:
		render style: checklist
		direction: vertical
############################################################## Throughout this odd number layers are reserved for shading/covering up etc.
card style:
	######################## Hidden Layer -18
	######################## this layer provids a layer to place hidden buttons and images
	######################## Some of these items are found in the extra card fields
#########User defined color fields (there but not seen)
	energy color 1:
		left: { x_left(8) }
		top: { y_top(9) }
		width: { fun_expand_size(350) }
		height: { fun_expand_size(if ((is_energy() or is_pokemon()) and background_type_1()=="User Defined") or (is_trainer() and card.trainer=="User Defined") then 495 else 0) }
		visible: { ((is_energy() or is_pokemon()) and background_type_1()=="User Defined") or (is_trainer() and card.trainer=="User Defined") }
		mask: { if is_energy() and basic_energy_meld()=="Generations" then "/pokemon-b-common.mse-include/mask-e-generations-1.png" else if is_energy() and background_type_1()=="User Defined" then "/pokemon-b-common.mse-include/mask-top-bottom.png" else if card.card_type=="Dual-Type" then dual_mask() else if is_trainer() then "mask-trainer-user.png" else "/pokemon-b-common.mse-include/mask-blank.png" }
		z index: -19
	energy color 2:
		left: { x_left(8) }
		top: { y_top(9) }
		width: { fun_expand_size(350) }
		height: { fun_expand_size(if (card.card_type=="Dual-Type" and background_type_1()=="User Defined") or (is_energy() and basic_energy_meld()=="Generations") then 495 else 0) }
		mask: { if is_energy() and basic_energy_meld()=="Generations" then "/pokemon-b-common.mse-include/mask-e-generations-2.png" else if card.card_type=="Dual-Type" then dual_mask_reverse() else "/pokemon-b-common.mse-include/mask-blank.png" }
		visible: { if (card.card_type=="Dual-Type" and background_type_1()=="User Defined") or (is_energy() and basic_energy_meld()=="Generations") then "yes" else "no" }
		z index: -19
	energy color 3:
		left: { x_left(8) }
		top: { y_top(9) }
		width: { fun_expand_size(350) }
		height: { fun_expand_size(if is_energy() and basic_energy_meld()=="Generations" then 495 else 0) }
		mask: { if is_energy() and basic_energy_meld()=="Generations" then "/pokemon-b-common.mse-include/mask-e-generations-3.png" else "/pokemon-b-common.mse-include/mask-blank.png" }
		visible: { if is_energy() and basic_energy_meld()=="Generations" then "yes" else "no" }
		z index: -19
#########Image used for user defined background image
	background pic 1:
		left: { x_left(183)-350 }
		top: { y_top(257)-495 }
		width: { 700 }
		height: { if is_image_1() then 990 else 0 }
		visible: { if is_image_1() then "yes" else "no" }
		z index: -18
		mask: { if card.card_type=="Dual-Type" then dual_mask() else if is_energy() and background_type_1()=="User Defined" then "/pokemon-b-common.mse-include/mask-bottom-top.png" else "/pokemon-b-common.mse-include/mask-blank.png" }
#########Image used for second user defined background image
	background pic 2:
		left: { x_left(183)-350 }
		top: { y_top(257)-495 }
		width: { 700 }
		height: { if is_image_2() then 990 else 0 }
		z index: -18
		visible: { if is_image_2() then "yes" else "no" }
		mask: { dual_mask_reverse() }
	######################## Background Layer -14
	######################## this layer provids the background image modified slightly for dual type (changed some z-index)
#########Blank image to separate hidden images
	blank image:
		left: { x_left(0) }
		top: { y_top(0) }
		width: { fun_expand_size(368) }
		height: { fun_expand_size(513) }
		visible: { "yes" }
		z index: -17
		render style: image
		image: { "/pokemon-b-common.mse-include/mask-blank.png" }
#########Background image everything before this is hidden
	text popout image:
		left: { x_left(8) }
		top: { y_top(9) }
		width: { fun_expand_size(350) }
		height: { fun_expand_size(495) }
		visible: { if is_two_tone() then "yes" else "no" }
		z index: -15
		render style: image
		image: 
			script: set_combine(input: if is_dark_1() then if is_dark_2() then  "/pokemon-b-common.mse-include/mask-blank.png"
						else dual_mask()
					else if is_dark_2() then dual_mask_reverse()
					else "/pokemon-b-common.mse-include/mask-blank-reverse.png"
				, combine: "difference")
#########Primary Background Image and Background Image for Black portion of Two-Tone Text
	background:
		left: { x_left(8) }
		top: { y_top(9) }
		width: { fun_expand_size(350) }
		height: { fun_expand_size(495) }
		z index: -14
		render style: image
		mask: 
			script: if card.card_type=="Dual-Type" and is_two_tone() then if is_dark_1() and not(is_dark_2()) then	dual_mask_reverse()
					else if is_dark_2() and not(is_dark_1()) then						dual_mask()
					else "/pokemon-b-common.mse-include/mask-blank.png"
				else "/pokemon-b-common.mse-include/mask-blank.png"
		image:
			script: if card.card_type=="Pokemon" then masked_blend(light: "mask-box-image.png", dark: masked_blend(light: 
						(if is_image_1() then					card.background_pic_1
						else if texture_type_1()=="Color" and not(background_type_1()=="User Defined") or (colored_pokemon_suffix_1()=="Color" and background_type_1()=="User Defined") then recolor_image(input: "/pokemon-b-common.mse-include/blank-color.png", red: texture_color_1(), green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255))
						else if background_type_1()=="User Defined" then	recolor_image(input: "/pokemon-b-common.mse-include/back-p-colored-"+colored_pokemon_suffix_1()+".png", red: card.energy_color_1, green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255))
						else							"/pokemon-b-common.mse-include/back-p-"+texture_type_1()+"-"+background_type_1()+".png"), 
					dark: "overlay-sm-prism.png", mask: if contains(card.general_options_09, match: "Prism Star Card") then "mask-sm-prism.png" else "/pokemon-b-common.mse-include/mask-blank.png"), mask: if contains(card.text_options_3, match: "Body Fade Box") then "mask-box-fade.png" else "/pokemon-b-common.mse-include/mask-blank-reverse.png")
				else if card.card_type=="Dual-Type" then set_combine(input: masked_blend(light: "mask-box-image.png", dark: masked_blend(light: masked_blend(light:
							(if is_image_1() then					card.background_pic_1
							else if texture_type_1()=="Color" and not(background_type_1()=="User Defined") or (colored_pokemon_suffix_1()=="Color" and background_type_1()=="User Defined") then recolor_image(input: "/pokemon-b-common.mse-include/blank-color.png", red: texture_color_1(), green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255))
							else if background_type_1()=="User Defined" then	recolor_image(input: "/pokemon-b-common.mse-include/back-p-colored-"+colored_pokemon_suffix_1()+".png", red: card.energy_color_1, green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255))
							else							"/pokemon-b-common.mse-include/back-p-"+texture_type_1()+"-"+background_type_1()+".png"),
						dark:	(if is_image_2() then					card.background_pic_2
							else if texture_type_2()=="Color" and not(background_type_2()=="User Defined") or (colored_pokemon_suffix_2()=="Color" and background_type_2()=="User Defined") then recolor_image(input: "/pokemon-b-common.mse-include/blank-color.png", red: texture_color_2(), green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255))
							else if background_type_2()=="User Defined" then	recolor_image(input: "/pokemon-b-common.mse-include/back-p-colored-"+colored_pokemon_suffix_2()+".png", red: card.energy_color_2, green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255))
							else							"/pokemon-b-common.mse-include/back-p-"+texture_type_2()+"-"+background_type_2()+".png"),
						mask:	blend_mask()),
					dark: "overlay-sm-prism.png", mask: if contains(card.general_options_09, match: "Prism Star Card") then "mask-sm-prism.png" else "/pokemon-b-common.mse-include/mask-blank.png"), mask: if contains(card.text_options_3, match: "Body Fade Box") then "mask-box-fade.png" else "/pokemon-b-common.mse-include/mask-blank-reverse.png"), combine: if is_two_tone() then "multiply" else "normal")
				else if is_energy()
					then if card.energy_type=="Basic"
						then if basic_energy_meld()=="mix" 
							then if background_type_1()=="Metal" and (card.metal_texture=="Nintendo" or card.metal_texture=="Wizards") then masked_blend(light: "/pokemon-b-common.mse-include/mask-blank.png", dark: masked_blend(light: recolor_image(input: "/pokemon-b-common.mse-include/back-e-colored-"+basic_energy_suffix()+".png", red: basic_color(), green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255)), dark: "/pokemon-b-common.mse-include/mask-blank-reverse.png", mask: "/pokemon-b-common.mse-include/back-e-metal-"+card.metal_texture+".png"), mask: "/pokemon-b-common.mse-include/blend-e-"+basic_energy_suffix()+".png")
							else 						masked_blend(light: "/pokemon-b-common.mse-include/mask-blank.png", dark: recolor_image(input: "/pokemon-b-common.mse-include/back-e-colored-"+basic_energy_suffix()+".png", red: basic_color(), green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255)), mask: "/pokemon-b-common.mse-include/blend-e-"+basic_energy_suffix()+".png")
						else if basic_energy_meld()=="blend" then		masked_blend(light: "/pokemon-b-common.mse-include/mask-blank.png", dark: if background_type_1()=="Metal" and (card.metal_texture=="Nintendo" or card.metal_texture=="Wizards") then "/pokemon-b-common.mse-include/back-e-metal-"+card.metal_texture+".png" else recolor_image(input: "/pokemon-b-common.mse-include/blank-color.png", red: basic_color(), green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255)), mask: "/pokemon-b-common.mse-include/blend-e-"+basic_energy_suffix()+".png")
						else if basic_energy_meld()=="back" then		"/pokemon-b-common.mse-include/back-e-"+basic_energy_suffix()+"-"+background_type_1()+".png"
						else if basic_energy_meld()=="mask" then		masked_blend(light: "/pokemon-b-common.mse-include/mask-blank.png", dark: "/pokemon-b-common.mse-include/back-e-"+background_type_1()+".png", mask: "/pokemon-b-common.mse-include/blend-e-"+basic_energy_suffix()+".png")
						else if basic_energy_meld()=="Generations"
							then if background_type_1()=="Metal" and (card.metal_texture=="Nintendo" or card.metal_texture=="Wizards") then		masked_blend(light: "/pokemon-b-common.mse-include/mask-blank.png", dark: masked_blend(light: "/pokemon-b-common.mse-include/back-e-metal-"+card.metal_texture+".png" , dark: "/pokemon-b-common.mse-include/mask-blank-reverse.png", mask: recolor_image(input: "/pokemon-b-common.mse-include/back-e-colored-generations.png", red: basic_color(), green: basic_color_3(), blue: basic_color_2(), white: rgb(255,255,255))), mask: "/pokemon-b-common.mse-include/blend-e-classic.png")
							else						recolor_image(input: "/pokemon-b-common.mse-include/back-e-colored-generations.png", red: basic_color(), green: basic_color_3(), blue: basic_color_2(), white: rgb(255,255,255))
						else if basic_energy_meld()=="recolor"
							then if background_type_1()=="Metal" and (card.metal_texture=="Nintendo" or card.metal_texture=="Wizards") then		masked_blend(light: "/pokemon-b-common.mse-include/mask-blank.png", dark: "/pokemon-b-common.mse-include/back-e-metal-"+card.metal_texture+".png", mask: "/pokemon-b-common.mse-include/blend-e-special.png")
							else						recolor_image(input: "/pokemon-b-common.mse-include/back-e-colored-"+basic_energy_suffix()+".png", red: basic_color(), green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255))
						else if basic_energy_meld()=="image"
							then if contains(card.basic_user_image_type, match:"Monocolor") then	masked_blend(light: "/pokemon-b-common.mse-include/mask-blank.png", dark: recolor_image(input: recolor_image(input: card.background_pic_1, red: rgb(255,0,0), green: rgb(255,0,0), blue: rgb(255,0,0), white: rgb(255,64,64)), red: basic_color(), green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255)), mask: "/pokemon-b-common.mse-include/blend-e-user"+(if contains(card.basic_user_image_type, match:"Triburst") then "-triburst" else "")+(if contains(card.basic_user_image_type, match:"Sunburst") then "-sunburst" else "")+(if contains(card.basic_user_image_type, match:"Centered") then "-centered" else "")+".png")
							else 						masked_blend(light: "/pokemon-b-common.mse-include/mask-blank.png", dark: card.background_pic_1, mask: "/pokemon-b-common.mse-include/blend-e-user"+(if contains(card.basic_user_image_type, match:"Triburst") then "-triburst" else "")+(if contains(card.basic_user_image_type, match:"Sunburst") then "-sunburst" else "")+(if contains(card.basic_user_image_type, match:"Centered") then "-centered" else "")+".png")
						else "/pokemon-b-common.mse-include/mask-blank.png"
					else "back-e-sm"+(if contains(card.general_options_09, match: "Prism Star Card") then "-prism" else "")+".png"
				else if is_trainer() then if card.trainer=="Tool" and contains(card.general_options_09, match: "Prism Star Card") then "back-t-sm-tool-prism.png"
					else "back-t-sm"+(if contains(card.general_options_09, match: "Prism Star Card") then "-prism" else "")+".png"
				else "/pokemon-b-common.mse-include/mask-blank.png"
#########Background Image for White portion of Two-Tone Text
	background 2:
		left: { x_left(8) }
		top: { y_top(9) }
		width: { fun_expand_size(350) }
		height: { fun_expand_size(if card.card_type=="Dual-Type" and is_two_tone() then 495 else 0) }
		visible: { if card.card_type=="Dual-Type" and is_two_tone() then "yes" else "no" }
		z index: -14
		render style: image
		mask: 
			script: if card.card_type=="Dual-Type" and is_two_tone() then if is_dark_1() and not(is_dark_2()) then	dual_mask()
					else if is_dark_2() and not(is_dark_1()) then						dual_mask_reverse()
					else "/pokemon-b-common.mse-include/mask-blank.png"
				else "/pokemon-b-common.mse-include/mask-blank.png"
		image:
			script: if card.card_type=="Dual-Type" then set_combine(input: masked_blend(light: "mask-box-image.png", dark: masked_blend(light: masked_blend(light:
							(if is_image_1() then					card.background_pic_1
							else if texture_type_1()=="Color" and not(background_type_1()=="User Defined") or (colored_pokemon_suffix_1()=="Color" and background_type_1()=="User Defined") then recolor_image(input: "/pokemon-b-common.mse-include/blank-color.png", red: texture_color_1(), green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255))
							else if background_type_1()=="User Defined" then	recolor_image(input: "/pokemon-b-common.mse-include/back-p-colored-"+colored_pokemon_suffix_1()+".png", red: card.energy_color_1, green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255))
							else							"/pokemon-b-common.mse-include/back-p-"+texture_type_1()+"-"+background_type_1()+".png"),
						dark:	(if is_image_2() then					card.background_pic_2
							else if texture_type_2()=="Color" and not(background_type_2()=="User Defined") or (colored_pokemon_suffix_2()=="Color" and background_type_2()=="User Defined") then recolor_image(input: "/pokemon-b-common.mse-include/blank-color.png", red: texture_color_2(), green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255))
							else if background_type_2()=="User Defined" then	recolor_image(input: "/pokemon-b-common.mse-include/back-p-colored-"+colored_pokemon_suffix_2()+".png", red: card.energy_color_2, green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255))
							else							"/pokemon-b-common.mse-include/back-p-"+texture_type_2()+"-"+background_type_2()+".png"),
						mask:	blend_mask()),
					dark: "overlay-sm-prism.png", mask: if contains(card.general_options_09, match: "Prism Star Card") then "mask-sm-prism.png" else "/pokemon-b-common.mse-include/mask-blank.png"), mask: if contains(card.text_options_3, match: "Body Fade Box") then "mask-box-fade.png" else "/pokemon-b-common.mse-include/mask-blank-reverse.png"), combine: if is_two_tone() then "screen" else "normal")
				else "/pokemon-b-common.mse-include/mask-blank.png"
	######################## Frame Layer -12
	######################## This layer provides the image framework underneath the image
	window:
		left: { x_left(8) }
		top: { y_top(9) }
		width: { fun_expand_size(350) }
		height: { fun_expand_size(if contains(card.art_options, match: "Full Art") then 0 else 495) }
		visible: { not(contains(card.art_options, match: "Full Art")) }
		z index: -12
		render style: image
		image:
			script: if is_trainer() then if contains(card.general_options_09, match: "Prism Star Card") then "window-t-sm-prism.png"
					else ("window-t-sm"+frame_type()+".png")
				else if is_energy() and card.energy_type=="Special" and contains(card.general_options_09, match: "Prism Star Card") then "window-e-sm-prism.png"
				else if is_pokemon() then if contains(card.general_options_09, match: "Prism Star Card") then "window-p-prism.png" else "window-p"+frame_type()+".png"
				else "/pokemon-b-common.mse-include/blank.png"
	######################## Image Layer -10
	######################## This layer is for the user input image
	card image:
		left:
			script: x_left(if contains(card.art_options, match: "Full Art") then 13
				else if is_pokemon() then 29
				else if is_trainer() then 28 
				else 15)
		top:
			script: y_top(if contains(card.art_options, match: "Full Art") then 13
				else if is_pokemon() then 51
				else if is_trainer() then 74
				else if card.energy_type=="Special" then 66
				else 15)
		width:
			script: fun_expand_size(if contains(card.art_options, match: "Full Art") then 339
				else if is_pokemon() then 308
				else if is_trainer() then 308
				else 337)
		height:
			script: fun_expand_size(if contains(card.art_options, match: "Full Art") then 486
				else if is_pokemon() then 191
				else if is_trainer() then 192 
				else if is_energy()
					then if card.energy_type=="Special" then 270
					else if basic_energy_suffix()=="Special" then 310
					else 0
				else 0)
		mask:
			script: if contains(card.art_options, match: "Faded Full Art") then if is_pokemon() then "mask-gx-fade.png" else "/pokemon-b-common.mse-include/mask-fade.png" 
				else if contains(card.art_options, match: "Full Art") then "/pokemon-b-common.mse-include/mask-blank.png"
				else if contains(card.general_options_09, match: "Prism Star Card") then if is_energy() and card.energy_type=="Special" then "mask-image-e-prism.png"
					else if is_trainer() then "mask-image-t-prism.png"
					else if is_pokemon() then "mask-image-p-prism.png"
					else "/pokemon-b-common.mse-include/mask-blank.png"
				else if is_trainer() then "mask-image-t.png"
				else "/pokemon-b-common.mse-include/mask-blank.png"
		z index: -10

	######################## Overimage Under Border Frame -8
	######################## This layer is for items between the image and the border (aka might need covered up by the border)
	image overlay:
		left: { x_left(8) }
		top: { y_top(9) }
		width: { fun_expand_size(350) }
		height: { fun_expand_size(if is_trainer() or (is_pokemon() and (contains(card.general_options_09, match: "GX Pokemon") or contains(card.general_options_09, match: "Ultra Beast Pokemon"))) then 495 else 0) }
		z index: -8
		render style: image
		visible: { is_trainer() or (is_pokemon() and (contains(card.general_options_09, match: "GX Pokemon") or contains(card.general_options_09, match: "Ultra Beast Pokemon"))) }
		image:
			script: if is_trainer() then recolor_image(input: "overlay-t-colored.png", red: trainer_color(), green: rgb(128,128,128) blue: rgb(128,128,128), white: rgb(255,255,255))
				else ("overlay-p"+(if contains(card.general_options_09, match: "GX Pokemon") then "-gx" else "")+(if contains(card.general_options_09, match: "Ultra Beast Pokemon") then "-ub" else "")+frame_type()+".png")
	######################## Border Layer -6
	######################## This layer is for the border
	border:
		left: { x_left(0) }
		top: { y_top(0) }
		width: { fun_expand_size(368) }
		height: { fun_expand_size(513) }
		z index: -6
		render style: image
		image:
			script: if is_pokemon() then if contains(card.general_options_09, match: "GX Pokemon") 
						then if contains(card.general_options_09, match: "Secret Rare (Rainbow)") then "border-gx-rainbow.png"
						else if contains(card.general_options_09, match: "Secret Rare (Gold)") then "border-gx-gold.png"
						else if contains(card.general_options_09, match: "Prism Star Card") then "border-gx-prism.png"
						else "border-gx.png"
					else if contains(card.general_options_09, match: "Secret Rare (Rainbow)") then "border-sun-moon-rainbow.png"
					else if contains(card.general_options_09, match: "Secret Rare (Gold)") then "border-sun-moon-gold.png"
					else if contains(card.general_options_09, match: "Prism Star Card") then "border-sun-moon-prism.png"
					else "border-sun-moon.png"
				else if contains(card.general_options_09, match: "Secret Rare (Rainbow)") then "border-sun-moon-rainbow.png"
				else if contains(card.general_options_09, match: "Secret Rare (Gold)") then "border-sun-moon-gold.png"
				else if contains(card.general_options_09, match: "Prism Star Card") then "border-sun-moon-prism.png"
				else if contains(card.art_options, match: "Full Art") then "border-sun-moon-fatrainer.png"
				else "border-sun-moon.png"
	######################## Overborder Frame -4
	######################## This layer is for items over the border
	border overlay:
		left: { x_left(8) }
		top: { y_top(9) }
		width: { fun_expand_size(350) }
		height: { fun_expand_size(495) }
		z index: -4
		render style: image
		image:
			script: if is_trainer() then if card.trainer=="Tool" then ("frame-t-sm-tool"+(if contains(card.general_options_09, match: "Secret Rare (Gold)") then "-gold" else "")+(if contains(card.art_options, match: "Full Art") then "-fa" else "")+".png")
					else ("frame-t-sm"+frame_type()+".png")
				else if is_energy() and card.energy_type=="Basic" then ("frame-b-sm"+frame_type()+".png")
				else if is_energy() and card.energy_type=="Special" then ("frame-e-sm"+frame_type()+".png")
				else if is_pokemon() then "frame-p-"+stage()+(if contains(card.general_options_09, match: "GX Pokemon") then "-gx" else "")+frame_type()+".png"
				else "/pokemon-b-common.mse-include/blank.png"
	######################## Part of these items are found in the extra card fields
#########The Pokedex entry field underneath the window frame placed here so that it is underneath the popout layer
#########The text listing the pokemon statistics found below the image window
	pokedex text 1:
		left: { pokedex1_left() }
		top: { pokedex1_top() }
		width: { pokedex1_width() }
		height: { pokedex1_height() }
		z index: -1
		alignment: { pokedex1_align() }
		visible: { pokedex1_visible() }
		font
			name: { pokedex1_font() }
			weight: { pokedex1_weight() }
			style: { pokedex1_style() }
			size: { pokedex1_size() }
			color: { pokedex1_color() }
	######################## Popout layers 0
	######################## This layer is for the popout image
	card popout:
		left: { x_left(0) }
		top: { y_top(0) }
		width: { fun_expand_size(368) }
		height: { fun_expand_size(if contains(card.art_options, match: "Popout Art (for Advanced Users)") then 513 else 0) }
		z index: 0
		#mask:
		visible: { if contains(card.art_options, match: "Popout Art (for Advanced Users)") then "yes" else "no" }
	######################## Choice layers 2
	######################## This for choice tabs
	card type:
		left: { x_left(0) }
		top: { y_top(493) }
		width: { fun_expand_size(184) }
		height: { fun_expand_size(20) }
		z index: 2
		render style: image
		popup style: in place
		image: /pokemon-b-common.mse-include/blank.png
	art options:
		left: { x_left(185) }
		top: { y_top(493) }
		width: { fun_expand_size(184) }
		height: { fun_expand_size(20) }
		z index: 2
		render style: image
		popup style: in place
		image: /pokemon-b-common.mse-include/blank.png
	text options 3:
		left: { x_left(185) }
		top: { y_top(0) }
		width: { fun_expand_size(184) }
		height: { fun_expand_size(20) }
		z index: 2
		render style: image
		popup style: in place
		image: /pokemon-b-common.mse-include/blank.png
	general options 09:
		left: { x_left(0) }
		top: { y_top(0) }
		width: { fun_expand_size(184) }
		height: { fun_expand_size(20) }
		z index: 2
		render style: image
		popup style: in place
		image: /pokemon-b-common.mse-include/blank.png
	stage base:
		left: { x_left(0) }
		top: { y_top(20) }
		width: { fun_expand_size(70) }
		height: { if is_pokemon() then fun_expand_size(70) else 0 }
		z index: 2
		render style: image
		popup style: in place
		visible: { if is_pokemon() then "yes" else "no" }
		image: /pokemon-b-common.mse-include/blank.png
	trainer:
		left: { x_left(0) }
		top: { y_top(20) }
		width: { fun_expand_size(70) }
		height: { fun_expand_size(if is_trainer() then 70 else 0) }
		z index: 2
		render style: image
		popup style: in place
		visible: { if is_trainer() then "yes" else "no" }
		image: /pokemon-b-common.mse-include/blank.png
	energy type:
		left: { x_left(0) }
		top: { y_top(20) }
		width: { fun_expand_size(70) }
		height: { fun_expand_size(if is_energy() then 70 else 0) }
		z index: 2
		render style: image
		popup style: in place
		visible: { if is_energy() then "yes" else "no" }
		image: /pokemon-b-common.mse-include/blank.png
	card color 1:
		left: { x_left(if card.card_type=="Dual-Type" then energy_left()-energy_left_difference() else energy_left()) }
		top: { y_top(0) }
		width: { fun_expand_size(energy_width()) }
		height: { fun_expand_size(if is_pokemon() or (is_energy() and card.energy_type=="Basic") then energy_top()+energy_width() else 0) }
		visible: { if is_pokemon() or is_energy() then "yes" else "no" }
		z index: 3
		render style: image
		popup style: in place
		image: /pokemon-b-common.mse-include/blank.png
	card color 2:
		left: { x_left(energy_left()+energy_right_difference()) }
		top: { y_top(0) }
		width: { fun_expand_size(energy_width()) }
		height: { fun_expand_size(if card.card_type=="Dual-Type" then energy_top()+energy_width() else 0) }
		visible: { if card.card_type=="Dual-Type" then "yes" else "no" }
		z index: 3
		render style: image
		popup style: in place
		image: /pokemon-b-common.mse-include/blank.png
	texture type 1:
		left: { x_left(0) }
		top: { y_top(413) }
		width: { fun_expand_size(20) }
		height: { fun_expand_size(if is_pokemon() and not(background_type_1()=="User Defined") then 80 else 0) }
		z index: 2
		render style: image
		popup style: in place
		visible: { if is_pokemon() and not(background_type_1()=="User Defined") then "yes" else "no" }
		image: /pokemon-b-common.mse-include/blank.png
	texture type 2:
		left: { x_left(348) }
		top: { y_top(413) }
		width: { fun_expand_size(20) }
		height: { fun_expand_size(if card.card_type=="Dual-Type" and not(background_type_2()=="User Defined") then 80 else 0) }
		z index: 2
		render style: image
		popup style: in place
		visible: { if card.card_type=="Dual-Type" and not(background_type_2()=="User Defined") then "yes" else "no" }
		image: /pokemon-b-common.mse-include/blank.png
	color texture 1:
		left: { x_left(0) }
		top: { y_top(413) }
		width: { fun_expand_size(20) }
		height: { fun_expand_size(if is_pokemon() and background_type_1()=="User Defined" then 80 else 0) }
		z index: 2
		render style: image
		popup style: in place
		visible: { if is_pokemon() and background_type_1()=="User Defined" then "yes" else "no" }
		image: /pokemon-b-common.mse-include/blank.png
	color texture 2:
		left: { x_left(348) }
		top: { y_top(413) }
		width: { fun_expand_size(20) }
		height: { fun_expand_size(if card.card_type=="Dual-Type" and background_type_2()=="User Defined" then 80 else 0) }
		z index: 2
		render style: image
		popup style: in place
		visible: { if card.card_type=="Dual-Type" and background_type_2()=="User Defined" then "yes" else "no" }
		image: /pokemon-b-common.mse-include/blank.png
	basic texture:
		left: { x_left(0) }
		top: { y_top(413) }
		width: { fun_expand_size(20) }
		height: { fun_expand_size(if is_energy() and card.energy_type=="Basic" then 80 else 0) }
		z index: 2
		render style: image
		popup style: in place
		visible: { if is_energy() and card.energy_type=="Basic" then "yes" else "no" }
		image: /pokemon-b-common.mse-include/blank.png
	metal texture:
		left: { x_left(348) }
		top: { y_top(413) }
		width: { fun_expand_size(20) }
		height: { fun_expand_size(if is_energy() and card.energy_type=="Basic" and card.card_color_1=="Metal" then 80 else 0) }
		z index: 2
		render style: image
		popup style: in place
		visible: { if is_energy() and card.energy_type=="Basic" and card.card_color_1=="Metal" then "yes" else "no" }
		image: /pokemon-b-common.mse-include/blank.png
	basic user image type:
		left: { x_left(348) }
		top: { y_top(413) }
		width: { fun_expand_size(20) }
		height: { fun_expand_size(if is_energy() and card.energy_type=="Basic" and basic_energy_suffix()=="User Image" then 80 else 0) }
		z index: 2
		render style: image
		popup style: in place
		visible: { if is_energy() and card.energy_type=="Basic" and basic_energy_suffix()=="User Image" then "yes" else "no" }
	dual blend type:
		left: { x_left(0) }
		top: { y_top(90) }
		width: { fun_expand_size(20) }
		height: { fun_expand_size(if card.card_type=="Dual-Type" then 80 else 0) }
		z index: 2
		render style: image
		popup style: in place
		visible: { if card.card_type=="Dual-Type" then "yes" else "no" }
		image: /pokemon-b-common.mse-include/blank.png
	######################## Overborder Frame 4
	######################## This layer is for items needed just before the user input text.

	######################## Also has materials found in the extra card fields
#########These two fields show the pokemon energy symbol.  It was converted to a symbol font to allow easy modification in the future to alternate symbols
	color text 1:
		left: { x_left(if card.card_type=="Dual-Type" then energy_left()-energy_left_difference() else energy_left()) }
		top: { y_top(energy_top()) }
		width: { fun_expand_size(energy_width()) }
		height: { fun_expand_size(if (is_pokemon() or (is_energy() and card.energy_type=="Basic")) and not(card.card_color_1=="User Defined") then energy_width() else 0) }
		visible: { if (is_pokemon() or (is_energy() and card.energy_type=="Basic")) and not(card.card_color_1=="User Defined") then "yes" else "no" }
		z index: 5
		always symbol: true
		symbol font:
			name: pokemon-a-color
			size: { fun_expand_font(energy_width()) }
	color text 1 dup:
		left: { x_left(basic_energy_left()) }
		top: { y_top(basic_energy_top()) }
		width: { fun_expand_size(basic_energy_width()) }
		height: { fun_expand_size(if is_energy() and card.energy_type=="Basic" and not(card.card_color_1=="User Defined") then basic_energy_width() else 0) }
		visible: { is_energy() and card.energy_type=="Basic" and not(card.card_color_1=="User Defined") }
		z index: 5
		always symbol: true
		symbol font:
			name: pokemon-a-lg-color
			size: { fun_expand_font(basic_energy_width()) }
	color text 2:
		left: { x_left(energy_left()+energy_right_difference()) }
		top: { y_top(energy_top()) }
		width: { fun_expand_size(energy_width()) }
		height: { fun_expand_size(if card.card_type=="Dual-Type" and not(card.card_color_2=="User Defined") then energy_width() else 0) }
		z index: 3
		visible: { if (card.card_type=="Dual-Type" and not(card.card_color_2=="User Defined")) then "yes" else "no" }
		always symbol: true
		symbol font:
			name: pokemon-a-color
			size: { fun_expand_font(energy_width()) }
#########These two fields allow a user input energy orb image
	energy orb pic 1:
		left: { x_left(if card.card_type=="Dual-Type" then energy_left()-energy_left_difference() else energy_left()) }
		top: { y_top(energy_top()) }
		width: { fun_expand_size(energy_width()) }
		height: { fun_expand_size(if ((is_pokemon() or (is_energy() and card.energy_type=="Basic")) and card.card_color_1=="User Defined") then energy_width() else 0) }
		visible: { if ((is_pokemon() or (is_energy() and card.energy_type=="Basic")) and card.card_color_1=="User Defined") then "yes" else "no" }
		z index: 6
	energy orb pic 2:
		left: { x_left(energy_left()+energy_right_difference()) }
		top: { y_top(energy_top()) }
		width: { fun_expand_size(energy_width()) }
		height: { fun_expand_size(if card.card_type=="Dual-Type" and card.card_color_2=="User Defined" then energy_width() else 0) }
		z index: 4
		visible: { if card.card_type=="Dual-Type" and card.card_color_2=="User Defined" then "yes" else "no" }
#########Set Symbol
	set:
		left: { x_left(23) }
		top: { y_top(474) }
		width: { fun_expand_size(16) }
		height: { fun_expand_size(16) }
		z index: 4
		visible: { contains(set.visibility_options, match: "Visible Set Symbol") and not(contains(set.visibility_options, match: "User image for set symbol")) }
		render style: image
		choice images:
			common: script: symbol_variation(symbol: set.symbol, border_radius: if set.include_border_on_set_symbol=="yes" then 0.1 else 0, fill_color: set.set_symbol_fill_color, border_color: set.set_symbol_border_color)
	set symbol:
		left: { x_left(23) }
		top: { y_top(474) }
		width: { fun_expand_size(16) }
		height: { fun_expand_size(16) }
		z index: 4
		visible: { contains(set.visibility_options, match: "Visible Set Symbol") and contains(set.visibility_options, match: "User image for set symbol") }
		render style: image
		image: { set.symbol_image }
	######################## First Text Frame 6
	######################## This layer is for input text

	######################## Also has materials found in the extra card fields
#########card number
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	card number:
		left: { card_no_left() }
		top: { card_no_top() }
		width: { card_no_width() }
		height: { if contains(set.visibility_options, match: "Visible Card Numbers on all cards") then card_no_height() else 0 }
		z index: 6
		alignment: { card_no_align() }
		visible: { if contains(set.visibility_options, match: "Visible Card Numbers on all cards") then "yes" else "no" }
		font:
			name: { card_no_font() }
			size: { card_no_size() }
			weight: { card_no_weight() }
			style: { card_no_style() }
			color: { if is_two_tone() then rgba(0,0,0,0) else if is_wt_text() then rgb(255,255,255) else rgb(0,0,0) }
#########Illustrator name
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	illustrator:
		left: { ill_left() }
		top: { ill_top() }
		width: { ill_width() }
		height: { if contains(card.text_options_3, match: "Use Primary Set Artist") then 0 else ill_height() }
		z index: 6
		alignment: { ill_align() }
		visible: { if contains(card.text_options_3, match: "Use Primary Set Artist") then "no" else "yes" }
		font:
			name: { ill_font() }
			weight: { ill_weight() }
			style: { ill_style() }
			size: { ill_size() }
			color: { if is_two_tone() then rgba(0,0,0,0) else if is_wt_text() then rgb(255,255,255) else rgb(0,0,0) }
#########Copyright
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	copyright:
		left: { copy_left() }
		top: { copy_top() }
		width: { copy_width() }
		height: { if contains(set.visibility_options, match: "Visible Copyright on all cards") and not(contains(card.text_options_3, match: "Use Set Copyright")) then copy_height() else 0 }
		z index: 6
		alignment: { copy_align() }
		visible: { if contains(set.visibility_options, match: "Visible Copyright on all cards") and not(contains(card.text_options_3, match: "Use Set Copyright")) then "yes" else "no" }
		font:
			name: { copy_font() }
			size: { copy_size() }
			weight: { copy_weight() }
			style: { copy_style() }
			color: { copy_color() }
#########Rarity Symbol
	rarity:
		left: { x_left(78-(if is_outline() then 1 else 0)) }
		top: { y_top(480-(if is_outline() then 1 else 0)) }
		height: { fun_expand_size(7+(if is_outline() then 2 else 0)) }
		width: { fun_expand_size(7+(if is_outline() then 2 else 0)) }
		z index: 6
		render style: image
		visible: { if contains(set.visibility_options, match: "Visible Rarity symbol on all cards") then "yes" else "no" }
		choice images:
			common:		{ if is_outline() and not(is_energy()) then "/pokemon-b-common.mse-include/rarity-out-common.png" else if rarity_color() then "/pokemon-b-common.mse-include/rarity-wt-common.png" else "/pokemon-b-common.mse-include/rarity-bk-common.png" }
			uncommon:	{ if is_outline() and not(is_energy()) then "/pokemon-b-common.mse-include/rarity-out-uncommon.png" else if rarity_color() then "/pokemon-b-common.mse-include/rarity-wt-uncommon.png" else "/pokemon-b-common.mse-include/rarity-bk-uncommon.png" }
			rare:		{ if is_outline() and not(is_energy()) then "/pokemon-b-common.mse-include/rarity-out-rare.png" else if rarity_color() then "/pokemon-b-common.mse-include/rarity-wt-rare.png" else "/pokemon-b-common.mse-include/rarity-bk-rare.png" }
			extra rare:	{ if is_outline() and not(is_energy()) then "/pokemon-b-common.mse-include/rarity-out-erare.png" else if rarity_color() then "/pokemon-b-common.mse-include/rarity-wt-erare.png" else "/pokemon-b-common.mse-include/rarity-bk-erare.png" }
#########Text overlay that says "weakness"
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	weakoverlay:
		left: { weak_ov_left() }
		top: { weak_ov_top() }
		width: { weak_ov_width() }
		height: { weak_ov_height() }
		z index: 6
		visible: { wrr_ov_visible() }
		alignment: { wrr_ov_align() }
		font:
			name: { wrr_ov_font() }
			weight: { wrr_ov_weight() }
			style: { wrr_ov_style() }
			size: { wrr_ov_size() }
			color: { rgb(0,0,0) }
#########Text overlay that says "resistance"
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	resoverlay:
		left: { res_ov_left() }
		top: { res_ov_top() }
		width: { res_ov_width() }
		height: { res_ov_height() }
		z index: 6
		visible: { wrr_ov_visible() }
		alignment: { wrr_ov_align() }
		font:
			name: { wrr_ov_font() }
			weight: { wrr_ov_weight() }
			style: { wrr_ov_style() }
			size: { wrr_ov_size() }
			color: { rgb(0,0,0) }
#########Text overlay that says "retreat cost"
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	retoverlay:
		left: { ret_ov_left() }
		top: { ret_ov_top() }
		width: { ret_ov_width() }
		height: { ret_ov_height() }
		z index: 6
		visible: { wrr_ov_visible() }
		alignment: { wrr_ov_align() }
		font:
			name: { wrr_ov_font() }
			weight: { wrr_ov_weight() }
			style: { wrr_ov_style() }
			size: { wrr_ov_size() }
			color: { rgb(0,0,0) }
#########Card Title
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	card name:
		left: { card_name_left() }
		top: { card_name_top() }
		width: { card_name_width() }
		height: { card_name_height() }
		visible: { card_name_visible() }
		z index: 6
		alignment: { card_name_align() }
		symbol font:
			name: { card_name_symbol_font() }
			size: { card_name_symbol_size() }
		font:
			name: { card_name_font() }
			weight: { card_name_weight() }
			style: { card_name_style() }
			size: { card_name_size() }
			color: { if is_wt_top() then rgb(255,255,255) else rgb(0,0,0) }
#########HP Text
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	hp:
		left: { hp_left() }
		top: { hp_top() }
		width: { hp_width() }
		height: { hp_height() }
		z index: 6
		alignment: { hp_align() }
		visible: { hp_visible() }
		font:
			name: { hp_font() }
			weight: { hp_weight() }
			style: { hp_style() }
			size: { hp_size() }
			color: { hp_color() }
#########The Weakness for pokemon and doubles as the top energy top marker for energy
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	weakness:
		left: { weak_left() }
		top: { weak_top() }
		width: { weak_width() }
		height: { weak_height() }
		z index: 6
		always symbol: true
		visible: { weak_visible() }
		alignment: { weak_align() }
		font:
			name: { weak_font() }
			size: { weak_size() }
			weight: { weak_weight() }
			style: { weak_style() }
			color: { rgb(0,0,0) }
		symbol font:
			name: { weak_symbol_font() }
			size: { weak_symbol_size() }
#########The resistance for pokemon
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	resistance:
		left: { resist_left() }
		top: { resist_top() }
		width: { resist_width() }
		height: { resist_height() }
		z index: 6
		always symbol: true
		visible: { resist_visible() }
		alignment: { resist_align() }
		font:
			name: { resist_font() }
			size: { resist_size() }
			weight: { resist_weight() }
			style: { resist_style() }
			color: { rgb(0,0,0) }
		symbol font:
			name: { resist_symbol_font() }
			size: { resist_symbol_size() }
#########The retreat cost fot pokemon uses a poke-a-energy symbol font only,
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	retreat cost:
		left: { retreat_left() }
		top: { retreat_top() }
		width: { retreat_width() }
		height: { retreat_height() }
		z index: 6
		visible: { retreat_visible() }
		symbol font:
			name: { retreat_symbol_font() }
			size: { retreat_symbol_size() }
		always symbol: true
		alignment: { retreat_align() }
#########Flavor Text
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	flavor text:
		left: { flavor_left() }
		top: { flavor_top() }
		width: { flavor_width() }
		height: { flavor_height() }
		z index: 6
		visible: { flavor_visible() }
		alignment: { flavor_align() }
		font:
			name: { flavor_font() }
			scale down to: 6
			weight: { flavor_weight() }
			style: { flavor_style() }
			size: { flavor_size() }
			color: { if is_two_tone() then rgba(0,0,0,0) else if is_wt_text() then rgb(255,255,255) else rgb(0,0,0) }
		line height soft: { flavor_lh_soft() }
#########The pokemon this one evolves from
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	evolution reminder 1:
		left: { evolution_left() }
		top: { evolution_top() }
		width: { evolution_width() }
		height: { evolution_rem_height() }
		alignment: { evolution_align() }
		z index: 6
		visible: { evolution_rem_visible() }
		font:
			name: { evolution_font() }
			weight: { evolution_weight() }
			style: { evolution_style() }
			size: { evolution_size() }
			color: { evolution_color() }
######### User input, the actual pokemon it is evolved from
	evolution entry:
		left: { evo_left() }
		top: { evolution_top() }
		width: { evo_width() }
		height: { evo_height() }
		alignment: { evolution_align() }
		z index: 6
		visible: { evo_visible() }
		font:
			name: { evolution_font() }
			weight: { evolution_weight() }
			style: { evolution_style() }
			size: { evolution_size() }
			color: { evolution_color() }
#########Image showing the evolution line of the evolved pokemon
	evolution pic:
		left: { x_left(if is_energy() and card.energy_type=="Basic" and card.card_color_1=="User Defined" then basic_energy_left() else 16) }
		top: { y_top(if is_energy() and card.energy_type=="Basic" and card.card_color_1=="User Defined" then basic_energy_top() else 40) }
		width: { fun_expand_size(if is_energy() and card.energy_type=="Basic" and card.card_color_1=="User Defined" then basic_energy_width() else 38) }
		height: { fun_expand_size(if is_energy() and card.energy_type=="Basic" and card.card_color_1=="User Defined" then basic_energy_width() else if is_pokemon() then if stage()=="Basic" then 0 else 40 else 0) }
		z index: 6
		mask: { if is_energy() and card.energy_type=="Basic" and card.card_color_1=="User Defined" then "/pokemon-b-common.mse-include/mask-e-large.png" else "mask-evolution-sunmoon.png" }
		visible: { if (is_pokemon() and not(stage()=="Basic")) or (is_energy() and card.energy_type=="Basic" and card.card_color_1=="User Defined") then "yes" else "no" }
#########Text on the GX rule title or the Special Energy title
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	title reminder 1 9:
		left: { title_1_left() }
		top: { title_1_top() }
		width: { title_1_width() }
		height: { title_rem_1_height() }
		z index: 6
		visible: { title_rem_1_visible() }
		alignment: { title_1_align() }
		font:
			name: { title_1_font() }
			weight: { title_1_weight() }
			style: { title_1_style() }
			size: { title_1_size() }
			color: { title_1_color() }
	title text 1:
		left: { title_1_left() }
		top: { title_1_top() }
		width: { title_1_width() }
		height: { title_txt_1_height() }
		z index: 6
		visible: { title_txt_1_visible() }
		alignment: { title_1_align() }
		font:
			name: { title_1_font() }
			weight: { title_1_weight() }
			style: { title_1_style() }
			size: { title_1_size() }
			color: { title_1_color() }
#########This text explains the the rules of the trainers and the GX Rule
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	special rule reminder 1 9:
		left: { special_rule_left() }
		top: { special_rule_top() }
		width: { special_rule_width() }
		height: { special_rule_rem_height() }
		z index: 6
		visible: { special_rule_rem_visible() }
		alignment: { special_rule_align() }
		line height soft: { special_rule_lh_soft() }
		mask: { special_rule_mask() }
		font:
			name: { special_rule_font() }
			scale down to: 6
			weight: { special_rule_weight() }
			style: { special_rule_style() }
			size: { special_rule_size() }
			color: { special_rule_color() }
	special rule text 1:
		left: { special_rule_left() }
		top: { special_rule_top() }
		width: { special_rule_width() }
		height: { special_rule_txt_height() }
		z index: 6
		visible: { special_rule_txt_visible() }
		alignment: { special_rule_align() }
		line height soft: { special_rule_lh_soft() }
		mask: { special_rule_mask() }
		font:
			name: { special_rule_font() }
			scale down to: 6
			weight: { special_rule_weight() }
			style: { special_rule_style() }
			size: { special_rule_size() }
			color: { special_rule_color() }
######### Trainer Pokemon Tool Title
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	title reminder 2 9:
		left: { title_2_left() }
		top: { title_2_top() }
		width: { title_2_width() }
		height: { title_rem_2_height() }
		z index: 6
		visible: { title_rem_2_visible() }
		alignment: { title_2_align() }
		font:
			name: { title_2_font() }
			weight: { title_2_weight() }
			style: { title_2_style() }
			size: { title_2_size() }
			color: { title_2_color() }
	title text 2:
		left: { title_2_left() }
		top: { title_2_top() }
		width: { title_2_width() }
		height: { title_txt_2_height() }
		z index: 6
		visible: { title_txt_2_visible() }
		alignment: { title_2_align() }
		font:
			name: { title_2_font() }
			weight: { title_2_weight() }
			style: { title_2_style() }
			size: { title_2_size() }
			color: { title_2_color() }
#########This text explains the the tool rules
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	special rule reminder 2 9:
		left: { special_rule_2_left() }
		top: { special_rule_2_top() }
		width: { special_rule_2_width() }
		height: { special_rule_2_rem_height() }
		z index: 6
		visible: { special_rule_2_rem_visible() }
		alignment: { special_rule_2_align() }
		line height soft: { special_rule_2_lh_soft() }
		mask: { special_rule_2_mask() }
		font:
			name: { special_rule_2_font() }
			scale down to: 6
			weight: { special_rule_2_weight() }
			style: { special_rule_2_style() }
			size: { special_rule_2_size() }
			color: { special_rule_2_color() }
	special rule text 2:
		left: { special_rule_2_left() }
		top: { special_rule_2_top() }
		width: { special_rule_2_width() }
		height: { special_rule_2_txt_height() }
		z index: 6
		visible: { special_rule_2_txt_visible() }
		alignment: { special_rule_2_align() }
		line height soft: { special_rule_2_lh_soft() }
		mask: { special_rule_2_mask() }
		font:
			name: { special_rule_2_font() }
			scale down to: 6
			weight: { special_rule_2_weight() }
			style: { special_rule_2_style() }
			size: { special_rule_2_size() }
			color: { special_rule_2_color() }
#########This text titles that prism star rule
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	ability reminder 1 9:
		left: { ability_1_left() }
		top: { ability_1_top() }
		width: { ability_1_width() }
		height: { ability_rem_1_height() }
		alignment: { ability_1_align() }
		z index: 6
		visible: { ability_rem_1_visible() }
		symbol font:
			name: { ability_1_symbol_font() }
			size: { ability_1_symbol_size() }
			alignment: bottom center
		font:
			name: { ability_1_font() }
			weight: { ability_1_weight() }
			style: { ability_1_style() }
			size: { ability_1_size() }
			color: { ability_1_color() }
	ability text 1:
		left: { ability_1_left() }
		top: { ability_1_top() }
		width: { ability_1_width() }
		height: { ability_txt_1_height() }
		alignment: { ability_1_align() }
		z index: 6
		visible: { ability_txt_1_visible() }
		symbol font:
			name: { ability_1_symbol_font() }
			size: { ability_1_symbol_size() }
			alignment: bottom center
		font:
			name: { ability_1_font() }
			weight: { ability_1_weight() }
			style: { ability_1_style() }
			size: { ability_1_size() }
			color: { ability_1_color() }
#########This text explains the the prism star rules
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	rule reminder 1 9:
		left: { abilrule_1_left() }
		top: { abilrule_1_top() }
		width: { abilrule_1_width() }
		height: { abilrule_1_rem_height() }
		z index: 6
		visible: { abilrule_1_rem_visible() }
		alignment: { abilrule_1_align() }
		line height soft: { abilrule_1_lh_soft() }
		padding top: { 	abilrule_1_pad_top() }
		padding top min: 1
		mask: { abilrule_1_mask() }
		symbol font:
			name: { abilrule_1_symbol_font() }
			size: { abilrule_1_symbol_size() }
			alignment: bottom center
		font:
			name: { abilrule_1_font() }
			scale down to: 6
			weight: { abilrule_1_weight() }
			style: { abilrule_1_style() }
			size: { abilrule_1_size() }
			color: { abilrule_1_color() }
	ability rule text 1:
		left: { abilrule_1_left() }
		top: { abilrule_1_top() }
		width: { abilrule_1_width() }
		height: { abilrule_1_txt_height() }
		z index: 6
		visible: { abilrule_1_txt_visible() }
		alignment: { abilrule_1_align() }
		line height soft: { abilrule_1_lh_soft() }
		padding top: { 	abilrule_1_pad_top() }
		padding top min: 1
		mask: { abilrule_1_mask() }
		symbol font:
			name: { abilrule_1_symbol_font() }
			size: { abilrule_1_symbol_size() }
			alignment: bottom center
		font:
			name: { abilrule_1_font() }
			scale down to: 6
			weight: { abilrule_1_weight() }
			style: { abilrule_1_style() }
			size: { abilrule_1_size() }
			color: { abilrule_1_color() }
######################## Rule Text everything that follows within this layer is Attack/Rule Text on the cards.
#########Rules text used by energy and trainers, kept separate from pokemon because of the scale down issue
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	rule np 1:
		left: { rule_np_1_left() }
		top: { rule_np_1_top() }
		width: { rule_np_1_width() }
		height: { rule_np_1_height() }
		z index: 6
		visible: { rule_np_1_visible() }
		alignment: { rule_np_1_align() }
		line height hard: { rule_np_1_lh_hard() }
		line height soft: { rule_np_1_lh_soft() }
		symbol font:
			name: { rule_np_1_symbol_font() }
			size: { rule_np_1_symbol_size() }
			alignment: middle center
		font:
			name: { rule_np_1_font() }
			size: { rule_np_1_size() }
			weight: { rule_np_1_weight() }
			style: { rule_np_1_style() }
			scale down to: 6
			color: { rgb(0,0,0) }
#########The next field lists the cost of the first attack
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	cost classic 1:
		left: { cost_1_left() }
		top: { cost_1_top() }
		width: { cost_1_width() }
		height: { cost_1_height() }
		z index: 6
		visible: { cost_1_visible() }
		alignment: { cost_align() }
		always symbol: true
		symbol font:
			name: { cost_symbol_font() }
			size: { cost_symbol_size() }
#########This shows title of the 1st poke-power or body
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	attack 1:
		left: { attack_1_left() }
		top: { attack_1_top() }
		width: { attack_1_width() }
		height: { attack_1_height() }
		z index: 6
		visible: { attack_1_visible() }
		alignment: { attack_align() }
		font:
			name: { attack_font() }
			weight: { attack_weight() }
			style: { attack_style() }
			size: { attack_size() }
			color: { attack_color() }
#########This shows the 1st attacks damage
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	damage 1:
		left: { damage_1_left() }
		top: { damage_1_top() }
		width: { damage_1_width() }
		height: { damage_1_height() }
		z index: 6
		visible: { damage_1_visible() }
		alignment: { damage_align() }
		font:
			name: { damage_font() }
			weight: { damage_weight() }
			style: { damage_style() }
			size: { damage_size() }
			color: { if is_two_tone() then rgba(0,0,0,0) else if is_wt_text() then rgb(255,255,255) else rgb(0,0,0) }
#########This field is the title and rules text
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	rule text 1:
		left: { rule_1_left() }
		top: { rule_1_top() }
		width: { rule_1_width() }
		height: { rule_1_height() }
		z index: 6
		visible: { rule_1_visible() }
		alignment: { rule_1_align() }
		line height hard: { rule_lh_hard() }
		symbol font:
			name: { rule_symbol_font() }
			size: { rule_symbol_size() }
		font:
			name: { rule_font() }
			weight: { rule_weight() }
			style: { rule_style() }
			size: { rule_size() }
			scale down to: 6
			color: { if is_two_tone() then rgba(0,0,0,0) else if is_wt_text() then rgb(255,255,255) else rgb(0,0,0) }
#########The next fields lists the cost of the second attack
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	cost classic 2:
		left: { cost_2_left() }
		top: { cost_2_top() }
		width: { cost_2_width() }
		height: { cost_2_height() }
		z index: 6
		visible: { cost_2_visible() }
		alignment: { cost_align() }
		always symbol: true
		symbol font:
			name: { cost_symbol_font() }
			size: { cost_symbol_size() }
#########This shows title of the 2nd poke-power or body
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	attack 2:
		left: { attack_2_left() }
		top: { attack_2_top() }
		width: { attack_2_width() }
		height: { attack_2_height() }
		z index: 6
		visible: { attack_2_visible() }
		alignment: { attack_align() }
		font:
			name: { attack_font() }
			weight: { attack_weight() }
			style: { attack_style() }
			size: { attack_size() }
			color: { attack_color() }
#########This shows the 2nd attacks damage
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	damage 2:
		left: { damage_2_left() }
		top: { damage_2_top() }
		width: { damage_2_width() }
		height: { damage_2_height() }
		z index: 6
		visible: { damage_2_visible() }
		alignment: { damage_align() }
		font:
			name: { damage_font() }
			weight: { damage_weight() }
			style: { damage_style() }
			size: { damage_size() }
			color: { if is_two_tone() then rgba(0,0,0,0) else if is_wt_text() then rgb(255,255,255) else rgb(0,0,0) }
#########This field is the title and rules text
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	rule text 2:
		left: { rule_2_left() }
		top: { rule_2_top() }
		width: { rule_2_width() }
		height: { rule_2_height() }
		z index: 6
		visible: { rule_2_visible() }
		alignment: { rule_2_align() }
		line height hard: { rule_lh_hard() }
		symbol font:
			name: { rule_symbol_font() }
			size: { rule_symbol_size() }
		font:
			name: { rule_font() }
			weight: { rule_weight() }
			style: { rule_style() }
			size: { rule_size() }
			scale down to: 6
			color: { if is_two_tone() then rgba(0,0,0,0) else if is_wt_text() then rgb(255,255,255) else rgb(0,0,0) }
#########The next field lists the cost of the third attack
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	cost classic 3:
		left: { cost_3_left() }
		top: { cost_3_top() }
		width: { cost_3_width() }
		height: { cost_3_height() }
		z index: 6
		visible: { cost_3_visible() }
		alignment: { cost_align() }
		always symbol: true
		symbol font:
			name: { cost_symbol_font() }
			size: { cost_symbol_size() }
#########This shows title of the 3rd poke-power or body
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	attack 3:
		left: { attack_3_left() }
		top: { attack_3_top() }
		width: { attack_3_width() }
		height: { attack_3_height() }
		z index: 6
		visible: { attack_3_visible() }
		alignment: { attack_align() }
		font:
			name: { attack_font() }
			weight: { attack_weight() }
			style: { attack_style() }
			size: { attack_size() }
			color: { attack_color() }
#########This shows the 3rd attacks damage
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	damage 3:
		left: { damage_3_left() }
		top: { damage_3_top() }
		width: { damage_3_width() }
		height: { damage_3_height() }
		z index: 6
		visible: { damage_3_visible() }
		alignment: { damage_align() }
		font:
			name: { damage_font() }
			weight: { damage_weight() }
			style: { damage_style() }
			size: { damage_size() }
			color: { if is_two_tone() then rgba(0,0,0,0) else if is_wt_text() then rgb(255,255,255) else rgb(0,0,0) }
#########This field is the title and rules text
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	rule text 3:
		left: { rule_3_left() }
		top: { rule_3_top() }
		width: { rule_3_width() }
		height: { rule_3_height() }
		z index: 6
		visible: { rule_3_visible() }
		alignment: { rule_3_align() }
		line height hard: { rule_lh_hard() }
		symbol font:
			name: { rule_symbol_font() }
			size: { rule_symbol_size() }
		font:
			name: { rule_font() }
			weight: { rule_weight() }
			style: { rule_style() }
			size: { rule_size() }
			scale down to: 6
			color: { if is_two_tone() then rgba(0,0,0,0) else if is_wt_text() then rgb(255,255,255) else rgb(0,0,0) }

	######################## Choice layers 8
	######################## This layer displays the informational text for the use of this tool template
#########This is the image field to show the notification for the tournament placement
	place:
		left: { x_left(if is_pokemon() then 48 else if is_trainer() then 42 else 22) }
		top: { y_top(if is_pokemon() then 221 else if is_trainer() then 250 else 317) }
		width: { fun_expand_size(94) }
		height: { fun_expand_size(if contains(card.art_options, match: "Add Tournament Place Icons") then 14 else 0) }
		visible: { if contains(card.art_options, match: "Add Tournament Place Icons") then "yes" else "no" }
		z index: 8
		render style: image
		popup style: in place
		choice images:
			1st:	/pokemon-b-common.mse-include/place-1.png
			2nd:	/pokemon-b-common.mse-include/place-2.png
			3rd:	/pokemon-b-common.mse-include/place-3.png
			4th:	/pokemon-b-common.mse-include/place-4.png
			5th:	/pokemon-b-common.mse-include/place-5.png
			6th:	/pokemon-b-common.mse-include/place-6.png
			7th:	/pokemon-b-common.mse-include/place-7.png
			8th:	/pokemon-b-common.mse-include/place-8.png
############################################################## Extra Card Fields
############################# Non-User Input Choice Fields for Images
extra card field:
	type: choice
	name: title overlay
	show statistics: false
	card list allow: false
	save value: false
	editable: false
	choice: title overlay
extra card field:
	type: choice
	name: fullart prism overlay
	card list allow: false
	save value: false
	editable: false
	choice: fullart prism overlay
extra card style:
	######################## Choice layers -2
	######################## This for items over the frame
	title overlay:
		left: { x_left(if is_pokemon() then 8 else 253) }
		top: { y_top(9) }
		width: { fun_expand_size(if is_pokemon() then 51 else 105) }
		height: { fun_expand_size(if is_pokemon() then 30 else if is_trainer() and not(card.trainer=="User Defined") then 25 else 0) }
		z index: -2
		render style: image
		visible: { is_pokemon() or (is_trainer() and not(card.trainer=="User Defined")) }
		image: { if is_pokemon() then "overlay-p-"+stage()+".png" else if is_trainer() and not(card.trainer=="User Defined") then "overlay-title-"+trainer_type()+".png" else "/pokemon-b-common.mse-include/blank.png" }
	fullart prism overlay:
		left: { x_left(8) }
		top: { y_top(9) }
		width: { fun_expand_size(350) }
		height: { fun_expand_size(if contains(card.art_options, match: "Full Art") and contains(card.general_options_09, match: "Prism Star Card") then 495 else 0) }
		z index: -8
		render style: image
		visible: { contains(card.art_options, match: "Full Art") and contains(card.general_options_09, match: "Prism Star Card") }
		image: 
			script: if is_pokemon() then "overlay-prism-p.png"
				else if is_trainer() then if card.trainer=="Tool" then "overlay-prism-t-tool.png"
					else "overlay-prism-t.png"
				else "overlay-prism-e.png"
############################# Duplicate text files found behind the Text Popout Image for two-tone text
extra card field:
	type: text
	name: illustrator dup
	show statistics: false
	default: set.artist
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: copyright dup
	show statistics: false
	default: set.copyright
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: card number 2t dup
	show statistics: false
	default: card.card_number
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: illustrator 2t dup
	show statistics: false
	default: ill_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: copyright 2t dup
	show statistics: false
	default: copy_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: flavor text 2t dup
	show statistics: false
	default: card.flavor_text
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: rule np 1 2t dup
	show statistics: false
	default: card.rule_np_1
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: damage 1 2t dup
	show statistics: false
	default: card.damage_1
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: rule text 1 2t dup
	show statistics: false
	default: card.rule_text_1
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: damage 2 2t dup
	show statistics: false
	default: card.damage_2
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: rule text 2 2t dup
	show statistics: false
	default: card.rule_text_2
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: damage 3 2t dup
	show statistics: false
	default: card.damage_3
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: rule text 3 2t dup
	show statistics: false
	default: card.rule_text_3
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: attack 1 2t dup
	show statistics: false
	default: card.attack_1
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: attack 2 2t dup
	show statistics: false
	default: card.attack_2
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: attack 3 2t dup
	show statistics: false
	default: card.attack_3
	card list allow: false
	save value: false
	editable: false
extra card style:
#########Duplicate for when non-card input
	illustrator dup:
		left: { ill_left() }
		top: { ill_top() }
		width: { ill_width() }
		height: { if contains(card.text_options_3, match: "Use Primary Set Artist") then ill_height() else 0 }
		z index: 6
		alignment: { ill_align() }
		visible: { if contains(card.text_options_3, match: "Use Primary Set Artist") then "yes" else "no" }
		font:
			name: { ill_font() }
			weight: { ill_weight() }
			style: { ill_style() }
			size: { ill_size() }
			color: { if is_two_tone() then rgba(0,0,0,0) else if is_wt_text() then rgb(255,255,255) else rgb(0,0,0) }
#########Duplicate for when non-card input
	copyright dup:
		left: { copy_left() }
		top: { copy_top() }
		width: { copy_width() }
		height: { if contains(set.visibility_options, match: "Visible Copyright on all cards") and contains(card.text_options_3, match: "Use Set Copyright") then copy_height() else 0 }
		z index: 6
		alignment: { copy_align() }
		visible: { if contains(set.visibility_options, match: "Visible Copyright on all cards") and contains(card.text_options_3, match: "Use Set Copyright") then "yes" else "no" }
		font:
			name: { copy_font() }
			size: { copy_size() }
			weight: { copy_weight() }
			style: { copy_style() }
			color: { copy_color() }
	card number 2t dup:
		left: { card_no_left() }
		top: { card_no_top() }
		width: { card_no_width() }
		height: { card_no_height() }
		z index: -16
		alignment: { card_no_align() }
		visible: { if contains(set.visibility_options, match: "Visible Card Numbers on all cards") then "yes" else "no" }
		font:
			name: { card_no_font() }
			size: { card_no_size() }
			weight: { card_no_weight() }
			style: { card_no_style() }
			color: rgb(0,0,0)
	illustrator 2t dup:
		left: { ill_left() }
		top: { ill_top() }
		width: { ill_width() }
		height: { ill_height() }
		z index: -16
		alignment: { ill_align() }
		visible: { "yes" }
		font:
			name: { ill_font() }
			weight: { ill_weight() }
			style: { ill_style() }
			size: { ill_size() }
			color: rgb(0,0,0)
	copyright 2t dup:
		left: { copy_left() }
		top: { copy_top() }
		width: { copy_width() }
		height: { copy_height() }
		z index: -16
		alignment: { copy_align() }
		visible: { if contains(set.visibility_options, match: "Visible Copyright on all cards") then "yes" else "no" }
		font:
			name: { copy_font() }
			size: { copy_size() }
			weight: { copy_weight() }
			style: { copy_style() }
			color: rgb(0,0,0)
	flavor text 2t dup:
		left: { flavor_left() }
		top: { flavor_top() }
		width: { flavor_width() }
		height: { flavor_height() }
		z index: -16
		visible: { is_two_tone() and flavor_visible() }
		alignment: { flavor_align() }
		font:
			name: { flavor_font() }
			scale down to: 6
			weight: { flavor_weight() }
			style: { flavor_style() }
			size: { flavor_size() }
			color: { rgb(0,0,0) }
		line height soft: { flavor_lh_soft() }
	rule np 1 2t dup:
		left: { rule_np_1_left() }
		top: { rule_np_1_top() }
		width: { rule_np_1_width() }
		height: { rule_np_1_height() }
		z index: -16
		visible: { is_two_tone() and rule_np_1_visible() }
		alignment: { rule_np_1_align() }
		line height hard: { rule_np_1_lh_hard() }
		line height soft: { rule_np_1_lh_soft() }
		symbol font:
			name: { two_tone_font() }
			size: { rule_np_1_symbol_size() }
			alignment: middle center
		font:
			name: { rule_np_1_font() }
			size: { rule_np_1_size() }
			weight: { rule_np_1_weight() }
			style: { rule_np_1_style() }
			scale down to: 6
			color: { rgb(0,0,0) }
	damage 1 2t dup:
		left: { damage_1_left() }
		top: { damage_1_top() }
		width: { damage_1_width() }
		height: { damage_1_height() }
		z index: -16
		visible: { is_two_tone() and damage_1_visible() }
		alignment: { damage_align() }
		font:
			name: { damage_font() }
			weight: { damage_weight() }
			style: { damage_style() }
			size: { damage_size() }
			color: { rgb(0,0,0) }
	rule text 1 2t dup:
		left: { rule_1_left() }
		top: { rule_1_top() }
		width: { rule_1_width() }
		height: { rule_1_height() }
		z index: -16
		visible: { is_two_tone() and rule_1_visible() }
		alignment: { rule_1_align() }
		line height hard: { rule_lh_hard() }
		symbol font:
			name: { two_tone_font() }
			size: { rule_symbol_size() }
		font:
			name: { rule_font() }
			weight: { rule_weight() }
			style: { rule_style() }
			size: { rule_size() }
			scale down to: 6
			color: { rgb(0,0,0) }
	damage 2 2t dup:
		left: { damage_2_left() }
		top: { damage_2_top() }
		width: { damage_2_width() }
		height: { damage_2_height() }
		z index: -16
		visible: { is_two_tone() and damage_2_visible() }
		alignment: { damage_align() }
		font:
			name: { damage_font() }
			weight: { damage_weight() }
			style: { damage_style() }
			size: { damage_size() }
			color: { rgb(0,0,0) }
	rule text 2 2t dup:
		left: { rule_2_left() }
		top: { rule_2_top() }
		width: { rule_2_width() }
		height: { rule_2_height() }
		z index: -16
		visible: { is_two_tone() and rule_2_visible() }
		alignment: { rule_2_align() }
		line height hard: { rule_lh_hard() }
		symbol font:
			name: { two_tone_font() }
			size: { rule_symbol_size() }
		font:
			name: { rule_font() }
			weight: { rule_weight() }
			style: { rule_style() }
			size: { rule_size() }
			scale down to: 6
			color: { rgb(0,0,0) }
	damage 3 2t dup:
		left: { damage_3_left() }
		top: { damage_3_top() }
		width: { damage_3_width() }
		height: { damage_3_height() }
		z index: -16
		visible: { is_two_tone() and damage_3_visible() }
		alignment: { damage_align() }
		font:
			name: { damage_font() }
			weight: { damage_weight() }
			style: { damage_style() }
			size: { damage_size() }
			color: { rgb(0,0,0) }
	rule text 3 2t dup:
		left: { rule_3_left() }
		top: { rule_3_top() }
		width: { rule_3_width() }
		height: { rule_3_height() }
		z index: -16
		visible: { is_two_tone() and rule_3_visible() }
		alignment: { rule_3_align() }
		line height hard: { rule_lh_hard() }
		symbol font:
			name: { two_tone_font() }
			size: { rule_symbol_size() }
		font:
			name: { rule_font() }
			weight: { rule_weight() }
			style: { rule_style() }
			size: { rule_size() }
			scale down to: 6
			color: { rgb(0,0,0) }
	attack 1 2t dup:
		left: { attack_1_left() }
		top: { attack_1_top() }
		width: { attack_1_width() }
		height: { attack_1_height() }
		z index: -16
		visible: { is_two_tone() and attack_1_visible() }
		alignment: { attack_align() }
		font:
			name: { attack_font() }
			weight: { attack_weight() }
			style: { attack_style() }
			size: { attack_size() }
			color: { rgb(0,0,0) }
	attack 2 2t dup:
		left: { attack_2_left() }
		top: { attack_2_top() }
		width: { attack_2_width() }
		height: { attack_2_height() }
		z index: -16
		visible: { is_two_tone() and attack_2_visible() }
		alignment: { attack_align() }
		font:
			name: { attack_font() }
			weight: { attack_weight() }
			style: { attack_style() }
			size: { attack_size() }
			color: { rgb(0,0,0) }
	attack 3 2t dup:
		left: { attack_3_left() }
		top: { attack_3_top() }
		width: { attack_3_width() }
		height: { attack_3_height() }
		z index: -16
		visible: { is_two_tone() and attack_3_visible() }
		alignment: { attack_align() }
		font:
			name: { attack_font() }
			weight: { attack_weight() }
			style: { attack_style() }
			size: { attack_size() }
			color: { rgb(0,0,0) }
############################# Duplicate text fields for all outline text (regardless of file size, values for medium and small need to be changed to 2, from x: 2/x: -2/y: 2/y: -2 to x: 2/x: -2/y: 2/y: -2)
extra card field:
	type: text
	name: card number blur 01
	show statistics: false
	default: card.card_number
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: card number blur 02
	show statistics: false
	default: card.card_number
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: card number blur 03
	show statistics: false
	default: card.card_number
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: card number blur 04
	show statistics: false
	default: card.card_number
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: illustrator blur 01
	show statistics: false
	default: ill_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: illustrator blur 02
	show statistics: false
	default: ill_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: illustrator blur 03
	show statistics: false
	default: ill_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: illustrator blur 04
	show statistics: false
	default: ill_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: copyright blur 01
	show statistics: false
	default: copy_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: copyright blur 02
	show statistics: false
	default: copy_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: copyright blur 03
	show statistics: false
	default: copy_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: copyright blur 04
	show statistics: false
	default: copy_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: weakoverlay blur 01
	show statistics: false
	default: card.weakoverlay
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: weakoverlay blur 02
	show statistics: false
	default: card.weakoverlay
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: weakoverlay blur 03
	show statistics: false
	default: card.weakoverlay
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: weakoverlay blur 04
	show statistics: false
	default: card.weakoverlay
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: resoverlay blur 01
	show statistics: false
	default: card.resoverlay
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: resoverlay blur 02
	show statistics: false
	default: card.resoverlay
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: resoverlay blur 03
	show statistics: false
	default: card.resoverlay
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: resoverlay blur 04
	show statistics: false
	default: card.resoverlay
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: retoverlay blur 01
	show statistics: false
	default: card.retoverlay
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: retoverlay blur 02
	show statistics: false
	default: card.retoverlay
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: retoverlay blur 03
	show statistics: false
	default: card.retoverlay
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: retoverlay blur 04
	show statistics: false
	default: card.retoverlay
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: card name blur 01
	show statistics: false
	default: card.card_name
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: card name blur 02
	show statistics: false
	default: card.card_name
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: card name blur 03
	show statistics: false
	default: card.card_name
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: card name blur 04
	show statistics: false
	default: card.card_name
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: hp blur 01
	show statistics: false
	default: card.hp
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: hp blur 02
	show statistics: false
	default: card.hp
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: hp blur 03
	show statistics: false
	default: card.hp
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: hp blur 04
	show statistics: false
	default: card.hp
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: weakness blur 01
	show statistics: false
	default: card.weakness
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: weakness blur 02
	show statistics: false
	default: card.weakness
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: weakness blur 03
	show statistics: false
	default: card.weakness
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: weakness blur 04
	show statistics: false
	default: card.weakness
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: resistance blur 01
	show statistics: false
	default: card.resistance
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: resistance blur 02
	show statistics: false
	default: card.resistance
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: resistance blur 03
	show statistics: false
	default: card.resistance
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: resistance blur 04
	show statistics: false
	default: card.resistance
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: flavor text blur 01
	show statistics: false
	default: card.flavor_text
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: flavor text blur 02
	show statistics: false
	default: card.flavor_text
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: flavor text blur 03
	show statistics: false
	default: card.flavor_text
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: flavor text blur 04
	show statistics: false
	default: card.flavor_text
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: evolution 1 blur 01
	show statistics: false
	default: evolution_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: evolution 1 blur 02
	show statistics: false
	default: evolution_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: evolution 1 blur 03
	show statistics: false
	default: evolution_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: evolution 1 blur 04
	show statistics: false
	default: evolution_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: evolution entry blur 01
	show statistics: false
	default: card.evolution_entry
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: evolution entry blur 02
	show statistics: false
	default: card.evolution_entry
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: evolution entry blur 03
	show statistics: false
	default: card.evolution_entry
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: evolution entry blur 04
	show statistics: false
	default: card.evolution_entry
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: stuff blur 01
	show statistics: false
	default: reverse(set_filter("Extra Special Monster"))
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: title 1 blur 01
	show statistics: false
	default: title_1_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: title 1 blur 02
	show statistics: false
	default: title_1_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: title 1 blur 03
	show statistics: false
	default: title_1_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: title 1 blur 04
	show statistics: false
	default: title_1_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: title 2 blur 01
	show statistics: false
	default: title_2_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: title 2 blur 02
	show statistics: false
	default: title_2_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: title 2 blur 03
	show statistics: false
	default: title_2_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: title 2 blur 04
	show statistics: false
	default: title_2_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: ability 1 blur 01
	show statistics: false
	default: ability_1_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: ability 1 blur 02
	show statistics: false
	default: ability_1_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: ability 1 blur 03
	show statistics: false
	default: ability_1_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: ability 1 blur 04
	show statistics: false
	default: ability_1_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: special rule 1 blur 01
	show statistics: false
	default: special_rule_outline_separator()
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: special rule 1 blur 02
	show statistics: false
	default: special_rule_outline_separator()
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: special rule 1 blur 03
	show statistics: false
	default: special_rule_outline_separator()
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: special rule 1 blur 04
	show statistics: false
	default: special_rule_outline_separator()
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: rule np 1 blur 01
	show statistics: false
	default: card.rule_np_1
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: rule np 1 blur 02
	show statistics: false
	default: card.rule_np_1
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: rule np 1 blur 03
	show statistics: false
	default: card.rule_np_1
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: rule np 1 blur 04
	show statistics: false
	default: card.rule_np_1
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: damage 1 blur 01
	show statistics: false
	default: card.damage_1
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: damage 1 blur 02
	show statistics: false
	default: card.damage_1
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: damage 1 blur 03
	show statistics: false
	default: card.damage_1
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: damage 1 blur 04
	show statistics: false
	default: card.damage_1
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: rule text 1 blur 01
	show statistics: false
	default: card.rule_text_1
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: rule text 1 blur 02
	show statistics: false
	default: card.rule_text_1
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: rule text 1 blur 03
	show statistics: false
	default: card.rule_text_1
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: rule text 1 blur 04
	show statistics: false
	default: card.rule_text_1
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: damage 2 blur 01
	show statistics: false
	default: card.damage_2
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: damage 2 blur 02
	show statistics: false
	default: card.damage_2
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: damage 2 blur 03
	show statistics: false
	default: card.damage_2
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: damage 2 blur 04
	show statistics: false
	default: card.damage_2
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: rule text 2 blur 01
	show statistics: false
	default: card.rule_text_2
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: rule text 2 blur 02
	show statistics: false
	default: card.rule_text_2
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: rule text 2 blur 03
	show statistics: false
	default: card.rule_text_2
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: rule text 2 blur 04
	show statistics: false
	default: card.rule_text_2
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: damage 3 blur 01
	show statistics: false
	default: card.damage_3
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: damage 3 blur 02
	show statistics: false
	default: card.damage_3
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: damage 3 blur 03
	show statistics: false
	default: card.damage_3
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: damage 3 blur 04
	show statistics: false
	default: card.damage_3
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: rule text 3 blur 01
	show statistics: false
	default: card.rule_text_3
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: rule text 3 blur 02
	show statistics: false
	default: card.rule_text_3
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: rule text 3 blur 03
	show statistics: false
	default: card.rule_text_3
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: rule text 3 blur 04
	show statistics: false
	default: card.rule_text_3
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: attack 1 blur 01
	show statistics: false
	default: card.attack_1
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: attack 1 blur 02
	show statistics: false
	default: card.attack_1
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: attack 1 blur 03
	show statistics: false
	default: card.attack_1
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: attack 1 blur 04
	show statistics: false
	default: card.attack_1
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: attack 2 blur 01
	show statistics: false
	default: card.attack_2
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: attack 2 blur 02
	show statistics: false
	default: card.attack_2
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: attack 2 blur 03
	show statistics: false
	default: card.attack_2
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: attack 2 blur 04
	show statistics: false
	default: card.attack_2
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: attack 3 blur 01
	show statistics: false
	default: card.attack_3
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: attack 3 blur 02
	show statistics: false
	default: card.attack_3
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: attack 3 blur 03
	show statistics: false
	default: card.attack_3
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: attack 3 blur 04
	show statistics: false
	default: card.attack_3
	card list allow: false
	save value: false
	editable: false
extra card style:
	card number blur 01:
		left: { card_no_left() }
		top: { card_no_top() }
		width: { card_no_width() }
		height: { card_no_height() }
		z index: 5
		alignment: { card_no_align() }
		visible: { card_no_outline_blur() }
		font:
			name: { card_no_font() }
			size: { card_no_size() }
			weight: { card_no_weight() }
			style: { card_no_style() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	card number blur 02:
		left: { card_no_left() }
		top: { card_no_top() }
		width: { card_no_width() }
		height: { card_no_height() }
		z index: 5
		alignment: { card_no_align() }
		visible: { card_no_outline_blur() }
		font:
			name: { card_no_font() }
			size: { card_no_size() }
			weight: { card_no_weight() }
			style: { card_no_style() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	card number blur 03:
		left: { card_no_left() }
		top: { card_no_top() }
		width: { card_no_width() }
		height: { card_no_height() }
		z index: 5
		alignment: { card_no_align() }
		visible: { card_no_outline_blur() }
		font:
			name: { card_no_font() }
			size: { card_no_size() }
			weight: { card_no_weight() }
			style: { card_no_style() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	card number blur 04:
		left: { card_no_left() }
		top: { card_no_top() }
		width: { card_no_width() }
		height: { card_no_height() }
		z index: 5
		alignment: { card_no_align() }
		visible: { card_no_outline_blur() }
		font:
			name: { card_no_font() }
			size: { card_no_size() }
			weight: { card_no_weight() }
			style: { card_no_style() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	illustrator blur 01:
		left: { ill_left() }
		top: { ill_top() }
		width: { ill_width() }
		height: { ill_height() }
		z index: 5
		alignment: { ill_align() }
		visible: { ill_outline_blur() }
		font:
			name: { ill_font() }
			weight: { ill_weight() }
			style: { ill_style() }
			size: { ill_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	illustrator blur 02:
		left: { ill_left() }
		top: { ill_top() }
		width: { ill_width() }
		height: { ill_height() }
		z index: 5
		alignment: { ill_align() }
		visible: { ill_outline_blur() }
		font:
			name: { ill_font() }
			weight: { ill_weight() }
			style: { ill_style() }
			size: { ill_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	illustrator blur 03:
		left: { ill_left() }
		top: { ill_top() }
		width: { ill_width() }
		height: { ill_height() }
		z index: 5
		alignment: { ill_align() }
		visible: { ill_outline_blur() }
		font:
			name: { ill_font() }
			weight: { ill_weight() }
			style: { ill_style() }
			size: { ill_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	illustrator blur 04:
		left: { ill_left() }
		top: { ill_top() }
		width: { ill_width() }
		height: { ill_height() }
		z index: 5
		alignment: { ill_align() }
		visible: { ill_outline_blur() }
		font:
			name: { ill_font() }
			weight: { ill_weight() }
			style: { ill_style() }
			size: { ill_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	copyright blur 01:
		left: { copy_left() }
		top: { copy_top() }
		width: { copy_width() }
		height: { copy_height() }
		z index: 5
		alignment: { copy_align() }
		visible: { copy_outline_blur() }
		font:
			name: { copy_font() }
			size: { copy_size() }
			weight: { copy_weight() }
			style: { copy_style() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	copyright blur 02:
		left: { copy_left() }
		top: { copy_top() }
		width: { copy_width() }
		height: { copy_height() }
		z index: 5
		alignment: { copy_align() }
		visible: { copy_outline_blur() }
		font:
			name: { copy_font() }
			size: { copy_size() }
			weight: { copy_weight() }
			style: { copy_style() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	copyright blur 03:
		left: { copy_left() }
		top: { copy_top() }
		width: { copy_width() }
		height: { copy_height() }
		z index: 5
		alignment: { copy_align() }
		visible: { copy_outline_blur() }
		font:
			name: { copy_font() }
			size: { copy_size() }
			weight: { copy_weight() }
			style: { copy_style() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	copyright blur 04:
		left: { copy_left() }
		top: { copy_top() }
		width: { copy_width() }
		height: { copy_height() }
		z index: 5
		alignment: { copy_align() }
		visible: { copy_outline_blur() }
		font:
			name: { copy_font() }
			size: { copy_size() }
			weight: { copy_weight() }
			style: { copy_style() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	weakoverlay blur 01:
		left: { weak_ov_left() }
		top: { weak_ov_top() }
		width: { weak_ov_width() }
		height: { weak_ov_height() }
		z index: 5
		visible: { wrr_ov_outline_blur() }
		alignment: { wrr_ov_align() }
		font:
			name: { wrr_ov_font() }
			weight: { wrr_ov_weight() }
			style: { wrr_ov_style() }
			size: { wrr_ov_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	weakoverlay blur 02:
		left: { weak_ov_left() }
		top: { weak_ov_top() }
		width: { weak_ov_width() }
		height: { weak_ov_height() }
		z index: 5
		visible: { wrr_ov_outline_blur() }
		alignment: { wrr_ov_align() }
		font:
			name: { wrr_ov_font() }
			weight: { wrr_ov_weight() }
			style: { wrr_ov_style() }
			size: { wrr_ov_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	weakoverlay blur 03:
		left: { weak_ov_left() }
		top: { weak_ov_top() }
		width: { weak_ov_width() }
		height: { weak_ov_height() }
		z index: 5
		visible: { wrr_ov_outline_blur() }
		alignment: { wrr_ov_align() }
		font:
			name: { wrr_ov_font() }
			weight: { wrr_ov_weight() }
			style: { wrr_ov_style() }
			size: { wrr_ov_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	weakoverlay blur 04:
		left: { weak_ov_left() }
		top: { weak_ov_top() }
		width: { weak_ov_width() }
		height: { weak_ov_height() }
		z index: 5
		visible: { wrr_ov_outline_blur() }
		alignment: { wrr_ov_align() }
		font:
			name: { wrr_ov_font() }
			weight: { wrr_ov_weight() }
			style: { wrr_ov_style() }
			size: { wrr_ov_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	resoverlay blur 01:
		left: { res_ov_left() }
		top: { res_ov_top() }
		width: { res_ov_width() }
		height: { res_ov_height() }
		z index: 5
		visible: { wrr_ov_outline_blur() }
		alignment: { wrr_ov_align() }
		font:
			name: { wrr_ov_font() }
			weight: { wrr_ov_weight() }
			style: { wrr_ov_style() }
			size: { wrr_ov_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	resoverlay blur 02:
		left: { res_ov_left() }
		top: { res_ov_top() }
		width: { res_ov_width() }
		height: { res_ov_height() }
		z index: 5
		visible: { wrr_ov_outline_blur() }
		alignment: { wrr_ov_align() }
		font:
			name: { wrr_ov_font() }
			weight: { wrr_ov_weight() }
			style: { wrr_ov_style() }
			size: { wrr_ov_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	resoverlay blur 03:
		left: { res_ov_left() }
		top: { res_ov_top() }
		width: { res_ov_width() }
		height: { res_ov_height() }
		z index: 5
		visible: { wrr_ov_outline_blur() }
		alignment: { wrr_ov_align() }
		font:
			name: { wrr_ov_font() }
			weight: { wrr_ov_weight() }
			style: { wrr_ov_style() }
			size: { wrr_ov_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	resoverlay blur 04:
		left: { res_ov_left() }
		top: { res_ov_top() }
		width: { res_ov_width() }
		height: { res_ov_height() }
		z index: 5
		visible: { wrr_ov_outline_blur() }
		alignment: { wrr_ov_align() }
		font:
			name: { wrr_ov_font() }
			weight: { wrr_ov_weight() }
			style: { wrr_ov_style() }
			size: { wrr_ov_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	retoverlay blur 01:
		left: { ret_ov_left() }
		top: { ret_ov_top() }
		width: { ret_ov_width() }
		height: { ret_ov_height() }
		z index: 5
		visible: { wrr_ov_outline_blur() }
		alignment: { wrr_ov_align() }
		font:
			name: { wrr_ov_font() }
			weight: { wrr_ov_weight() }
			style: { wrr_ov_style() }
			size: { wrr_ov_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	retoverlay blur 02:
		left: { ret_ov_left() }
		top: { ret_ov_top() }
		width: { ret_ov_width() }
		height: { ret_ov_height() }
		z index: 5
		visible: { wrr_ov_outline_blur() }
		alignment: { wrr_ov_align() }
		font:
			name: { wrr_ov_font() }
			weight: { wrr_ov_weight() }
			style: { wrr_ov_style() }
			size: { wrr_ov_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	retoverlay blur 03:
		left: { ret_ov_left() }
		top: { ret_ov_top() }
		width: { ret_ov_width() }
		height: { ret_ov_height() }
		z index: 5
		visible: { wrr_ov_outline_blur() }
		alignment: { wrr_ov_align() }
		font:
			name: { wrr_ov_font() }
			weight: { wrr_ov_weight() }
			style: { wrr_ov_style() }
			size: { wrr_ov_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	retoverlay blur 04:
		left: { ret_ov_left() }
		top: { ret_ov_top() }
		width: { ret_ov_width() }
		height: { ret_ov_height() }
		z index: 5
		visible: { wrr_ov_outline_blur() }
		alignment: { wrr_ov_align() }
		font:
			name: { wrr_ov_font() }
			weight: { wrr_ov_weight() }
			style: { wrr_ov_style() }
			size: { wrr_ov_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	card name blur 01:
		left: { card_name_left() }
		top: { card_name_top() }
		width: { card_name_width() }
		height: { card_name_height() }
		visible: { card_name_outline_blur() }
		z index: 5
		alignment: { card_name_align() }
		symbol font:
			name: { card_name_symbol_font() }
			size: { card_name_symbol_size() }
		font:
			name: { card_name_font() }
			weight: { card_name_weight() }
			style: { card_name_style() }
			size: { card_name_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	card name blur 02:
		left: { card_name_left() }
		top: { card_name_top() }
		width: { card_name_width() }
		height: { card_name_height() }
		visible: { card_name_outline_blur() }
		z index: 5
		alignment: { card_name_align() }
		symbol font:
			name: { card_name_symbol_font() }
			size: { card_name_symbol_size() }
		font:
			name: { card_name_font() }
			weight: { card_name_weight() }
			style: { card_name_style() }
			size: { card_name_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	card name blur 03:
		left: { card_name_left() }
		top: { card_name_top() }
		width: { card_name_width() }
		height: { card_name_height() }
		visible: { card_name_outline_blur() }
		z index: 5
		alignment: { card_name_align() }
		symbol font:
			name: { card_name_symbol_font() }
			size: { card_name_symbol_size() }
		font:
			name: { card_name_font() }
			weight: { card_name_weight() }
			style: { card_name_style() }
			size: { card_name_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	card name blur 04:
		left: { card_name_left() }
		top: { card_name_top() }
		width: { card_name_width() }
		height: { card_name_height() }
		visible: { card_name_outline_blur() }
		z index: 5
		alignment: { card_name_align() }
		symbol font:
			name: { card_name_symbol_font() }
			size: { card_name_symbol_size() }
		font:
			name: { card_name_font() }
			weight: { card_name_weight() }
			style: { card_name_style() }
			size: { card_name_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	stuff blur 01:
		left: { x_left(322) }
		top: { y_top(496) }
		width: { fun_expand_size(33) }
		height: { fun_expand_size(14) }
		z index: 10
		font:
			name: "GillSansCdn"
			size: { fun_expand_font(if contains(card.general_options_09, match: "GX Pokemon") then 7 else 12) }
			weight: "bold"
			color
				script: if contains(card.general_options_09, match: "Secret Rare (Gold)")
						then if is_pokemon() and contains(card.general_options_09, match: "GX Pokemon") then rgb(150,78,20)
						else rgb(101,70,39)
					else if contains(card.general_options_09, match: "Secret Rare (Rainbow)")
						then if is_pokemon() and contains(card.general_options_09, match: "GX Pokemon") then rgb(247,126,101)
						else rgb(247,125,101)
					else if contains(card.general_options_09, match: "Prism Star Card")
						then if is_pokemon() and contains(card.general_options_09, match: "GX Pokemon") then rgb(56,56,56)
						else rgb(26,26,26)
					else if is_pokemon() and contains(card.general_options_09, match: "GX Pokemon") then rgb(56,56,56)
					else if is_trainer() and contains(card.art_options, match: "Full Art") then rgb(173,176,181)
					else rgb(191,186,47)
	hp blur 01:
		left: { hp_left() }
		top: { hp_top() }
		width: { hp_width() }
		height: { hp_height() }
		z index: 5
		alignment: { hp_align() }
		visible: { hp_outline_blur() }
		font:
			name: { hp_font() }
			weight: { hp_weight() }
			style: { hp_style() }
			size: { hp_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	hp blur 02:
		left: { hp_left() }
		top: { hp_top() }
		width: { hp_width() }
		height: { hp_height() }
		z index: 5
		alignment: { hp_align() }
		visible: { hp_outline_blur() }
		font:
			name: { hp_font() }
			weight: { hp_weight() }
			style: { hp_style() }
			size: { hp_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	hp blur 03:
		left: { hp_left() }
		top: { hp_top() }
		width: { hp_width() }
		height: { hp_height() }
		z index: 5
		alignment: { hp_align() }
		visible: { hp_outline_blur() }
		font:
			name: { hp_font() }
			weight: { hp_weight() }
			style: { hp_style() }
			size: { hp_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	hp blur 04:
		left: { hp_left() }
		top: { hp_top() }
		width: { hp_width() }
		height: { hp_height() }
		z index: 5
		alignment: { hp_align() }
		visible: { hp_outline_blur() }
		font:
			name: { hp_font() }
			weight: { hp_weight() }
			style: { hp_style() }
			size: { hp_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	weakness blur 01:
		left: { weak_left() }
		top: { weak_top() }
		width: { weak_width() }
		height: { weak_height() }
		z index: 5
		always symbol: true
		visible: { weak_outline_blur() }
		alignment: { weak_align() }
		symbol font:
			name: { weak_symbol_font() }
			size: { weak_symbol_size() }
		font:
			name: { weak_font() }
			size: { weak_size() }
			weight: { weak_weight() }
			style: { weak_style() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	weakness blur 02:
		left: { weak_left() }
		top: { weak_top() }
		width: { weak_width() }
		height: { weak_height() }
		z index: 5
		always symbol: true
		visible: { weak_outline_blur() }
		alignment: { weak_align() }
		symbol font:
			name: { weak_symbol_font() }
			size: { weak_symbol_size() }
		font:
			name: { weak_font() }
			size: { weak_size() }
			weight: { weak_weight() }
			style: { weak_style() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	weakness blur 03:
		left: { weak_left() }
		top: { weak_top() }
		width: { weak_width() }
		height: { weak_height() }
		z index: 5
		always symbol: true
		visible: { weak_outline_blur() }
		alignment: { weak_align() }
		symbol font:
			name: { weak_symbol_font() }
			size: { weak_symbol_size() }
		font:
			name: { weak_font() }
			size: { weak_size() }
			weight: { weak_weight() }
			style: { weak_style() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	weakness blur 04:
		left: { weak_left() }
		top: { weak_top() }
		width: { weak_width() }
		height: { weak_height() }
		z index: 5
		always symbol: true
		visible: { weak_outline_blur() }
		alignment: { weak_align() }
		symbol font:
			name: { weak_symbol_font() }
			size: { weak_symbol_size() }
		font:
			name: { weak_font() }
			size: { weak_size() }
			weight: { weak_weight() }
			style: { weak_style() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	resistance blur 01:
		left: { resist_left() }
		top: { resist_top() }
		width: { resist_width() }
		height: { resist_height() }
		z index: 5
		always symbol: true
		visible: { resist_outline_blur() }
		alignment: { resist_align() }
		symbol font:
			name: { resist_symbol_font() }
			size: { resist_symbol_size() }
		font:
			name: { resist_font() }
			size: { resist_size() }
			weight: { resist_weight() }
			style: { resist_style() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	resistance blur 02:
		left: { resist_left() }
		top: { resist_top() }
		width: { resist_width() }
		height: { resist_height() }
		z index: 5
		always symbol: true
		visible: { resist_outline_blur() }
		alignment: { resist_align() }
		symbol font:
			name: { resist_symbol_font() }
			size: { resist_symbol_size() }
		font:
			name: { resist_font() }
			size: { resist_size() }
			weight: { resist_weight() }
			style: { resist_style() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	resistance blur 03:
		left: { resist_left() }
		top: { resist_top() }
		width: { resist_width() }
		height: { resist_height() }
		z index: 5
		always symbol: true
		visible: { resist_outline_blur() }
		alignment: { resist_align() }
		symbol font:
			name: { resist_symbol_font() }
			size: { resist_symbol_size() }
		font:
			name: { resist_font() }
			size: { resist_size() }
			weight: { resist_weight() }
			style: { resist_style() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	resistance blur 04:
		left: { resist_left() }
		top: { resist_top() }
		width: { resist_width() }
		height: { resist_height() }
		z index: 5
		always symbol: true
		visible: { resist_outline_blur() }
		alignment: { resist_align() }
		symbol font:
			name: { resist_symbol_font() }
			size: { resist_symbol_size() }
		font:
			name: { resist_font() }
			size: { resist_size() }
			weight: { resist_weight() }
			style: { resist_style() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	flavor text blur 01:
		left: { flavor_left() }
		top: { flavor_top() }
		width: { flavor_width() }
		height: { flavor_height() }
		z index: 5
		visible: { flavor_outline_blur() }
		alignment: { flavor_align() }
		line height soft: { flavor_lh_soft() }
		font:
			name: { flavor_font() }
			scale down to: 6
			weight: { flavor_weight() }
			style: { flavor_style() }
			size: { flavor_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	flavor text blur 02:
		left: { flavor_left() }
		top: { flavor_top() }
		width: { flavor_width() }
		height: { flavor_height() }
		z index: 5
		visible: { flavor_outline_blur() }
		alignment: { flavor_align() }
		line height soft: { flavor_lh_soft() }
		font:
			name: { flavor_font() }
			scale down to: 6
			weight: { flavor_weight() }
			style: { flavor_style() }
			size: { flavor_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	flavor text blur 03:
		left: { flavor_left() }
		top: { flavor_top() }
		width: { flavor_width() }
		height: { flavor_height() }
		z index: 5
		visible: { flavor_outline_blur() }
		alignment: { flavor_align() }
		line height soft: { flavor_lh_soft() }
		font:
			name: { flavor_font() }
			scale down to: 6
			weight: { flavor_weight() }
			style: { flavor_style() }
			size: { flavor_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	flavor text blur 04:
		left: { flavor_left() }
		top: { flavor_top() }
		width: { flavor_width() }
		height: { flavor_height() }
		z index: 5
		visible: { flavor_outline_blur() }
		alignment: { flavor_align() }
		line height soft: { flavor_lh_soft() }
		font:
			name: { flavor_font() }
			scale down to: 6
			weight: { flavor_weight() }
			style: { flavor_style() }
			size: { flavor_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	evolution 1 blur 01:
		left: { evolution_left() }
		top: { evolution_top() }
		width: { evolution_width() }
		height: { evolution_height() }
		alignment: { evolution_align() }
		z index: 5
		visible: { evolution_outline_blur() }
		font:
			name: { evolution_font() }
			weight: { evolution_weight() }
			style: { evolution_style() }
			size: { evolution_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	evolution 1 blur 02:
		left: { evolution_left() }
		top: { evolution_top() }
		width: { evolution_width() }
		height: { evolution_height() }
		alignment: { evolution_align() }
		z index: 5
		visible: { evolution_outline_blur() }
		font:
			name: { evolution_font() }
			weight: { evolution_weight() }
			style: { evolution_style() }
			size: { evolution_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	evolution 1 blur 03:
		left: { evolution_left() }
		top: { evolution_top() }
		width: { evolution_width() }
		height: { evolution_height() }
		alignment: { evolution_align() }
		z index: 5
		visible: { evolution_outline_blur() }
		font:
			name: { evolution_font() }
			weight: { evolution_weight() }
			style: { evolution_style() }
			size: { evolution_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	evolution 1 blur 04:
		left: { evolution_left() }
		top: { evolution_top() }
		width: { evolution_width() }
		height: { evolution_height() }
		alignment: { evolution_align() }
		z index: 5
		visible: { evolution_outline_blur() }
		font:
			name: { evolution_font() }
			weight: { evolution_weight() }
			style: { evolution_style() }
			size: { evolution_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	evolution entry blur 01:
		left: { evo_left() }
		top: { evolution_top() }
		width: { evo_width() }
		height: { evo_height() }
		alignment: { evolution_align() }
		z index: 5
		visible: { evo_outline_blur() }
		font:
			name: { evolution_font() }
			weight: { evolution_weight() }
			style: { evolution_style() }
			size: { evolution_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	evolution entry blur 02:
		left: { evo_left() }
		top: { evolution_top() }
		width: { evo_width() }
		height: { evo_height() }
		alignment: { evolution_align() }
		z index: 5
		visible: { evo_outline_blur() }
		font:
			name: { evolution_font() }
			weight: { evolution_weight() }
			style: { evolution_style() }
			size: { evolution_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	evolution entry blur 03:
		left: { evo_left() }
		top: { evolution_top() }
		width: { evo_width() }
		height: { evo_height() }
		alignment: { evolution_align() }
		z index: 5
		visible: { evo_outline_blur() }
		font:
			name: { evolution_font() }
			weight: { evolution_weight() }
			style: { evolution_style() }
			size: { evolution_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	evolution entry blur 04:
		left: { evo_left() }
		top: { evolution_top() }
		width: { evo_width() }
		height: { evo_height() }
		alignment: { evolution_align() }
		z index: 5
		visible: { evo_outline_blur() }
		font:
			name: { evolution_font() }
			weight: { evolution_weight() }
			style: { evolution_style() }
			size: { evolution_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	title 1 blur 01:
		left: { title_1_left() }
		top: { title_1_top() }
		width: { title_1_width() }
		height: { title_1_height() }
		z index: 5
		visible: { title_1_outline_blur() }
		alignment: { title_1_align() }
		font:
			name: { title_1_font() }
			weight: { title_1_weight() }
			style: { title_1_style() }
			size: { title_1_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	title 1 blur 02:
		left: { title_1_left() }
		top: { title_1_top() }
		width: { title_1_width() }
		height: { title_1_height() }
		z index: 5
		visible: { title_1_outline_blur() }
		alignment: { title_1_align() }
		font:
			name: { title_1_font() }
			weight: { title_1_weight() }
			style: { title_1_style() }
			size: { title_1_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	title 1 blur 03:
		left: { title_1_left() }
		top: { title_1_top() }
		width: { title_1_width() }
		height: { title_1_height() }
		z index: 5
		visible: { title_1_outline_blur() }
		alignment: { title_1_align() }
		font:
			name: { title_1_font() }
			weight: { title_1_weight() }
			style: { title_1_style() }
			size: { title_1_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	title 1 blur 04:
		left: { title_1_left() }
		top: { title_1_top() }
		width: { title_1_width() }
		height: { title_1_height() }
		z index: 5
		visible: { title_1_outline_blur() }
		alignment: { title_1_align() }
		font:
			name: { title_1_font() }
			weight: { title_1_weight() }
			style: { title_1_style() }
			size: { title_1_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	title 2 blur 01:
		left: { title_2_left() }
		top: { title_2_top() }
		width: { title_2_width() }
		height: { title_2_height() }
		z index: 5
		visible: { title_2_outline_blur() }
		alignment: { title_2_align() }
		font:
			name: { title_2_font() }
			weight: { title_2_weight() }
			style: { title_2_style() }
			size: { title_2_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	title 2 blur 02:
		left: { title_2_left() }
		top: { title_2_top() }
		width: { title_2_width() }
		height: { title_2_height() }
		z index: 5
		visible: { title_2_outline_blur() }
		alignment: { title_2_align() }
		font:
			name: { title_2_font() }
			weight: { title_2_weight() }
			style: { title_2_style() }
			size: { title_2_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	title 2 blur 03:
		left: { title_2_left() }
		top: { title_2_top() }
		width: { title_2_width() }
		height: { title_2_height() }
		z index: 5
		visible: { title_2_outline_blur() }
		alignment: { title_2_align() }
		font:
			name: { title_2_font() }
			weight: { title_2_weight() }
			style: { title_2_style() }
			size: { title_2_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	title 2 blur 04:
		left: { title_2_left() }
		top: { title_2_top() }
		width: { title_2_width() }
		height: { title_2_height() }
		z index: 5
		visible: { title_2_outline_blur() }
		alignment: { title_2_align() }
		font:
			name: { title_2_font() }
			weight: { title_2_weight() }
			style: { title_2_style() }
			size: { title_2_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	special rule 1 blur 01:
		left: { special_rule_left() }
		top: { special_rule_top() }
		width: { special_rule_width() }
		height: { special_rule_height() }
		z index: 5
		visible: { special_rule_outline_blur() }
		alignment: { special_rule_align() }
		line height soft: { special_rule_lh_soft() }
		mask: { special_rule_mask() }
		font:
			name: { special_rule_font() }
			weight: { special_rule_weight() }
			scale down to: 6
			style: { special_rule_style() }
			size: { special_rule_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	special rule 1 blur 02:
		left: { special_rule_left() }
		top: { special_rule_top() }
		width: { special_rule_width() }
		height: { special_rule_height() }
		z index: 5
		visible: { special_rule_outline_blur() }
		alignment: { special_rule_align() }
		line height soft: { special_rule_lh_soft() }
		mask: { special_rule_mask() }
		font:
			name: { special_rule_font() }
			scale down to: 6
			weight: { special_rule_weight() }
			style: { special_rule_style() }
			size: { special_rule_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	special rule 1 blur 03:
		left: { special_rule_left() }
		top: { special_rule_top() }
		width: { special_rule_width() }
		height: { special_rule_height() }
		z index: 5
		visible: { special_rule_outline_blur() }
		alignment: { special_rule_align() }
		line height soft: { special_rule_lh_soft() }
		mask: { special_rule_mask() }
		font:
			name: { special_rule_font() }
			scale down to: 6
			weight: { special_rule_weight() }
			style: { special_rule_style() }
			size: { special_rule_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	special rule 1 blur 04:
		left: { special_rule_left() }
		top: { special_rule_top() }
		width: { special_rule_width() }
		height: { special_rule_height() }
		z index: 5
		visible: { special_rule_outline_blur() }
		alignment: { special_rule_align() }
		line height soft: { special_rule_lh_soft() }
		mask: { special_rule_mask() }
		font:
			name: { special_rule_font() }
			scale down to: 6
			weight: { special_rule_weight() }
			style: { special_rule_style() }
			size: { special_rule_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	ability 1 blur 01:
		left: { ability_1_left() }
		top: { ability_1_top() }
		width: { ability_1_width() }
		height: { ability_1_height() }
		alignment: { ability_1_align() }
		z index: 5
		visible: { ability_1_outline_blur() }
		font:
			name: { ability_1_font() }
			weight: { ability_1_weight() }
			style: { ability_1_style() }
			size: { ability_1_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	ability 1 blur 02:
		left: { ability_1_left() }
		top: { ability_1_top() }
		width: { ability_1_width() }
		height: { ability_1_height() }
		alignment: { ability_1_align() }
		z index: 5
		visible: { ability_1_outline_blur() }
		font:
			name: { ability_1_font() }
			weight: { ability_1_weight() }
			style: { ability_1_style() }
			size: { ability_1_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	ability 1 blur 03:
		left: { ability_1_left() }
		top: { ability_1_top() }
		width: { ability_1_width() }
		height: { ability_1_height() }
		alignment: { ability_1_align() }
		z index: 5
		visible: { ability_1_outline_blur() }
		font:
			name: { ability_1_font() }
			weight: { ability_1_weight() }
			style: { ability_1_style() }
			size: { ability_1_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	ability 1 blur 04:
		left: { ability_1_left() }
		top: { ability_1_top() }
		width: { ability_1_width() }
		height: { ability_1_height() }
		alignment: { ability_1_align() }
		z index: 5
		visible: { ability_1_outline_blur() }
		font:
			name: { ability_1_font() }
			weight: { ability_1_weight() }
			style: { ability_1_style() }
			size: { ability_1_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	rule np 1 blur 01:
		left: { rule_np_1_left() }
		top: { rule_np_1_top() }
		width: { rule_np_1_width() }
		height: { rule_np_1_height() }
		z index: 5
		visible: { rule_np_1_outline_blur() }
		alignment: { rule_np_1_align() }
		line height hard: { rule_np_1_lh_hard() }
		line height soft: { rule_np_1_lh_soft() }
		symbol font:
			name: { rule_np_1_symbol_font() }
			size: { rule_np_1_symbol_size() }
			alignment: middle center
		font:
			name: { rule_np_1_font() }
			size: { rule_np_1_size() }
			weight: { rule_np_1_weight() }
			style: { rule_np_1_style() }
			scale down to: 6
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	rule np 1 blur 02:
		left: { rule_np_1_left() }
		top: { rule_np_1_top() }
		width: { rule_np_1_width() }
		height: { rule_np_1_height() }
		z index: 5
		visible: { rule_np_1_outline_blur() }
		alignment: { rule_np_1_align() }
		line height hard: { rule_np_1_lh_hard() }
		line height soft: { rule_np_1_lh_soft() }
		symbol font:
			name: { rule_np_1_symbol_font() }
			size: { rule_np_1_symbol_size() }
			alignment: middle center
		font:
			name: { rule_np_1_font() }
			size: { rule_np_1_size() }
			weight: { rule_np_1_weight() }
			style: { rule_np_1_style() }
			scale down to: 6
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	rule np 1 blur 03:
		left: { rule_np_1_left() }
		top: { rule_np_1_top() }
		width: { rule_np_1_width() }
		height: { rule_np_1_height() }
		z index: 5
		visible: { rule_np_1_outline_blur() }
		alignment: { rule_np_1_align() }
		line height hard: { rule_np_1_lh_hard() }
		line height soft: { rule_np_1_lh_soft() }
		symbol font:
			name: { rule_np_1_symbol_font() }
			size: { rule_np_1_symbol_size() }
			alignment: middle center
		font:
			name: { rule_np_1_font() }
			size: { rule_np_1_size() }
			weight: { rule_np_1_weight() }
			style: { rule_np_1_style() }
			scale down to: 6
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	rule np 1 blur 04:
		left: { rule_np_1_left() }
		top: { rule_np_1_top() }
		width: { rule_np_1_width() }
		height: { rule_np_1_height() }
		z index: 5
		visible: { rule_np_1_outline_blur() }
		alignment: { rule_np_1_align() }
		line height hard: { rule_np_1_lh_hard() }
		line height soft: { rule_np_1_lh_soft() }
		symbol font:
			name: { rule_np_1_symbol_font() }
			size: { rule_np_1_symbol_size() }
			alignment: middle center
		font:
			name: { rule_np_1_font() }
			size: { rule_np_1_size() }
			weight: { rule_np_1_weight() }
			style: { rule_np_1_style() }
			scale down to: 6
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	damage 1 blur 01:
		left: { damage_1_left() }
		top: { damage_1_top() }
		width: { damage_1_width() }
		height: { damage_1_height() }
		z index: 5
		visible: { damage_1_outline_blur() }
		alignment: { damage_align() }
		font:
			name: { damage_font() }
			weight: { damage_weight() }
			style: { damage_style() }
			size: { damage_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	damage 1 blur 02:
		left: { damage_1_left() }
		top: { damage_1_top() }
		width: { damage_1_width() }
		height: { damage_1_height() }
		z index: 5
		visible: { damage_1_outline_blur() }
		alignment: { damage_align() }
		font:
			name: { damage_font() }
			weight: { damage_weight() }
			style: { damage_style() }
			size: { damage_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	damage 1 blur 03:
		left: { damage_1_left() }
		top: { damage_1_top() }
		width: { damage_1_width() }
		height: { damage_1_height() }
		z index: 5
		visible: { damage_1_outline_blur() }
		alignment: { damage_align() }
		font:
			name: { damage_font() }
			weight: { damage_weight() }
			style: { damage_style() }
			size: { damage_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	damage 1 blur 04:
		left: { damage_1_left() }
		top: { damage_1_top() }
		width: { damage_1_width() }
		height: { damage_1_height() }
		z index: 5
		visible: { damage_1_outline_blur() }
		alignment: { damage_align() }
		font:
			name: { damage_font() }
			weight: { damage_weight() }
			style: { damage_style() }
			size: { damage_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	rule text 1 blur 01:
		left: { rule_1_left() }
		top: { rule_1_top() }
		width: { rule_1_width() }
		height: { rule_1_height() }
		z index: 5
		visible: { rule_1_outline_blur() }
		alignment: { rule_1_align() }
		line height hard: { rule_lh_hard() }
		symbol font:
			name: { rule_symbol_font() }
			size: { rule_symbol_size() }
		font:
			name: { rule_font() }
			weight: { rule_weight() }
			style: { rule_style() }
			size: { rule_size() }
			scale down to: 6
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	rule text 1 blur 02:
		left: { rule_1_left() }
		top: { rule_1_top() }
		width: { rule_1_width() }
		height: { rule_1_height() }
		z index: 5
		visible: { rule_1_outline_blur() }
		alignment: { rule_1_align() }
		line height hard: { rule_lh_hard() }
		symbol font:
			name: { rule_symbol_font() }
			size: { rule_symbol_size() }
		font:
			name: { rule_font() }
			weight: { rule_weight() }
			style: { rule_style() }
			size: { rule_size() }
			scale down to: 6
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	rule text 1 blur 03:
		left: { rule_1_left() }
		top: { rule_1_top() }
		width: { rule_1_width() }
		height: { rule_1_height() }
		z index: 5
		visible: { rule_1_outline_blur() }
		alignment: { rule_1_align() }
		line height hard: { rule_lh_hard() }
		symbol font:
			name: { rule_symbol_font() }
			size: { rule_symbol_size() }
		font:
			name: { rule_font() }
			weight: { rule_weight() }
			style: { rule_style() }
			size: { rule_size() }
			scale down to: 6
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	rule text 1 blur 04:
		left: { rule_1_left() }
		top: { rule_1_top() }
		width: { rule_1_width() }
		height: { rule_1_height() }
		z index: 5
		visible: { rule_1_outline_blur() }
		alignment: { rule_1_align() }
		line height hard: { rule_lh_hard() }
		symbol font:
			name: { rule_symbol_font() }
			size: { rule_symbol_size() }
		font:
			name: { rule_font() }
			weight: { rule_weight() }
			style: { rule_style() }
			size: { rule_size() }
			scale down to: 6
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	damage 2 blur 01:
		left: { damage_2_left() }
		top: { damage_2_top() }
		width: { damage_2_width() }
		height: { damage_2_height() }
		z index: 5
		visible: { damage_2_outline_blur() }
		alignment: { damage_align() }
		font:
			name: { damage_font() }
			weight: { damage_weight() }
			style: { damage_style() }
			size: { damage_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	damage 2 blur 02:
		left: { damage_2_left() }
		top: { damage_2_top() }
		width: { damage_2_width() }
		height: { damage_2_height() }
		z index: 5
		visible: { damage_2_outline_blur() }
		alignment: { damage_align() }
		font:
			name: { damage_font() }
			weight: { damage_weight() }
			style: { damage_style() }
			size: { damage_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	damage 2 blur 03:
		left: { damage_2_left() }
		top: { damage_2_top() }
		width: { damage_2_width() }
		height: { damage_2_height() }
		z index: 5
		visible: { damage_2_outline_blur() }
		alignment: { damage_align() }
		font:
			name: { damage_font() }
			weight: { damage_weight() }
			style: { damage_style() }
			size: { damage_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	damage 2 blur 04:
		left: { damage_2_left() }
		top: { damage_2_top() }
		width: { damage_2_width() }
		height: { damage_2_height() }
		z index: 5
		visible: { damage_2_outline_blur() }
		alignment: { damage_align() }
		font:
			name: { damage_font() }
			weight: { damage_weight() }
			style: { damage_style() }
			size: { damage_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	rule text 2 blur 01:
		left: { rule_2_left() }
		top: { rule_2_top() }
		width: { rule_2_width() }
		height: { rule_2_height() }
		z index: 5
		visible: { rule_2_outline_blur() }
		alignment: { rule_2_align() }
		line height hard: { rule_lh_hard() }
		symbol font:
			name: { rule_symbol_font() }
			size: { rule_symbol_size() }
		font:
			name: { rule_font() }
			weight: { rule_weight() }
			style: { rule_style() }
			size: { rule_size() }
			scale down to: 6
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	rule text 2 blur 02:
		left: { rule_2_left() }
		top: { rule_2_top() }
		width: { rule_2_width() }
		height: { rule_2_height() }
		z index: 5
		visible: { rule_2_outline_blur() }
		alignment: { rule_2_align() }
		line height hard: { rule_lh_hard() }
		symbol font:
			name: { rule_symbol_font() }
			size: { rule_symbol_size() }
		font:
			name: { rule_font() }
			weight: { rule_weight() }
			style: { rule_style() }
			size: { rule_size() }
			scale down to: 6
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	rule text 2 blur 03:
		left: { rule_2_left() }
		top: { rule_2_top() }
		width: { rule_2_width() }
		height: { rule_2_height() }
		z index: 5
		visible: { rule_2_outline_blur() }
		alignment: { rule_2_align() }
		line height hard: { rule_lh_hard() }
		symbol font:
			name: { rule_symbol_font() }
			size: { rule_symbol_size() }
		font:
			name: { rule_font() }
			weight: { rule_weight() }
			style: { rule_style() }
			size: { rule_size() }
			scale down to: 6
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	rule text 2 blur 04:
		left: { rule_2_left() }
		top: { rule_2_top() }
		width: { rule_2_width() }
		height: { rule_2_height() }
		z index: 5
		visible: { rule_2_outline_blur() }
		alignment: { rule_2_align() }
		line height hard: { rule_lh_hard() }
		symbol font:
			name: { rule_symbol_font() }
			size: { rule_symbol_size() }
		font:
			name: { rule_font() }
			weight: { rule_weight() }
			style: { rule_style() }
			size: { rule_size() }
			scale down to: 6
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	damage 3 blur 01:
		left: { damage_3_left() }
		top: { damage_3_top() }
		width: { damage_3_width() }
		height: { damage_3_height() }
		z index: 5
		visible: { damage_3_outline_blur() }
		alignment: { damage_align() }
		font:
			name: { damage_font() }
			weight: { damage_weight() }
			style: { damage_style() }
			size: { damage_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	damage 3 blur 02:
		left: { damage_3_left() }
		top: { damage_3_top() }
		width: { damage_3_width() }
		height: { damage_3_height() }
		z index: 5
		visible: { damage_3_outline_blur() }
		alignment: { damage_align() }
		font:
			name: { damage_font() }
			weight: { damage_weight() }
			style: { damage_style() }
			size: { damage_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	damage 3 blur 03:
		left: { damage_3_left() }
		top: { damage_3_top() }
		width: { damage_3_width() }
		height: { damage_3_height() }
		z index: 5
		visible: { damage_3_outline_blur() }
		alignment: { damage_align() }
		font:
			name: { damage_font() }
			weight: { damage_weight() }
			style: { damage_style() }
			size: { damage_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	damage 3 blur 04:
		left: { damage_3_left() }
		top: { damage_3_top() }
		width: { damage_3_width() }
		height: { damage_3_height() }
		z index: 5
		visible: { damage_3_outline_blur() }
		alignment: { damage_align() }
		font:
			name: { damage_font() }
			weight: { damage_weight() }
			style: { damage_style() }
			size: { damage_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	rule text 3 blur 01:
		left: { rule_3_left() }
		top: { rule_3_top() }
		width: { rule_3_width() }
		height: { rule_3_height() }
		z index: 5
		visible: { rule_3_outline_blur() }
		alignment: { rule_3_align() }
		line height hard: { rule_lh_hard() }
		symbol font:
			name: { rule_symbol_font() }
			size: { rule_symbol_size() }
		font:
			name: { rule_font() }
			weight: { rule_weight() }
			style: { rule_style() }
			size: { rule_size() }
			scale down to: 6
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	rule text 3 blur 02:
		left: { rule_3_left() }
		top: { rule_3_top() }
		width: { rule_3_width() }
		height: { rule_3_height() }
		z index: 5
		visible: { rule_3_outline_blur() }
		alignment: { rule_3_align() }
		line height hard: { rule_lh_hard() }
		symbol font:
			name: { rule_symbol_font() }
			size: { rule_symbol_size() }
		font:
			name: { rule_font() }
			weight: { rule_weight() }
			style: { rule_style() }
			size: { rule_size() }
			scale down to: 6
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	rule text 3 blur 03:
		left: { rule_3_left() }
		top: { rule_3_top() }
		width: { rule_3_width() }
		height: { rule_3_height() }
		z index: 5
		visible: { rule_3_outline_blur() }
		alignment: { rule_3_align() }
		line height hard: { rule_lh_hard() }
		symbol font:
			name: { rule_symbol_font() }
			size: { rule_symbol_size() }
		font:
			name: { rule_font() }
			weight: { rule_weight() }
			style: { rule_style() }
			size: { rule_size() }
			scale down to: 6
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	rule text 3 blur 04:
		left: { rule_3_left() }
		top: { rule_3_top() }
		width: { rule_3_width() }
		height: { rule_3_height() }
		z index: 5
		visible: { rule_3_outline_blur() }
		alignment: { rule_3_align() }
		line height hard: { rule_lh_hard() }
		symbol font:
			name: { rule_symbol_font() }
			size: { rule_symbol_size() }
		font:
			name: { rule_font() }
			weight: { rule_weight() }
			style: { rule_style() }
			size: { rule_size() }
			scale down to: 6
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	attack 1 blur 01:
		left: { attack_1_left() }
		top: { attack_1_top() }
		width: { attack_1_width() }
		height: { attack_1_height() }
		z index: 5
		visible: { attack_1_outline_blur() }
		alignment: { attack_align() }
		font:
			name: { attack_font() }
			weight: { attack_weight() }
			style: { attack_style() }
			size: { attack_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	attack 1 blur 02:
		left: { attack_1_left() }
		top: { attack_1_top() }
		width: { attack_1_width() }
		height: { attack_1_height() }
		z index: 5
		visible: { attack_1_outline_blur() }
		alignment: { attack_align() }
		font:
			name: { attack_font() }
			weight: { attack_weight() }
			style: { attack_style() }
			size: { attack_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	attack 1 blur 03:
		left: { attack_1_left() }
		top: { attack_1_top() }
		width: { attack_1_width() }
		height: { attack_1_height() }
		z index: 5
		visible: { attack_1_outline_blur() }
		alignment: { attack_align() }
		font:
			name: { attack_font() }
			weight: { attack_weight() }
			style: { attack_style() }
			size: { attack_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	attack 1 blur 04:
		left: { attack_1_left() }
		top: { attack_1_top() }
		width: { attack_1_width() }
		height: { attack_1_height() }
		z index: 5
		visible: { attack_1_outline_blur() }
		alignment: { attack_align() }
		font:
			name: { attack_font() }
			weight: { attack_weight() }
			style: { attack_style() }
			size: { attack_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	attack 2 blur 01:
		left: { attack_2_left() }
		top: { attack_2_top() }
		width: { attack_2_width() }
		height: { attack_2_height() }
		z index: 5
		visible: { attack_2_outline_blur() }
		alignment: { attack_align() }
		font:
			name: { attack_font() }
			weight: { attack_weight() }
			style: { attack_style() }
			size: { attack_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	attack 2 blur 02:
		left: { attack_2_left() }
		top: { attack_2_top() }
		width: { attack_2_width() }
		height: { attack_2_height() }
		z index: 5
		visible: { attack_2_outline_blur() }
		alignment: { attack_align() }
		font:
			name: { attack_font() }
			weight: { attack_weight() }
			style: { attack_style() }
			size: { attack_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	attack 2 blur 03:
		left: { attack_2_left() }
		top: { attack_2_top() }
		width: { attack_2_width() }
		height: { attack_2_height() }
		z index: 5
		visible: { attack_2_outline_blur() }
		alignment: { attack_align() }
		font:
			name: { attack_font() }
			weight: { attack_weight() }
			style: { attack_style() }
			size: { attack_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	attack 2 blur 04:
		left: { attack_2_left() }
		top: { attack_2_top() }
		width: { attack_2_width() }
		height: { attack_2_height() }
		z index: 5
		visible: { attack_2_outline_blur() }
		alignment: { attack_align() }
		font:
			name: { attack_font() }
			weight: { attack_weight() }
			style: { attack_style() }
			size: { attack_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	attack 3 blur 01:
		left: { attack_3_left() }
		top: { attack_3_top() }
		width: { attack_3_width() }
		height: { attack_3_height() }
		z index: 5
		visible: { attack_3_outline_blur() }
		alignment: { attack_align() }
		font:
			name: { attack_font() }
			weight: { attack_weight() }
			style: { attack_style() }
			size: { attack_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	attack 3 blur 02:
		left: { attack_3_left() }
		top: { attack_3_top() }
		width: { attack_3_width() }
		height: { attack_3_height() }
		z index: 5
		visible: { attack_3_outline_blur() }
		alignment: { attack_align() }
		font:
			name: { attack_font() }
			weight: { attack_weight() }
			style: { attack_style() }
			size: { attack_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	attack 3 blur 03:
		left: { attack_3_left() }
		top: { attack_3_top() }
		width: { attack_3_width() }
		height: { attack_3_height() }
		z index: 5
		visible: { attack_3_outline_blur() }
		alignment: { attack_align() }
		font:
			name: { attack_font() }
			weight: { attack_weight() }
			style: { attack_style() }
			size: { attack_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	attack 3 blur 04:
		left: { attack_3_left() }
		top: { attack_3_top() }
		width: { attack_3_width() }
		height: { attack_3_height() }
		z index: 5
		visible: { attack_3_outline_blur() }
		alignment: { attack_align() }
		font:
			name: { attack_font() }
			weight: { attack_weight() }
			style: { attack_style() }
			size: { attack_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
extra card field:
	type: choice
	name: test image
	show statistics: false
	card list allow: false
	save value: false
	editable: false
	choice: trainer overlay
extra card field:
	type: text
	name: info text
	show statistics: false
	default: diagnostic()
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card style:
	test image:
		left: { x_left(8) }
		top: { y_top(9) }
		width: { fun_expand_size(350) }
		height: { fun_expand_size(495) }
		visible: { contains(styling.General_Choices, match: "Test Image") }
		render style: image
		z index: -3
		image: { "!test-image.jpg" }
	info text:
		left: { x_left(50) }
		top: { y_top(50)+slide_up() }
		width: { fun_expand_size(200) }
		height: { fun_expand_size(100) }
		z index: 5
		visible: { contains(styling.General_Choices, match: "Diagnostic Text") }
		font:
			name: { "GillSans" }
			weight: { "bold" }
			style: { "normal" }
			scale down to: 6
			size: { fun_expand_font(10) }
			color: rgb(255,0,0)
		symbol font:
			name: pokemon-a-rule
			size: { fun_expand_font(20) }
