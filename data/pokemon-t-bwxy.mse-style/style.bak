mse version: 2.0.0
game: pokemon
full name: Black & White, & XY
short name: BW&XY
icon: card-sample.jpg
position hint: 069

version: 2018-07-22
depends on:
	package: pokemon.mse-game
	version: 2018-07-22
depends on:
	package: pokemon-a-energy.mse-symbol-font
	version: 2018-06-28
depends on:
	package: pokemon-a-color.mse-symbol-font
	version: 2016-09-10
depends on:
	package: pokemon-a-lg-color.mse-symbol-font
	version: 2018-06-19
depends on:
	package: pokemon-a-title.mse-symbol-font
	version: 2018-07-02
depends on:
	package: pokemon-a-rule.mse-symbol-font
	version: 2018-06-28
depends on:
	package: pokemon-a-rule-behind.mse-symbol-font
	version: 2018-06-28
depends on:
	package: pokemon-b-common.mse-include
	version: 2018-07-04

#By: Imp Elemental Spirit Guide

#expand_size()==2
#border included
#card width: 736
#card height: 1026
#card dpi: 294

#expand_size()==1
card width: 368
card height: 513
card dpi: 147

#Actual card width is 2.5", height is 3.5" almost exactly
############################################################## Extra scripts
init script:
	diagnostic := { to_string(rule_size_1())+"   "+to_string(427)+"   "+to_string(ex_height())+"   "+to_string(attack_no_g7())+"   "+to_string(10-417+bottom_rule()) }
	##############################These two equations were originally used for centering and placing the different frames and text so that they matched the original card.
	##############################			They have been kept in here because they would allow a different resolution of card should such thing apply
	##############################                  Be careful to change the card size when altering these value
	expand_size := { 1 }
	is_not_blur := { expand_size()==2 }
	# 2 is the size of the actual images used
	# to watch 2 , card width 736, height 750, expand_size==2, slide_up == 0 or 276
	# for 2   card width: 736, card height: 1026, card dpi: 294
	# for 1.5 card width: 552, card height:  770, card dpi: 220
	# for 1.4 card width: 515, card height:  717, card dpi: 205
	# for 1   card width: 368, card height:  513, card dpi: 147
	slide_left := { 0 }
	slide_up := { 0 }
	x_left := { to_int(input * expand_size()) - slide_left() }
	y_top := { to_int(input * expand_size()) - slide_up() }
	fun_expand_size := { to_int(input * expand_size()) }
	fun_expand_font := { input * expand_size() }
	fun_decompress := { input / expand_size() }
	##############################These equations make sure that the cost for the classic template and the modern template match in spite of being different fields
	cost_classic_1_placekeep := { card.cost_new_1 }
	cost_classic_2_placekeep := { card.cost_new_2 }
	cost_classic_3_placekeep := { card.cost_new_3 }
	############################### Equations for symbol text coloration
	############################### Tag equations for the symbol fonts
	is_outline_energy := { is_outline() }
	is_outline_rule := { is_outline() }
	is_wt_rule := { is_wt_text() }
	is_two_tone_rule := { is_two_tone() }
	is_outline_title := { is_outline() }
	is_wt_title := { is_wt_top() }
	is_ec_pbp := { contains(styling.Ability_and_Energy_Icons, match: "Use E-Card Poke-Body & Poke-Power Icons") }
	is_sm_ab := { not(contains(styling.Ability_and_Energy_Icons, match: "Use Black & White or XY Style Ability Icon")) }
	is_ab_gold := { contains(card.general_options_07, match: "Secret Rare (Gold)") }
	is_dpp_free := { contains(styling.Ability_and_Energy_Icons, match: "Use Transparent Free Energy Icon (aka No Energy)") }
	gx_color := { "Gold" }
	two_tone_font := { "pokemon-a-rule-behind" }
	############################### Simplify multiple stage choice variables
	stage := { card.stage_restored }
	stage_default := { if card.stage_restored=="" or card.stage_restored=="Restored" then "Basic" else card.stage_base }
	text_option_filter_1 := { text_option_filter(card.text_options_3) } + replace@(match: "Default Ability Color", replace: "Default Pokemon Power Color")
	text_option_filter_2 := { text_option_filter(card.text_options_3) } + replace@(match: "Default Ability Color", replace: "Default PokeBody and PokePower Color")
	text_option_filter_3 := { text_option_filter(value) }
	############################### Other diagnostic equations
	############################## Equations to centralize the mask settings for dual types
	dual_mask := { if card.dual_blend_type=="Dark EX Series" then "/pokemon-b-common.mse-include/mask-p-split-darkg1.png"
		else if card.dual_blend_type=="Metal EX Series" then "/pokemon-b-common.mse-include/mask-p-split-metalg1.png"
		else "/pokemon-b-common.mse-include/mask-p-split-ss.png" }
	dual_mask_reverse := { if card.dual_blend_type=="Dark EX Series" then "/pokemon-b-common.mse-include/mask-p-split-darkg1-reverse.png"
		else if card.dual_blend_type=="Metal EX Series" then "/pokemon-b-common.mse-include/mask-p-split-metalg1-reverse.png"
		else "/pokemon-b-common.mse-include/mask-p-split-ss-reverse.png" }
	blend_mask := { if card.dual_blend_type=="Dark EX Series" then "/pokemon-b-common.mse-include/mask-p-blend-darkg1.png"
		else if card.dual_blend_type=="Metal EX Series" then "/pokemon-b-common.mse-include/mask-p-blend-metalg1.png"
		else "/pokemon-b-common.mse-include/mask-p-split-ss.png" }
	blend_mask_reverse := { if card.dual_blend_type=="Dark EX Series" then "/pokemon-b-common.mse-include/mask-p-blend-darkg1-reverse.png"
		else if card.dual_blend_type=="Metal EX Series" then "/pokemon-b-common.mse-include/mask-p-blend-metalg1-reverse.png"
		else "/pokemon-b-common.mse-include/mask-p-split-ss-reverse.png" }
	texture_type_1 := { if background_type_1()=="User Defined" then to_string(card.color_texture_1)
		else if card.texture_type_1=="Default" then "Nintendo"
		else to_string(card.texture_type_1) }
	texture_type_2 := { if background_type_2()=="User Defined" then to_string(card.color_texture_2)
		else if card.texture_type_2=="Default" then "Nintendo"
		else to_string(card.texture_type_2) }
	colored_pokemon_suffix_1 := { to_string(card.color_texture_1) } + replace@(match: " Black Text", replace: "") + replace@(match: " White Text", replace: "")
	colored_pokemon_suffix_2 := { to_string(card.color_texture_2) } + replace@(match: " Black Text", replace: "") + replace@(match: " White Text", replace: "")
	background_type_1 := { to_string(card.card_color_1) }
	background_type_2 := { to_string(card.card_color_2) }
	is_image_1 := { (is_pokemon() and contains(texture_type_1(), match: "User Image")) or (is_energy() and contains(basic_energy_suffix(), match: "User Image")) }
	is_image_2 := { (card.card_type=="Dual-Type" and contains(texture_type_2(), match: "User Image")) }
	plasma_type_1 := { if background_type_1()=="Colorless" then "-colorless-plasma.png"
		else if background_type_1()=="Dark" then "-dark-plasma.png"
		else if background_type_1()=="Dragon" then if texture_type_1()=="SunMoon" then "-dragon-sunmoon-plasma.png"
			else "-dragon-nintendo-plasma.png"
		else if background_type_1()=="Fairy" then "-fairy-plasma.png"
		else if background_type_1()=="Fighting" then if texture_type_1()=="Wizards" then "-fighting-wizards-plasma.png"
			else "-fighting-nintendo-plasma.png"
		else if background_type_1()=="Fire" then if texture_type_1()=="SunMoon" then "-fire-sunmoon-plasma.png"
			else "-fire-nintendo-plasma.png"
		else if background_type_1()=="Grass" then if texture_type_1()=="Wizards" then "-grass-wizards-plasma.png"
			else "-grass-nintendo-plasma.png"
		else if background_type_1()=="Lightning" then "-lightning-plasma.png"
		else if background_type_1()=="Metal" then if texture_type_1()=="Wizards" then "-metal-wizards-plasma.png"
			else if texture_type_1()=="Nintendo" then "-colorless-plasma.png"
			else "-metal-sunmoon-plasma.png"
		else if background_type_1()=="Psychic" then "-psychic-plasma.png"
		else if background_type_1()=="Water" then "-water-plasma.png"
		else ".png" }
	plasma_type_2 := { if background_type_2()=="Colorless" then "-colorless-plasma.png"
		else if background_type_2()=="Dark" then "-dark-plasma.png"
		else if background_type_2()=="Dragon" then if texture_type_2()=="SunMoon" then "-dragon-sunmoon-plasma.png"
			else "-dragon-nintendo-plasma.png"
		else if background_type_2()=="Fairy" then "-fairy-plasma.png"
		else if background_type_2()=="Fighting" then if texture_type_2()=="Wizards" then "-fighting-wizards-plasma.png"
			else "-fighting-nintendo-plasma.png"
		else if background_type_2()=="Fire" then if texture_type_2()=="SunMoon" then "-fire-sunmoon-plasma.png"
			else "-fire-nintendo-plasma.png"
		else if background_type_2()=="Grass" then if texture_type_2()=="Wizards" then "-grass-wizards-plasma.png"
			else "-grass-nintendo-plasma.png"
		else if background_type_2()=="Lightning" then "-lightning-plasma.png"
		else if background_type_2()=="Metal" then if texture_type_2()=="Wizards" then "-metal-wizards-plasma.png"
			else if texture_type_2()=="Nintendo" then "-colorless-plasma.png"
			else "-metal-sunmoon-plasma.png"
		else if background_type_2()=="Psychic" then "-psychic-plasma.png"
		else if background_type_2()=="Water" then "-water-plasma.png"
		else ".png" }
	basic_energy_suffix := { if card.basic_texture=="Default" then "BW"
		else to_string(card.basic_texture) } + replace@(match: " Black Text", replace: "") + replace@(match: " White Text", replace: "")
	###############################
	team_type := { if contains(card.general_options_07, match: "Secret Rare (Gold)") then "-gold"
		else if contains(card.general_options_07, match: "Team Plasma") then "-plasma"
		else if contains(card.general_options_07, match: "Team Flare") then "-flare"
		else "" }
	trainer_color := { if card.trainer=="Item" or card.trainer=="Tool" then "-item"
		else if card.trainer=="Stadium" then "-stadium"
		else if card.trainer=="Supporter" then "-supporter"
		else "" }
	############################### Equations for text coloration
	############################### Text color equations to determin the color and types of text
	#######Determines if there is an ability for Gen 6
	is_ability_1 := { (is_pokemon() and (contains(card.cost_new_1, match:"AB") or contains(card.cost_new_1, match:"KB") or contains(card.cost_new_1, match:"KE")) and not(contains(card.general_options_07, match: "Retro Card Face"))) or
			(is_pokemon() and contains(card.attack_1, match: "Ability: ") and contains(card.general_options_07, match: "Retro Card Face")) }
	is_ability_2 := { (is_pokemon() and (contains(card.cost_new_2, match:"AB") or contains(card.cost_new_2, match:"KB") or contains(card.cost_new_2, match:"KE"))  and not(contains(card.general_options_07, match: "Retro Card Face"))) or
			(is_pokemon() and contains(card.attack_2, match: "Ability: ") and contains(card.general_options_07, match: "Retro Card Face")) }
	is_ability_3 := { (is_pokemon() and (contains(card.cost_new_3, match:"AB") or contains(card.cost_new_3, match:"KB") or contains(card.cost_new_3, match:"KE"))  and not(contains(card.general_options_07, match: "Retro Card Face"))) or
			(is_pokemon() and contains(card.attack_3, match: "Ability: ") and contains(card.general_options_07, match: "Retro Card Face")) }
	is_ability := { is_ability_1() or is_ability_2() or is_ability_3() }
	ability_color := { if contains(card.text_options_3, match: "Dark Red") then rgb(134,35,38)
		else if contains(card.text_options_3, match: "Red") then rgb(216,5,20)
		else if contains(card.text_options_3, match: "Purple") then rgb(89,46,132)
		else if contains(card.text_options_3, match: "Yellow") then rgb(255,242,19)
		else if contains(card.text_options_3, match: "Green") then rgb(2,146,64)
		else if not(contains(card.general_options_07, match: "Retro Card Face")) and (card.card_type=="Pokemon" and (card.card_color_1=="Fairy" or card.card_color_1=="Fire")) or (card.card_type=="Dual-Type" and (card.card_color_2=="Fairy" or card.card_color_2=="Fire")) then rgb(134,35,38)
		else if contains(card.general_options_07, match: "Retro Card Face") and (card.card_type=="Pokemon" and (card.card_color_1=="Fire" or card.card_color_1=="Fairy")) or (card.card_type=="Dual-Type" and (card.card_color_2=="Fire" or card.card_color_2=="Fairy")) then rgb(89,46,132)
		else rgb(216,5,20) }
	is_outline := { (contains(card.text_options_3, match: "Outline Text") or contains(card.art_options, match: "Full Art") or contains(card.art_options, match: "Popout Art (for Advanced Users)")) or
		(card.card_type == "Trainer" and card.trainer == "Stadium" and contains(card.general_options_07, match: "Stadium Cards Split Top & Bottom")) }
	is_two_tone := { card.card_type=="Dual-Type" and not(is_outline()) and not(is_dark_1()==is_dark_2()) and not(contains(card.text_options_3, match: "Body Fade Box")) }
	is_wt_text := { ((card.card_type=="Pokemon" and is_dark_1() and not(is_outline()) and not(contains(card.text_options_3, match: "Body Fade Box"))) or
			(card.card_type=="Dual-Type" and not(is_outline()) and is_dark_1() and is_dark_2() and not(contains(card.text_options_3, match: "Body Fade Box")))) or
			(is_energy() and not(card.energy_type=="Special") and is_dark_1() and not(is_outline())) }
	is_wt_top := { (is_wt_text() or (is_pokemon() and is_dark_1() and not(is_outline())))
		or (is_trainer() and not(is_outline()) and contains(card.general_options_07, match: "Ace Spec Trainer") and not(contains(card.general_options_07, match: "Retro Card Face"))) }
	is_dark_1 := { (is_pokemon() and 
			((background_type_1()=="Dark" or
			(background_type_1()=="Dragon" and not(texture_type_1()=="SunMoon"))) or
			((texture_type_1()=="ISG" and (background_type_1()=="Fighting" or background_type_1()=="Grass")) or
			contains(texture_type_1(), match: "White Text"))) or
		contains(card.basic_texture, match: "White Text")) }
	is_dark_2 := { ((background_type_2()=="Dark" or 
			((background_type_2()=="Dragon" and not(texture_type_2()=="SunMoon")) or 
				(texture_type_2()=="ISG" and (background_type_2()=="Fighting" or background_type_2()=="Grass")))) or
		(contains(texture_type_2(), match: "White Text"))) }
	rarity_color := { is_wt_text() or (is_two_tone() and
				((is_dark_2() and card.dual_blend_type=="Metal EX Series") or
				(is_dark_1() and card.dual_blend_type=="Dark EX Series") or
				(is_dark_2() and card.dual_blend_type=="Steam Siege"))) }
	##############################Reminder Text Equations
	ret_text := { if contains(card.general_options_07, match: "Retro Card Face") then "retreat cost" else "retreat" }
	weakness_string := { text_filter(card.weakness) } + replace@(match: "S", replace: "")
	weakness_length := { length(to_text(weakness_string())) }
	##############################Equations to centralize the information for the pokemon attack energy symbol so that user defined and dual texts are synchronized.
	energy_left := { if is_energy() then if contains(card.general_options_07, match: "Retro Card Face") then 38 else 317 
		else if contains(card.general_options_07, match: "Retro Card Face") then 309 else 321 }
	energy_top := { if contains(card.general_options_07, match: "Retro Card Face") and is_energy() and card.energy_type=="Basic" then 24 
		else if contains(card.general_options_07, match: "Retro Card Face") and is_pokemon() then 32 else 19  }
	energy_left_difference := { 10 }
	energy_right_difference := { 9 }
	energy_width := { if is_energy() then if contains(card.general_options_07, match: "Retro Card Face") then 43 else 26 
		else if contains(card.general_options_07, match: "Retro Card Face") then 28 else 27 }
	#######Determines if the width of the cost window has been expanded for Gen 6
	cost_width := { max(card_style.cost_new_1.content_width,card_style.cost_new_2.content_width,card_style.cost_new_3.content_width) }
	#######Determines if the number of lines of rule text are currently being used
	rule_line_1 := { if length(to_text(card.rule_text_1))==0 then 0 else to_int(length(to_text(card.rule_text_1))/55)+1 }
	rule_line_2 := { if length(to_text(card.rule_text_2))==0 then 0 else to_int(length(to_text(card.rule_text_2))/55)+1 }
	rule_line_3 := { if length(to_text(card.rule_text_3))==0 then 0 else to_int(length(to_text(card.rule_text_3))/55)+1 }
	rule_lines := { rule_line_1() + rule_line_2() + rule_line_3() }
	rule_lines_g7 := { if contains(card.general_options_07, match: "EX Pokemon") and (contains(stage(), match: "Stage") or (stage()=="Restored" and contains(card.general_options_07, match: "Mega Reminder Box for EX Restored"))) then rule_line_1()
		else rule_lines() }
	rule_line_np := { if length(to_text(card.rule_np_1))==0 then 0 else to_int(length(to_text(card.rule_np_1))/46)+1 }
	#######Determines how many attacks have been input for Gen 6
	attack_no_g7 := { if contains(card.general_options_07, match: "EX Pokemon") and (contains(stage(), match: "Stage") or (stage()=="Restored" and contains(card.general_options_07, match: "Mega Reminder Box for EX Restored"))) then 1
		else if card.cost_new_3!="" or card.attack_3!="" or card.damage_3!="" then 3
		else if card.cost_new_2!="" or card.attack_2!="" or card.damage_2!="" then 2
		else 1 }
	#######Determines if the top attack must be moved up due to increased rule lines for Gen 6
	top_move_2 := { ((rule_line_1()==0 and rule_lines_g7()>=5) or
		(rule_line_1()==1 and rule_lines_g7()>=4) or
		(rule_line_1()>=2 and rule_line_2()!=0) or
		rule_line_1()>=4 or
		is_ability()) }
	#######The minimum size of an empty attack field
	min_rule_size := { if attack_no_g7()<=2 or rule_lines_g7()<=3 then 8
		else 4 }
	#######The height of the different attack boxes for Gen 6
	rule_size_1 := { if rule_line_1()==0 then min_rule_size()
		else if attack_no_g7()==1 then (16*rule_line_1())+min_rule_size()/4
		else if attack_no_g7()==2 then if rule_lines_g7()<=5 then (16*rule_line_1())+min_rule_size()/2
			else to_int(91 * rule_line_1() / rule_lines_g7()) + min_rule_size()
		else if rule_lines_g7()<=4 then (16*rule_line_1())+min_rule_size()/2
		else to_int(64 * rule_line_1() / rule_lines_g7()) + min_rule_size() }
	rule_size_2 := { if rule_line_2()==0 then min_rule_size()
		else if attack_no_g7()==1 then (16*rule_line_2())+min_rule_size()/4
		else if attack_no_g7()==2 then if rule_lines_g7()<=5 then (16*rule_line_2())+min_rule_size()/2
			else to_int(91 * rule_line_2() / rule_lines_g7()) + min_rule_size()
		else if rule_lines_g7()<=4 then (16*rule_line_2())+min_rule_size()/2
		else to_int(64 * rule_line_2() / rule_lines_g7()) + min_rule_size() }
	rule_size_3 := { if rule_line_3()==0 then min_rule_size()
		else if attack_no_g7()==1 then (16*rule_line_3())+min_rule_size()/4
		else if attack_no_g7()==2 then if rule_lines_g7()<=5 then (16*rule_line_3())+min_rule_size()/2
			else to_int(91 * rule_line_3() / rule_lines_g7()) + min_rule_size()
		else if rule_lines_g7()<=4 then (16*rule_line_3())+min_rule_size()/2
		else to_int(64 * rule_line_3() / rule_lines_g7()) + min_rule_size() }
	#######The bottom empty attack line for Gen 6
	bottom_rule := { if attack_no_g7()==1 then top_height()+23+rule_size_1()+23
		else if attack_no_g7()==2 then middle_height()+23+rule_size_2()+8
		else middle_height()+23+rule_size_2()+8 }
	#######The modification to the height factors due to it being an EX for Gen 6
	ex_height := { if contains(card.general_options_07, match: "EX Pokemon") and stage()=="Basic" then if attack_no_g7()==1 then 0
			else if attack_no_g7()==2 then if bottom_rule()<=417 then 10
				else if bottom_rule()<=427 then bottom_rule()-417
				else 0
			else 10
		else 0 }
	#######The Top/Middle and Bottom Tops for Gen 6
	top_np := { 475-15*(if rule_line_np()>0 then rule_line_np() else 1) }
	top_height := { if contains(card.general_options_07, match: "EX Pokemon") and (contains(stage(), match: "Stage") or (stage()=="Restored" and contains(card.general_options_07, match: "Mega Reminder Box for EX Restored"))) then 349
		else if attack_no_g7()==1 then if is_ability() then 282
			else if rule_line_1()<=2 then 322 else 302
		else if is_ability() or attack_no_g7()==2 then if top_move_2() then 282 else 302
		else 282 }
	middle_height := { if attack_no_g7()==2
				 then if rule_lines_g7()<=5
				  then if is_ability()
				   then if rule_line_1()==0 then if rule_line_2()<=2 then 328 else if rule_line_2()<=4 then 316 else 316
				   else if rule_line_1()==1 then if rule_line_2()<=1 then 347 else 335
				   else if rule_line_1()==2 then if rule_line_2()<=1 then 348 else 340
				   else if rule_line_1()==3 then if rule_line_2()==0 then 378 else if rule_line_2()==1 then 366 else 354
				   else if rule_line_1()==4 then if rule_line_2()==0 then 377 else 381
				   else 383
				  else if rule_line_1()==0 then if rule_line_2()<=2 then 348 else if rule_line_2()<=4 then 336 else 316
				  else if rule_line_1()==1 then if rule_line_2()==0 then 367 else if rule_line_2()<=2 then 354 else 333
				  else if rule_line_1()==2 then if rule_line_2()==0 then 382 else if rule_line_2()==1 then 362 else 349
				  else if rule_line_1()==3 then if rule_line_2()==0 then 385 else if rule_line_2()==1 then 365 else 357
				  else if rule_line_1()==4 then if rule_line_2()==0 then 380 else 380
				  else 387
				 else rule_size_1()+305
			        else 309+rule_size_1() }
	bottom_height := { middle_height()+23+rule_size_2() }
	###############################################Equations that define spacing and text for attack
	is_ability_classic_1 := { false }
	is_ability_classic_2 := { false }
	is_ability_classic_3 := { false }
	########Determines if the number of lines of rule text are currently being used
	#rule_line_1 := { card_style.rule_text_1.content_lines - (if length(to_text(card.rule_text_1))==0 and card_style.rule_text_1.content_lines==1 then 1 else 0) }
	#rule_line_2 := { card_style.rule_text_2.content_lines - (if length(to_text(card.rule_text_2))==0 and card_style.rule_text_2.content_lines==1 then 1 else 0) }
	#rule_line_3 := { card_style.rule_text_3.content_lines - (if length(to_text(card.rule_text_3))==0 and card_style.rule_text_3.content_lines==1 then 1 else 0) }
	#rule_lines := { rule_line_1() + rule_line_2() + rule_line_3() }
	#######Determines how many attacks have been input
	attack_no := { if length(to_text(card.cost_classic_3))!=0 or length(to_text(card.damage_3))!=0 or length(to_text(card.rule_text_3))!=0 then 3
		else if length(to_text(card.cost_classic_2))!=0 or length(to_text(card.damage_2))!=0 or length(to_text(card.rule_text_2))!=0 then 2
		else 1 }
	#################Determines spacing for reminder text at the top (equals out left and right)
	evo_line_width := { if fun_decompress(card_style.evolution_entry.content_width)<=10 then 10 else fun_decompress(card_style.evolution_entry.content_width) }
	evo_total_width := { if contains(card.general_options_07, match: "Retro Card Face")
		then (if evo_field_width_1()<=10 then 10 else evo_field_width_1()) +
		(if contains(styling.Automated_Text_Usage, match: "Evolution Reminder") then if evo_line_width()<=10 then 10 else evo_line_width() else 0) +
		(if contains(stage(), match: "Stage") and evo_field_width_2()<=10 then 10 else if contains(stage(), match: "Stage") then evo_field_width_2() else 0)
		else evo_line_width() + fun_decompress(card_style.evolution_reminder_1.content_width) }
	evo_goal := { if contains(card.general_options_07, match: "Retro Card Face")
				then 258-(if card.card_type=="Dual-Type" and card.dual_blend_type=="Steam Siege" then 7 else 0)
			else if stage()=="Restored" then 238 else 130 }
	evo_field_width_1 := { fun_decompress(evolution_content_width()) }
	evo_field_width_2 := { if contains(styling.Automated_Text_Usage, match: "Evolution Reminder") then fun_decompress(card_style.evolution_reminder_2_7.content_width)
		else fun_decompress(card_style.evolution_text_2.content_width) }
	evo_width_1 := { if evo_field_width_1()<=10 then 10
			else if evo_total_width()>=evo_goal() then evo_goal()*(evo_field_width_1()/evo_total_width())
			else evo_field_width_1() }
	evo_width_evo := { if evo_line_width()<=10 then 10
			else if evo_total_width()>=evo_goal() then evo_goal()*(evo_line_width()/evo_total_width())
			else evo_line_width() }
	evo_width_2 := { if evo_field_width_2()<=50 then 50
		else if evo_total_width()>=evo_goal() then (evo_goal()*(evo_field_width_2()/evo_total_width()))-3
		else evo_field_width_2()+23 }
	#######Height of trainer text for multiple fields
	special_rule_1_lines := { if contains(styling.Automated_Text_Usage, match: "Tool Play Rule Reminder") then if length(to_text(card.special_rule_reminder_1_7))==0 then 1 else to_int(length(to_text(card.special_rule_reminder_1_7))/65)+1
		else if length(to_text(card.special_rule_text_1))==0 then 1 else to_int(length(to_text(card.special_rule_text_1))/65)+1 }
	special_rule_2_lines := { if contains(styling.Automated_Text_Usage, match: "Traner Play Rule Reminder") then if length(to_text(card.special_rule_reminder_2_7))==0 then 1 else to_int(length(to_text(card.special_rule_reminder_2_7))/57)+1
		else if length(to_text(card.special_rule_text_2))==0 then 1 else to_int(length(to_text(card.special_rule_text_2))/57)+1 }
	#######The height of the attack dividers for Classic
	#top_height := { 292 }
	divider_height_1 := { if attack_no()==1 then 392
		else if attack_no()==2
			then if (if is_ability_classic_2() then 0.77 
			else if length(to_text(card.damage_2))==0 then 0.83 else 1)*length(to_text(card.rule_text_2))+(if is_ability_classic_1() then 0.77 else if length(to_text(card.damage_1))==0 then 0.83 else 1)*length(to_text(card.rule_text_1))>=269 then 353-0.0153*((if is_ability_classic_2() then 0.77 else if length(to_text(card.damage_2))==0 then 0.83 else 1)*length(to_text(card.rule_text_2))-(if is_ability_classic_1() then 0.77 else if length(to_text(card.damage_1))==0 then 0.83 else 1)*length(to_text(card.rule_text_1))) else 354
		else 335 }
	divider_height_2 := { if attack_no()==3 then 378 else 416 }
	#bottom_height := { if attack_no()==2 then 421 else 419 }
	###################################################### Functions to centralize information for all text fields
	###################################################### Functions to centralize information for all text fields allowing two-tone & outline texts
	#######Card Name (remder size)
	card_name_left := { x_left(if is_energy() then 28 else if contains(card.general_options_07, match: "Retro Card Face") 
					then if is_pokemon() then if stage()=="Basic" then 34 else 95 else if is_energy() then 39 else 32
					else if is_pokemon() then 89 else 39) }
	card_name_top := { y_top(if contains(card.general_options_07, match: "Retro Card Face") then if is_energy() then top_np()-36 else if is_trainer() then 92 else 38 
					else if is_pokemon() then 24 else if is_trainer() then 56 else 328) }
	card_name_width := { fun_expand_size(if is_pokemon() then if contains(card.general_options_07, match: "Retro Card Face")
					then if contains(card.general_options_07, match: "EX Pokemon") then if stage()=="Basic" then 200 else 153 else if stage()=="Basic" then 166 else 105 else 145
					else if is_trainer() then 277 else 308) }
	card_name_height := { fun_expand_size(if is_pokemon() then 24 else if is_trainer() then 22 else if card.energy_type=="Special" then 24 else 0) }
	card_name_visible := { not(is_energy() and card.energy_type=="Basic") }
	card_name_outline_visible := { card_name_visible() and is_outline() and is_not_blur() }
	card_name_outline_blur := { card_name_visible() and is_outline() and not(is_not_blur()) }
	card_name_font := { if is_trainer() then if contains(card.general_options_07, match: "Retro Card Face") then "PokeTitleOrig" else "PokeTitleNeo" else "PokeTitleXY" }
	card_name_weight := { "normal" }
	card_name_style := { "normal" }
	card_name_size := { fun_expand_font(if is_pokemon() then if contains(card.general_options_07, match: "Retro Card Face") then 18.5 else 17 else if is_trainer() then if contains(card.general_options_07, match: "Retro Card Face") then 18 else 16 else 15) }
	card_name_align := { "bottom shrink-overflow" }
	card_name_symbol_font := { "pokemon-a-title" }
	card_name_symbol_size := { fun_expand_font(140) }

	#######HP Number
	hp_left := { x_left(if is_pokemon() and contains(card.general_options_07, match: "Retro Card Face") then if contains(card.general_options_07, match: "EX Pokemon") and not(stage()=="Basic") then 248 else 234 else 272) }
	hp_top := { y_top(if is_pokemon() and contains(card.general_options_07, match: "Retro Card Face") then 39 else 23) }
	hp_width := { fun_expand_size(if card.card_type=="Dual-Type" then 40 else if is_pokemon() and contains(card.general_options_07, match: "Retro Card Face") then if contains(card.general_options_07, match: "EX Pokemon") and not(stage()=="Basic") then 58 else 72 else 46) }
	hp_height := { fun_expand_size(if is_pokemon() then 25 else 0) }
	hp_size := { fun_expand_font(if is_pokemon() and contains(card.general_options_07, match: "Retro Card Face") then 18.5 else 15) }
	hp_font := { if is_trainer() and (card.trainer=="User Defined") then "Humanist521BT" else if is_pokemon() and contains(card.general_options_07, match: "Retro Card Face") then "Humanist521BT" else "PokeTitleNeo" }
	hp_visible := { is_pokemon() }
	hp_outline_visible := { hp_visible() and is_outline() and is_not_blur() }
	hp_outline_blur := { hp_visible() and is_outline() and not(is_not_blur()) }
	hp_weight := { "normal" }
	hp_style := { "normal" }
	hp_align := { "bottom right shrink-overflow" }
	hp_color := { if is_wt_top() then rgb(255,255,255) else rgb(0,0,0) }

	#######Pokedex Level code entry for Retro Card Face
	pokedex2_left := { x_left(200) }
	pokedex2_top := { y_top(48) }
	pokedex2_width := { fun_expand_size(34) }
	pokedex2_height := { fun_expand_size(if is_pokemon() and contains(card.general_options_07, match: "Retro Card Face") and not(contains(card.general_options_07, match: "EX Pokemon")) then 10 else 0) }
	pokedex2_align := { "middle left shrink-overflow" }
	pokedex2_visible := { is_pokemon() and contains(card.general_options_07, match: "Retro Card Face") and not(contains(card.general_options_07, match: "EX Pokemon")) }
	pokedex2_outline_visible := { pokedex2_visible() and is_outline() and is_not_blur() }
	pokedex2_outline_blur := { pokedex2_visible() and is_outline() and not(is_not_blur()) }
	pokedex2_two_tone_visible := { pokedex2_visible() and is_two_tone() }
	pokedex2_font := { "Humanist521BDCdn" }
	pokedex2_weight := { "normal" }
	pokedex2_style := { "normal" }
	pokedex2_size := { fun_expand_font(8) }
	pokedex2_color := { if is_wt_top() then rgb(255,255,255) else rgb(0,0,0) }

	#######Reminder text explaining what this pokemone evolved from
	evolution_left := { x_left(if contains(card.general_options_07, match: "Retro Card Face") or stage()=="Restored" then 80 else 72) }
	evolution_top := { y_top(if contains(card.general_options_07, match: "Retro Card Face") then 14 else 51) }
	evolution_width := { fun_expand_size(if contains(styling.Automated_Text_Usage, match: "Evolution Reminder")
			then if contains(stage(), match: "Stage") and contains(card.general_options_07, match: "Retro Card Face") then evo_width_1()
			else if evo_total_width()>=evo_goal() then (evo_total_width()-evo_line_width())*evo_goal()/evo_total_width() 
			else evo_goal()-evo_line_width() 
		else if contains(stage(), match: "Stage") and contains(card.general_options_07, match: "Retro Card Face") then evo_width_1() else evo_goal()) }
	evolution_size := { fun_expand_font(if contains(card.general_options_07, match: "Retro Card Face") then 8 else 6) }
	evolution_font := { if contains(card.general_options_07, match: "Retro Card Face") then "GillSans" else "Humanist521BT" }
	evolution_weight := { "bold" }
	evolution_style := { "italic" }
	evolution_align := { "bottom left shrink-overflow" }
	evolution_color := { if is_wt_top() and contains(card.general_options_07, match: "Retro Card Face") then rgb(255,255,255) else rgb(0,0,0) }
	evolution_visible := { is_pokemon() and not(stage()=="Basic") }
	evolution_outline_visible := { evolution_visible() and is_outline() and contains(card.general_options_07, match: "Retro Card Face") and is_not_blur() }
	evolution_outline_blur := { evolution_visible() and is_outline() and contains(card.general_options_07, match: "Retro Card Face") and not(is_not_blur()) }
	evolution_outline_separator := { if contains(styling.Automated_Text_Usage, match: "Evolution Reminder") then card.evolution_reminder_1 else card.evolution_text_1 }
	evolution_content_width := { if contains(styling.Automated_Text_Usage, match: "Evolution Reminder") then card_style.evolution_reminder_1.content_width else card_style.evolution_text_1.content_width }
	evolution_two_tone_visible := { evolution_visible() and is_two_tone() }
	evolution_height := { fun_expand_size(if evolution_visible() then if contains(card.general_options_07, match: "Retro Card Face") then 15 else 7 else 0) }
	evolution_rem_visible := { evolution_visible() and contains(styling.Automated_Text_Usage, match: "Evolution Reminder") }
	evolution_rem_height := { fun_expand_size(if evolution_rem_visible() then if contains(card.general_options_07, match: "Retro Card Face") then 15 else 7 else 0) }
	evolution_txt_visible := { evolution_visible() and not(contains(styling.Automated_Text_Usage, match: "Evolution Reminder")) }
	evolution_txt_height := { fun_expand_size(if evolution_txt_visible() then if contains(card.general_options_07, match: "Retro Card Face") then 15 else 7 else 0) }
	evo_left := { x_left(if contains(styling.Automated_Text_Usage, match: "Evolution Reminder")
			then if is_pokemon() and (stage()=="Restored" or contains(card.general_options_07, match: "Retro Card Face")) then 80+fun_decompress(card_style.evolution_reminder_1.content_width)*(if evo_total_width()>=evo_goal() then evo_goal()/evo_total_width() else 1) 
			else 72+fun_decompress(card_style.evolution_reminder_1.content_width)*(if evo_total_width()>=evo_goal() then evo_goal()/evo_total_width() else 1) 
			else 0) }
	evo_width := { fun_expand_size(if contains(styling.Automated_Text_Usage, match: "Evolution Reminder")
			then if evo_total_width()>=evo_goal() then evo_line_width()*evo_goal()/evo_total_width() else evo_line_width()
			else 0) }
	evo_height := { fun_expand_size(if contains(styling.Automated_Text_Usage, match: "Evolution Reminder") and is_pokemon() and not(stage()=="Basic") then if contains(card.general_options_07, match: "Retro Card Face") then 15 else 7 else 0) }
	evo_visible := { contains(styling.Automated_Text_Usage, match: "Evolution Reminder") and is_pokemon() and not(stage()=="Basic") }
	evo_outline_visible := { evo_visible() and is_outline() and contains(card.general_options_07, match: "Retro Card Face") and is_not_blur() }
	evo_outline_blur := { evo_visible() and is_outline() and contains(card.general_options_07, match: "Retro Card Face") and not(is_not_blur()) }
	evo_two_tone_visible := { evo_visible() and is_two_tone() }

	#######Reminder text above the energy symbol and pokemon trainer type line
	evorule_left := { x_left(334-evo_width_2()-(if card.card_type=="Dual-Type" and card.dual_blend_type=="Steam Siege" then 7 else 0)) }
	evorule_top := { y_top(14) }
	evorule_width := { fun_expand_size(evo_width_2()) }
	evorule_font := { "GillSans" }
	evorule_weight := { if is_pokemon() then "Bold" else "normal" }
	evorule_style := { "normal" }
	evorule_size := { fun_expand_font(7) }
	evorule_align := { "bottom right shrink-overflow" }
	evorule_color := { if is_two_tone() then rgba(0,0,0,0) else if is_wt_top() then rgb(255,255,255) else rgb(0,0,0) }
	evorule_visible := { is_pokemon() and contains(card.general_options_07, match: "Retro Card Face") }
	evorule_outline_visible := { evorule_visible() and is_outline() and is_not_blur() }
	evorule_outline_blur := { evorule_visible() and is_outline() and not(is_not_blur()) }
	evorule_outline_separator := { if contains(styling.Automated_Text_Usage, match: "Evolution Reminder") then card.evolution_reminder_2_7 else card.evolution_text_2 }
	evorule_two_tone_visible := { evorule_visible() and is_two_tone() }
	evorule_height := { fun_expand_size(if evorule_visible() then 15 else 0) }
	evorule_rem_visible := { evorule_visible() and contains(styling.Automated_Text_Usage, match: "Evolution Reminder") }
	evorule_rem_height := { fun_expand_size(if evorule_rem_visible() then 15 else 0) }
	evorule_txt_visible := { evorule_visible() and not(contains(styling.Automated_Text_Usage, match: "Evolution Reminder")) }
	evorule_txt_height := { fun_expand_size(if evorule_txt_visible() then 15 else 0) }

	#######Pokedex text entry
	pokedex1_left := { x_left(58) }
	pokedex1_top := { y_top(if contains(card.general_options_07, match: "Retro Card Face") then 287 else 259) }
	pokedex1_width := { fun_expand_size(250) }
	pokedex1_height := { fun_expand_size(if is_pokemon() and not(contains(card.art_options, match: "Full Art")) and not(contains(card.general_options_07, match: "EX Pokemon") and not(contains(card.general_options_07, match: "Retro Card Face"))) then if contains(card.general_options_07, match: "Retro Card Face") then 12 else 4 else 0) }
	pokedex1_align := { "middle center shrink-overflow" }
	pokedex1_visible := { is_pokemon() and not(contains(card.art_options, match: "Full Art")) and not(contains(card.general_options_07, match: "EX Pokemon") and not(contains(card.general_options_07, match: "Retro Card Face"))) }
	pokedex1_outline_visible := { pokedex1_visible() and is_outline() and is_not_blur() }
	pokedex1_outline_blur := { pokedex1_visible() and is_outline() and not(is_not_blur()) }
	pokedex1_two_tone_visible := { pokedex1_visible() and is_two_tone() }
	pokedex1_font := { "GillSans" }
	pokedex1_weight := { "normal" }
	pokedex1_style := { if contains(card.general_options_07, match: "Retro Card Face") then "italic" else "normal" }
	pokedex1_size := { fun_expand_font(if contains(card.general_options_07, match: "Retro Card Face") then 9 else 6) }
	pokedex1_color := { rgb(0,0,0) }

	#######Pokemon Stage Title for pokemon / Card Sub-Type for Trainers / Special Energy Sub-Bar
	title_1_left := { x_left(if is_trainer() then if contains(card.general_options_07, match: "Retro Card Face") then 272 else 238 
		else if contains(card.general_options_07, match: "Retro Card Face") and is_energy() and card.energy_type=="Special" then 268
		else if stage()=="Basic" then 31 else 33) }
	title_1_top := { y_top(if is_trainer() then if contains(card.general_options_07, match: "Retro Card Face") then 93 else 17 
		else if contains(card.general_options_07, match: "Retro Card Face") and is_energy() and card.energy_type=="Special" then 49
		else if stage()=="Basic" then 17 else 22) }
	title_1_width := { fun_expand_size(if is_trainer() then if contains(card.general_options_07, match: "Retro Card Face") then 62 else 107 
		else if contains(card.general_options_07, match: "Retro Card Face") and is_energy() and card.energy_type=="Special" then 100
		else 38) }
	title_1_font := { if contains(card.general_options_07, match: "Retro Card Face") then if is_trainer() then "Humanist521BT" else if is_energy() then "GillSans" else "Humanist521BDCdn" else "PokeXYTrainer" }
	title_1_weight := { "normal" }
	title_1_style := { if is_trainer() and not(contains(card.general_options_07, match: "Retro Card Face")) then "italic" else "normal" }
	title_1_size := { fun_expand_font(if is_trainer() then if contains(card.general_options_07, match: "Retro Card Face") then 8 else 13 else if contains(card.general_options_07, match: "Retro Card Face") and is_energy() and card.energy_type=="Special" then 8.5 else 9) }
	title_1_align := { if is_trainer() then "top right shrink-overflow" else if is_energy() then "top left" else "center bottom shrink-overflow" }
	title_1_color := { if is_pokemon() and (contains(card.general_options_07, match: "Team Plasma") or contains(card.general_options_07, match: "Team Flare") or contains(card.general_options_07, match: "White Text for Retro Stage Title")) then rgb(255,255,255) else if is_trainer() and not(contains(card.general_options_07, match: "Retro Card Face")) then card.energy_color_1 else rgb(0,0,0) }
	title_1_outline_visible := { ((is_outline() and (is_trainer() and contains(card.general_options_07, match: "Retro Card Face")) or (is_trainer() and card.trainer=="User Defined" and not(contains(card.general_options_07, match: "Retro Card Face"))))) and is_not_blur() }
	title_1_outline_blur := { ((is_outline() and (is_trainer() and contains(card.general_options_07, match: "Retro Card Face")) or (is_trainer() and card.trainer=="User Defined" and not(contains(card.general_options_07, match: "Retro Card Face"))))) and not(is_not_blur()) }
	title_1_outline_separator := { if is_trainer() and card.trainer=="User Defined" then card.title_text_1 else card.title_reminder_1_7 }
	title_1_height := { fun_expand_size(if is_trainer() then if contains(card.general_options_07, match: "Retro Card Face") then 10 else 20 else if contains(card.general_options_07, match: "Retro Card Face") and is_energy() and card.energy_type=="Special" then 15 else if is_pokemon() and contains(card.general_options_07, match: "Retro Card Face") then 10 else 0) }
	title_rem_1_visible := { (is_trainer() and contains(card.general_options_07, match: "Retro Card Face")) or (contains(card.general_options_07, match: "Retro Card Face") and is_energy() and card.energy_type=="Special") or (is_pokemon() and contains(card.general_options_07, match: "Retro Card Face") and contains(styling.Automated_Text_Usage, match: "Stage Title")) }
	title_rem_1_height := { fun_expand_size(if (is_pokemon() and contains(card.general_options_07, match: "Retro Card Face") and contains(styling.Automated_Text_Usage, match: "Stage Title")) or (is_trainer() and contains(card.general_options_07, match: "Retro Card Face")) then 10 else if (contains(card.general_options_07, match: "Retro Card Face") and is_energy() and card.energy_type=="Special") then 15 else 0) }
	title_txt_1_visible := { (is_trainer() and card.trainer=="User Defined") or (is_pokemon() and contains(card.general_options_07, match: "Retro Card Face") and not(contains(styling.Automated_Text_Usage, match: "Stage Title"))) }
	title_txt_1_height := { fun_expand_size(if is_trainer() and card.trainer=="User Defined" then if contains(card.general_options_07, match: "Retro Card Face") then 10 else 20 else if (is_pokemon() and contains(card.general_options_07, match: "Retro Card Face") and not(contains(styling.Automated_Text_Usage, match: "Stage Title"))) then 10 else 0) }

	#######Weakness/Resistance/Retreat Cost Title Lines
	weak_ov_left := { x_left(if contains(card.general_options_07, match: "Retro Card Face") then 25 else 32) }
	weak_ov_top := { y_top(if contains(card.general_options_07, match: "Retro Card Face") then 442 else 436) }
	weak_ov_width := { fun_expand_size(60) }
	weak_ov_height := { fun_expand_size(12) }
	res_ov_left := { x_left(if contains(card.general_options_07, match: "Retro Card Face") then 101 else 96) }
	res_ov_top := { y_top(if contains(card.general_options_07, match: "Retro Card Face") then 442 else 436) }
	res_ov_width := { fun_expand_size(60) }
	res_ov_height := { fun_expand_size(12) }
	ret_ov_left := { x_left(if contains(card.general_options_07, match: "Retro Card Face") then 38 else 32) }
	ret_ov_top := { y_top(if contains(card.general_options_07, match: "Retro Card Face") then 456 else 470) }
	ret_ov_width := { fun_expand_size(if contains(card.general_options_07, match: "Retro Card Face") then 32 else 70) }
	ret_ov_height := { fun_expand_size(if contains(card.general_options_07, match: "Retro Card Face") then 30 else 14) }
	ret_ov_lsoft := { if contains(card.general_options_07, match: "Retro Card Face") then 0.7 else 1 }
	wrr_ov_size := { fun_expand_font(6) }
	wrr_ov_visible := { if is_pokemon() then true else false }
	wrr_ov_outline_visible := { wrr_ov_visible() and is_outline() and is_not_blur() }
	wrr_ov_outline_blur := { wrr_ov_visible() and is_outline() and not(is_not_blur()) }
	wrr_ov_align := { if contains(card.general_options_07, match: "Retro Card Face") then "center middle" else "left middle" }
	wrr_ov_font := { "Humanist521BT" }
	wrr_ov_weight := { "bold" }
	wrr_ov_style := { "normal" }

	#######Weakness & Special Energy Color Field
	weak_left := { x_left(if is_pokemon() then if contains(card.general_options_07, match: "Retro Card Face") then 75 else 32 
		else if contains(card.general_options_07, match: "Retro Card Face") then 20 else 174) }
	weak_top := { y_top(if is_pokemon() then if contains(card.general_options_07, match: "Retro Card Face") then 436 else 441 
		else if contains(card.general_options_07, match: "Retro Card Face") then 27 else 14) }
	weak_width := { fun_expand_size(if is_energy() then if contains(card.general_options_07, match: "Retro Card Face") then 85 else 170 else 60) }
	weak_height := { fun_expand_size(if is_pokemon() then 25 else if is_energy() and card.energy_type=="Special" then 37 else 0) }
	weak_visible := { is_pokemon() or (is_energy() and card.energy_type=="Special") or is_trainer() }
	weak_outline_visible := { weak_visible() and is_outline() and is_not_blur() }
	weak_outline_blur := { weak_visible() and is_outline() and not(is_not_blur()) }
	weak_font := { "PokeTitleXY" }
	weak_weight := { "normal" }
	weak_style := { "normal" }
	weak_size := { fun_expand_font(if is_pokemon() then 10 else 18) }
	weak_symbol_font := { "pokemon-a-energy" }
	weak_symbol_size := { fun_expand_font(if contains(card.general_options_07, match: "Retro Card Face") then if is_energy() then if weakness_length()>=3 then weak_width()/fun_expand_size(weakness_length()) else 33 else if is_outline() then 16 else 18 
		else if is_pokemon() then if is_outline() then 17 else 15 else if is_outline() then 29 else 27) }
	weak_align := { if is_energy() then "middle right shrink-overflow" else "middle left shrink-overflow" }

	#######Resistance
	resist_left := { x_left(if contains(card.general_options_07, match: "Retro Card Face") then 154 else 97) }
	resist_top := { y_top(if contains(card.general_options_07, match: "Retro Card Face") then 436 else 441) }
	resist_width := { fun_expand_size(60) }
	resist_height := { fun_expand_size(if is_pokemon() then 25 else 0) }
	resist_visible := { is_pokemon() }
	resist_outline_visible := { resist_visible() and is_outline() and is_not_blur() }
	resist_outline_blur := { resist_visible() and is_outline() and not(is_not_blur()) }
	resist_font := { "PokeTitleXY" }
	resist_weight := { "normal" }
	resist_style := { "normal" }
	resist_size := { fun_expand_font(10) }
	resist_symbol_font := { "pokemon-a-energy" }
	resist_symbol_size := { fun_expand_font(if contains(card.general_options_07, match: "Retro Card Face") then if is_outline() then 20 else 18 else if is_outline() then 17 else 15) }
	resist_align := { "middle left shrink-overflow" }

	#######Retreat Cost
	retreat_left := { x_left(if contains(card.general_options_07, match: "Retro Card Face") then 75 else 73) }
	retreat_top := { y_top(if contains(card.general_options_07, match: "Retro Card Face") then 459 else 464) }
	retreat_width := { fun_expand_size(70) }
	retreat_height := { fun_expand_size(if is_pokemon() then 27 else 0) }
	retreat_visible := { is_pokemon() }
	retreat_symbol_font := { "pokemon-a-energy" }
	retreat_symbol_size := { fun_expand_font(if contains(card.general_options_07, match: "Retro Card Face") then if is_outline() then 20 else 18 else if is_outline() then 17 else 15) }
	retreat_align := { "middle left shrink-overflow" }

	#######Pokemon EX Rule Title
	title_2_left := { x_left(if contains(card.general_options_07, match: "Retro Card Face") then 202 else 189) }
	title_2_top := { y_top(if contains(card.general_options_07, match: "Retro Card Face") then 440 else 436) }
	title_2_width := { fun_expand_size(if contains(card.general_options_07, match: "Retro Card Face") then 128 else 88) }
	title_2_font := { if contains(card.general_options_07, match: "Retro Card Face") then "Humanist521EBD" else "Humanist521BDCdn" }
	title_2_weight := { "bold" }
	title_2_style := { "normal" }
	title_2_size := { fun_expand_font(7) }
	title_2_align := { if contains(card.general_options_07, match: "Retro Card Face") then "center bottom shrink-overflow" else "left bottom shrink-overflow" }
	title_2_visible := { is_pokemon() and contains(card.general_options_07, match: "EX Pokemon") }
	title_2_outline_visible := { false }
	title_2_outline_blur := { false }
	title_2_outline_separator := { if contains(styling.Automated_Text_Usage, match: "EX Rule Reminder") then card.title_reminder_2_7 else card.title_text_2 }
	title_2_height := { fun_expand_size(if title_2_visible() then 10 else 0) }
	title_rem_2_visible := { title_2_visible() and contains(styling.Automated_Text_Usage, match: "EX Rule Reminder") }
	title_rem_2_height := { fun_expand_size(if title_rem_2_visible() then 10 else 0) }
	title_txt_2_visible := { title_2_visible() and not(contains(styling.Automated_Text_Usage, match: "EX Rule Reminder")) }
	title_txt_2_height := { fun_expand_size(if title_txt_2_visible() then 10 else 0) }
	title_2_color := {  if contains(card.general_options_07, match: "Retro Card Face") then rgb(188,155,42) else rgb(233,185,0) }

	#######Multi-line reminder text explaining the EX-Pokemon rule or the trainer play rules
	special_rule_left := { x_left(if is_pokemon() then if contains(card.general_options_07, match: "Retro Card Face") then 202 else 179 else if contains(card.general_options_07, match: "Retro Card Face") then 56 else 43) }
	special_rule_top := { y_top(if is_pokemon() then if contains(card.general_options_07, match: "Retro Card Face") then 451 else 449 
		else if contains(card.general_options_07, match: "Retro Card Face") then 450-special_rule_1_lines()*12 
		else 443) }
	special_rule_width := { fun_expand_size(if is_pokemon() then if contains(card.general_options_07, match: "Retro Card Face") then 128 else 142 else if contains(card.general_options_07, match: "Retro Card Face") then 257 else 282) }
	special_rule_align := { if is_trainer() and contains(card.general_options_07, match: "Retro Card Face") then "top left" else "middle left" }
	special_rule_font := { if is_pokemon() then "Humanist521BDCdn" else "Humanist521BT" }
	special_rule_weight := { "normal" }
	special_rule_style := { "normal" }
	special_rule_size := { fun_expand_font(if is_pokemon() then 5.5 else if is_trainer() and not(contains(card.general_options_07, match: "Retro Card Face")) then 7.5 else 7) }
	special_rule_lh_soft := { if is_pokemon() then 1 else if is_trainer() and contains(card.general_options_07, match: "Retro Card Face") then 1 else 0.85 }
	special_rule_color := { rgb(0,0,0) }
	special_rule_visible := { (is_pokemon() and contains(card.general_options_07, match: "EX Pokemon")) or is_trainer() }
	special_rule_outline_visible := { special_rule_visible() and (is_outline() or is_pokemon()) and is_not_blur() }
	special_rule_outline_blur := { special_rule_visible() and (is_outline() or is_pokemon()) and not(is_not_blur()) }
	special_rule_outline_separator := { if (is_pokemon() and contains(styling.Automated_Text_Usage, match: "EX Rule Reminder")) or (is_trainer() and contains(styling.Automated_Text_Usage, match: "Trainer Play Rule Reminder") and not(card.trainer=="User Defined")) then card.special_rule_reminder_1_7 else card.special_rule_reminder_1_7 }
	special_rule_height := { fun_expand_size(if is_pokemon() and contains(card.general_options_07, match: "EX Pokemon") then if contains(card.general_options_07, match: "Retro Card Face") then 25 else 27 else if is_trainer() then if contains(card.general_options_07, match: "Retro Card Face") then special_rule_1_lines()*12 else 32 else 0) }
	special_rule_rem_visible := { (is_pokemon() and contains(card.general_options_07, match: "EX Pokemon") and contains(styling.Automated_Text_Usage, match: "EX Rule Reminder")) or
		(is_trainer() and contains(styling.Automated_Text_Usage, match: "Trainer Play Rule Reminder") and not(card.trainer=="User Defined")) }
	special_rule_rem_height := { fun_expand_size(if (is_pokemon() and contains(card.general_options_07, match: "EX Pokemon") and contains(styling.Automated_Text_Usage, match: "EX Rule Reminder")) then if contains(card.general_options_07, match: "Retro Card Face") then 25 else 27 
		else if (is_trainer() and contains(styling.Automated_Text_Usage, match: "Trainer Play Rule Reminder") and not(card.trainer=="User Defined")) then if contains(card.general_options_07, match: "Retro Card Face") then special_rule_1_lines()*12 else 32 
		else 0) }
	special_rule_txt_visible := { (is_pokemon() and contains(card.general_options_07, match: "EX Pokemon") and not(contains(styling.Automated_Text_Usage, match: "EX Rule Reminder"))) or
		(is_trainer() and (not(contains(styling.Automated_Text_Usage, match: "Trainer Play Rule Reminder"))) or card.trainer=="User Defined") }
	special_rule_txt_height := { fun_expand_size(if (is_pokemon() and contains(card.general_options_07, match: "EX Pokemon") and not(contains(styling.Automated_Text_Usage, match: "EX Rule Reminder"))) then if contains(card.general_options_07, match: "Retro Card Face") then 25 else 27 
		else if (is_trainer() and (not(contains(styling.Automated_Text_Usage, match: "Trainer Play Rule Reminder"))) or card.trainer=="User Defined") then if contains(card.general_options_07, match: "Retro Card Face") then special_rule_1_lines()*12 else 32 
		else 0) }
	special_rule_mask := { if is_pokemon() and not(contains(card.general_options_07, match: "Retro Card Face")) then "mask-ex-remder.png" else "/pokemon-b-common.mse-include/mask-blank.png" }
	special_rule_pad_left := { fun_expand_size(if is_pokemon() then 0.5 else 2.5) }
	special_rule_pad_bottom := { fun_expand_size(if is_pokemon() then 0.5 else 2.5) }
	special_rule_pad_right := { fun_expand_size(if is_pokemon() then 1 else 1.5) }
	special_rule_lh_hard := { if is_pokemon() then 1 else if is_trainer() and contains(card.general_options_07, match: "Retro Card Face") then 1 else 0.85 }
	special_rule_content_height := { if special_rule_txt_visible() then card_style.special_rule_text_1.content_height else card_style.special_rule_reminder_1_7.content_height }

	#######Pokemon Mega Rule Title
	title_3_left := { x_left(if contains(card.general_options_07, match: "Retro Card Face") then 31 else 67) }
	title_3_top := { y_top(if contains(card.general_options_07, match: "Retro Card Face") then 322 else 310) }
	title_3_width := { fun_expand_size(if contains(card.general_options_07, match: "Retro Card Face") then 304 else 114) }
	title_3_font := { "Humanist521EBD" }
	title_3_weight := { "bold" }
	title_3_style := { "normal" }
	title_3_size := { fun_expand_font(if contains(card.general_options_07, match: "Retro Card Face") then 8.5 else 7.5) }
	title_3_align := { if contains(card.general_options_07, match: "Retro Card Face") then "center bottom shrink-overflow" else "left bottom shrink-overflow" }
	title_3_visible := { is_pokemon() and contains(card.general_options_07, match: "EX Pokemon") and (contains(stage(), match: "Stage") or (stage()=="Restored" and contains(card.general_options_07, match: "Mega Reminder Box for EX Restored"))) }
	title_3_outline_visible := { false }
	title_3_outline_blur := { false }
	title_3_outline_separator := { if contains(styling.Automated_Text_Usage, match: "Mega Rule Reminder") then card.title_reminder_3_7 else card.title_text_3 }
	title_3_height := { fun_expand_size(if title_3_visible() then 10 else 0) }
	title_rem_3_visible := { title_3_visible() and contains(styling.Automated_Text_Usage, match: "Mega Rule Reminder") }
	title_rem_3_height := { fun_expand_size(if title_rem_3_visible() then 10 else 0) }
	title_txt_3_visible := { title_3_visible() and not(contains(styling.Automated_Text_Usage, match: "Mega Rule Reminder")) }
	title_txt_3_height := { fun_expand_size(if title_txt_3_visible() then 10 else 0) }
	title_3_color := { if contains(card.general_options_07, match: "Retro Card Face") then rgb(188,155,42) else rgb(233,185,0) }

	#######Multi-line reminder text explaining the Mega-Pokemon rule or the Tool Rule
	special_rule_2_left := { x_left(if is_pokemon() then if contains(card.general_options_07, match: "Retro Card Face") then 31 else 62 else if contains(card.general_options_07, match: "Retro Card Face") then 56 else 29) }
	special_rule_2_top := { y_top(if is_pokemon() then if contains(card.general_options_07, match: "Retro Card Face") then 333 else 315 else if contains(card.general_options_07, match: "Retro Card Face") then 315 else 256) }
	special_rule_2_width := { fun_expand_size(if is_pokemon() then if contains(card.general_options_07, match: "Retro Card Face") then 304 else 254 else if contains(card.general_options_07, match: "Retro Card Face") and is_trainer() then 257 else 313) }
	special_rule_2_align := { if is_trainer() then "top left" else if contains(card.general_options_07, match: "Retro Card Face") then "center middle" else "middle left" }
	special_rule_2_font := { if is_pokemon() then "Humanist521BDCdn" else if contains(card.general_options_07, match: "Retro Card Face") then "PokeRuleClassic" else "Humanist521BT" }
	special_rule_2_weight := { "normal" }
	special_rule_2_style := { "normal" }
	special_rule_2_size := { fun_expand_font(if is_pokemon() then 7 else if is_trainer() and contains(card.general_options_07, match: "Retro Card Face") then 7 else if contains(card.general_options_07, match: "Hyper Flare Tool Card") then 6 else 7.5) }
	special_rule_2_lh_soft := { if is_pokemon() then 0.9 else if contains(card.general_options_07, match: "Retro Card Face") then 1 else if contains(card.general_options_07, match: "Hyper Flare Tool Card") then 1.2 else 1 }
	special_rule_2_lh_hard := { if is_pokemon() then 0.9 else if contains(card.general_options_07, match: "Retro Card Face") then 1 else if contains(card.general_options_07, match: "Hyper Flare Tool Card") then 1.2 else 1 }
	special_rule_2_color := { rgb(0,0,0) }
	special_rule_2_visible := { (is_trainer() and card.trainer=="Tool") or 
		(is_pokemon() and contains(card.general_options_07, match: "EX Pokemon") and (contains(stage(), match: "Stage") or (stage()=="Restored" and contains(card.general_options_07, match: "Mega Reminder Box for EX Restored")))) }
	special_rule_2_outline_visible := { special_rule_2_visible() and (is_outline() or is_pokemon()) and is_not_blur() }
	special_rule_2_outline_blur := { special_rule_2_visible() and (is_outline() or is_pokemon()) and not(is_not_blur()) }
	special_rule_2_outline_separator := { if (is_pokemon() and contains(styling.Automated_Text_Usage, match: "Mega Rule Reminder")) or (is_trainer() and contains(styling.Automated_Text_Usage, match: "Tool Play Rule Reminder") and card.trainer=="Tool") then card.special_rule_reminder_2_7 else card.special_rule_reminder_2_7 }
	special_rule_2_height := { fun_expand_size(if special_rule_2_visible() then if is_trainer() 
		then if contains(card.general_options_07, match: "Retro Card Face") then special_rule_2_lines()*12 
		else 36 else if contains(card.general_options_07, match: "Retro Card Face") then 18 else 26 else 0) }
	special_rule_rem_2_visible := { (is_pokemon() and contains(card.general_options_07, match: "EX Pokemon") and contains(styling.Automated_Text_Usage, match: "Mega Rule Reminder") and (contains(stage(), match: "Stage") or (stage()=="Restored" and contains(card.general_options_07, match: "Mega Reminder Box for EX Restored")))) or
		(is_trainer() and contains(styling.Automated_Text_Usage, match: "Tool Play Rule Reminder") and card.trainer=="Tool") }
	special_rule_rem_2_height := { fun_expand_size(if special_rule_rem_2_visible() then if is_pokemon() then if contains(card.general_options_07, match: "Retro Card Face") then 18 else 26 else if contains(card.general_options_07, match: "Retro Card Face") then special_rule_2_lines()*12  else 36 else 0) }
	special_rule_txt_2_visible := { (is_pokemon() and contains(card.general_options_07, match: "EX Pokemon") and not(contains(styling.Automated_Text_Usage, match: "Mega Rule Reminder")) and (contains(stage(), match: "Stage") or (stage()=="Restored" and contains(card.general_options_07, match: "Mega Reminder Box for EX Restored")))) or
		(is_trainer() and not(contains(styling.Automated_Text_Usage, match: "Tool Play Rule Reminder")) and card.trainer=="Tool") }
	special_rule_txt_2_height := { fun_expand_size(if special_rule_txt_2_visible() then if is_pokemon() then if contains(card.general_options_07, match: "Retro Card Face") then 18 else 26 else if contains(card.general_options_07, match: "Retro Card Face") then special_rule_2_lines()*12 else 36 else 0) }
	special_rule_2_mask := { if is_trainer() and card.trainer=="Tool" and not(contains(card.general_options_07, match: "Retro Card Face")) then "mask-tool-remder.png" 
		else if is_pokemon() and not(contains(card.general_options_07, match: "Retro Card Face")) then "mask-mega-remder.png" else "/pokemon-b-common.mse-include/mask-blank.png" }
	special_rule_2_pad_left := { fun_expand_size(if is_pokemon() then 0.5 else 0) }
	special_rule_2_pad_bottom := { fun_expand_size(if is_pokemon() then 3.5 else 0) }
	special_rule_2_pad_right := { fun_expand_size(if is_pokemon() then 1.5 else 0) }
	special_rule_2_pad_top := { fun_expand_size(if not(contains(card.general_options_07, match: "Retro Card Face")) and is_trainer() then 9) }
	special_rule_2_content_height := { if special_rule_txt_2_visible() then card_style.special_rule_text_2.content_height else card_style.special_rule_reminder_2_7.content_height }

	#######Ancient Ability Title
	ability_1_left := { x_left(if contains(card.general_options_07, match: "Retro Card Face") then 36 else if stage()=="Basic" then 58 else 62) }
	ability_1_top := { y_top(if contains(card.general_options_07, match: "Retro Card Face") then 73 else if stage()=="Basic" then 56 else 60) }
	ability_1_width := { fun_expand_size(if stage()=="Basic" then 54 else 50) }
	ability_1_size := { fun_expand_font(7.5) }
	ability_1_font := { "Humanist521BT" }
	ability_1_weight := { "bold" }
	ability_1_style := { "italic" }
	ability_1_align := { "middle center shrink-overflow" }
	ability_1_color := { rgb(255,255,255) }
	ability_1_visible := { is_pokemon() and contains(card.general_options_07, match: "Pokemon Ancient Ability") }
	ability_1_outline_visible := { false }
	ability_1_outline_blur := { false }
	ability_1_outline_separator := { card.ability_text_1 }
	ability_1_height := { fun_expand_size(if is_pokemon() and contains(card.general_options_07, match: "Pokemon Ancient Ability") then 24 else 0) }
	ability_txt_1_visible := { ability_1_visible() }
	ability_txt_1_height := { ability_1_height() }

	#######Ancient Ability Rule Text "ability rule text 1"
	ability_rule_1_left := { x_left(if contains(card.general_options_07, match: "Retro Card Face") then 102 else 124) }
	ability_rule_1_top := { y_top(if contains(card.general_options_07, match: "Retro Card Face") then 73 else if stage()=="Basic" then 56 else 60) }
	ability_rule_1_width := { fun_expand_size(212) }
	ability_rule_1_height := { fun_expand_size(if is_pokemon() and contains(card.general_options_07, match: "Pokemon Ancient Ability") then 24 else 0) }
	ability_rule_1_visible := { is_pokemon() and contains(card.general_options_07, match: "Pokemon Ancient Ability") }
	ability_rule_1_outline_visible := { false }
	ability_rule_1_outline_blur := { false }
	ability_rule_1_align := { "middle left shrink-overflow" }
	ability_rule_1_font := { "Humanist521BT" }
	ability_rule_1_color := { rgb(255,255,255) }
	ability_rule_1_weight := { "normal" }
	ability_rule_1_style := { "normal" }
	ability_rule_1_size := { fun_expand_font(7) }
	ability_rule_1_lh_hard := { 0.7 }
	ability_rule_1_lh_soft := { 0.7 }

	######Flavor Text
	flavor_left := { x_left(if contains(card.general_options_07, match: "Retro Card Face") then 201 else 164) }
	flavor_top := { y_top(436) }
	flavor_width := { fun_expand_size(if contains(card.general_options_07, match: "Retro Card Face") then if contains(card.general_options_07, match: "Team Magma") or contains(card.general_options_07, match: "Team Aqua") or (contains(card.general_options_07, match: "User Defined Team") and contains(card.general_options_07, match: "Team Gym Leader Image")) then 92 else 129 
		else 173) }
	flavor_height := { fun_expand_size(if is_pokemon() and not(contains(card.general_options_07, match: "EX Pokemon")) then if contains(card.general_options_07, match: "Retro Card Face") then 38 else 40 else 0) }
	flavor_visible := { is_pokemon() and not(contains(card.general_options_07, match: "EX Pokemon")) }
	flavor_outline_visible := { flavor_visible() and is_outline() and is_not_blur() }
	flavor_outline_blur := { flavor_visible() and is_outline() and not(is_not_blur()) }
	flavor_align := { "top left shrink-overflow" }
	flavor_font := { "Sanvito Light Caption" }
	flavor_weight := { "bold" }
	flavor_style := { "italic" }
	flavor_size := { fun_expand_font(7.2) }
	flavor_pad_left := { fun_expand_size(2) }
	flavor_lh_soft := { 0.8 }
	flavor_mask := { if contains(card.general_options_07, match: "Retro Card Face") then "/pokemon-b-common.mse-include/mask-blank.png"
		else if not(contains(card.art_options, match: "Card Full Art")) and (contains(card.general_options_07, match: "Team Aqua") or contains(card.general_options_07, match: "Team Magma") or contains(card.general_options_07, match: "User Defined Team")) then "mask-p-g7-flavor-team.png" else "mask-p-g7-flavor.png" }

	#######Artist
	ill_left := { x_left(if not(contains(card.general_options_07, match: "Retro Card Face")) then 163 else 21) }
	ill_top := { y_top(if contains(card.general_options_07, match: "Retro Card Face") then 486 else if is_energy() then 486 else 485) }
	ill_width := { fun_expand_size(105) }
	ill_height := { fun_expand_size(if is_energy() and card.energy_type=="Basic" and not(basic_energy_suffix()=="Special") then 0 else 9) }
	ill_size := { fun_expand_font(if contains(card.general_options_07, match: "Retro Card Face") then 6 else 5.5) }
	ill_font := { "Humanist521BT" }
	ill_weight := { "bold" }
	ill_style := { if contains(card.general_options_07, match: "Retro Card Face") then "normal" else "italic" }
	ill_align := { if contains(card.general_options_07, match: "Retro Card Face") then "bottom left" else "bottom right" }
	ill_outline_visible := { is_outline() and is_not_blur() }
	ill_outline_blur := { is_outline() and not(is_not_blur()) }
	ill_outline_separator := { if contains(card.text_options_3, match: "Use Primary Set Artist") then set.artist else card.illustrator }

	#######Copyright
	copy_left := { x_left(if contains(card.general_options_07, match: "Retro Card Face") then if (card.energy_type=="basic energy" and is_energy()) then 18 else 158 else if is_energy() then 22 else 20 ) }
	copy_top := { y_top(if contains(card.general_options_07, match: "Retro Card Face") then 486 else 486) }
	copy_width := { fun_expand_size(58) }
	copy_height := { fun_expand_size(if contains(card.general_options_07, match: "Retro Card Face") then 9 else 6) }
	copy_size := { fun_expand_font(5) }
	copy_align := { "bottom left" }
	copy_font := { "Humanist521BT" }
	copy_weight := { "bold" }
	copy_style := { "normal" }
	copy_outline_visible := { is_outline() and contains(set.visibility_options, match: "Visible Copyright on all cards") and is_not_blur() }
	copy_outline_blur := { is_outline() and contains(set.visibility_options, match: "Visible Copyright on all cards") and not(is_not_blur()) }
	copy_outline_separator := { if contains(card.text_options_3, match: "Use Primary Set Artist") then set.copyright else card.copyright }

	#######Card Number
	card_no_left := { x_left(if contains(card.general_options_07, match: "Retro Card Face") then 276 else 270) }
	card_no_top := { y_top(if contains(card.general_options_07, match: "Retro Card Face") then 488 else 485) }
	card_no_width := { fun_expand_size(44) }
	card_no_height := { fun_expand_size(9) }
	card_no_font := { "Humanist521BT" }
	card_no_weight := { "bold" }
	card_no_style := { "normal" }
	card_no_size := { fun_expand_font(7) }
	card_no_align := { "bottom right" }
	card_no_outline_visible := { is_outline() and contains(set.visibility_options, match: "Visible Card Numbers on all cards") and is_not_blur() }
	card_no_outline_blur := { is_outline() and contains(set.visibility_options, match: "Visible Card Numbers on all cards") and not(is_not_blur()) }

	#######Rules text for trainers and energy
	rule_np_1_left := { x_left(if contains(card.general_options_07, match: "Retro Card Face") then if is_energy() then 29 else if card.trainer=="Stadium" and contains(card.general_options_07, match: "Stadium Cards Split Top & Bottom") then 48 else 56  else if is_trainer() then 48 else 29) }
	rule_np_1_top := { y_top(if contains(card.general_options_07, match: "Retro Card Face") then if is_energy() then top_np() else if is_trainer() and card.trainer=="Stadium" and contains(card.general_options_07, match: "Stadium Cards Split Top & Bottom") then 259 else if card.trainer=="Tool" then 355 else 320 else if is_trainer() then if card.trainer=="Tool" then 297 else if card.trainer=="Stadium" and contains(card.general_options_07, match: "Stadium Cards Split Top & Bottom") then 259 else 274 else 359) }
	rule_np_1_width := { fun_expand_size(if is_trainer() then if contains(card.general_options_07, match: "Retro Card Face") and not(card.trainer=="Stadium" and contains(card.general_options_07, match: "Stadium Cards Split Top & Bottom")) then 254 else 269 else 308) }
	rule_np_1_height := { fun_expand_size(if contains(card.general_options_07, match: "Retro Card Face") then if is_energy() then 485-top_np() else if is_trainer() then if card.trainer=="Tool" then 68 else if card.trainer=="Stadium" and contains(card.general_options_07, match: "Stadium Cards Split Top & Bottom") then 150 else 105 else 0 else if is_pokemon() or (is_energy() and not(card.energy_type=="Special")) then 0 else if is_trainer() then if card.trainer=="Stadium" and contains(card.general_options_07, match: "Stadium Cards Split Top & Bottom") then 170 else if card.trainer=="Tool" then if contains(card.general_options_07, match: "Attack Field in Trainer") then 94-16*rule_line_1() else 135 else 160 else 110) }
	rule_np_1_visible := { (is_energy() and card.energy_type=="Special") or is_trainer() }
	rule_np_1_size := { fun_expand_font(if contains(card.general_options_07, match: "Retro Card Face") then if is_energy() then 11 else if not(card.trainer=="Stadium" and contains(card.general_options_07, match: "Stadium Cards Split Top & Bottom")) then 12.5 else 10 else 10) }
	rule_np_1_align := { if is_energy() then "left top" else if is_trainer() and card.trainer=="Stadium" and contains(card.general_options_07, match: "Stadium Cards Split Top & Bottom") then "left bottom" else if contains(card.general_options_07, match: "Retro Card Face") then "left justify top" else if is_trainer() and card.trainer=="Tool" and contains(card.general_options_07, match: "Attack Field in Trainer") then "left top" else "left middle" }
	rule_np_1_font := { if is_trainer() and not(card.trainer=="Stadium" and contains(card.general_options_07, match: "Stadium Cards Split Top & Bottom")) and contains(card.general_options_07, match: "Retro Card Face") then "Humanist521EBD" else "Humanist521BT" }
	rule_np_1_outline_visible := { rule_np_1_visible() and is_outline() and is_not_blur() }
	rule_np_1_outline_blur := { rule_np_1_visible() and is_outline() and not(is_not_blur()) }
	rule_np_1_weight := { "normal" }
	rule_np_1_style := { "normal" }
	rule_np_1_symbol_font := { "pokemon-a-rule" }
	rule_np_1_symbol_size := { fun_expand_font(20) }
	rule_np_1_lh_hard := { if is_trainer() then 2.1 else 1.4 }
	rule_np_1_lh_soft := { if is_energy() then 0.8 else 1 }

	#######Inverted Rules text for split stadiums
	rule_np_2_left := { x_left(317) }
	rule_np_2_top := { y_top(259) }
	rule_np_2_width := { fun_expand_size(269) }
	rule_np_2_height := { fun_expand_size(if is_trainer() and card.trainer=="Stadium" and contains(card.general_options_07, match: "Stadium Cards Split Top & Bottom") then if contains(card.general_options_07, match: "Retro Card Face") then 150 else 170 else 0) }
	rule_np_2_visible := { is_trainer() and card.trainer=="Stadium" and contains(card.general_options_07, match: "Stadium Cards Split Top & Bottom") }
	rule_np_2_outline_visible := { rule_np_2_visible() and is_outline() and is_not_blur() }
	rule_np_2_outline_blur := { rule_np_2_visible() and is_outline() and not(is_not_blur()) }
	rule_np_2_angle := { 180 }
	rule_np_2_font := { "Humanist521BT" }
	rule_np_2_weight := { "normal" }
	rule_np_2_style := { "normal" }
	rule_np_2_size := { fun_expand_font(if is_energy() then 9 else if is_trainer() then 10 else 10) }
	rule_np_2_symbol_font := { "pokemon-a-rule" }
	rule_np_2_symbol_size := { fun_expand_font(20) }
	rule_np_2_align := { if is_trainer() and card.trainer=="Stadium" and contains(card.general_options_07, match: "Stadium Cards Split Top & Bottom") then "left bottom" else "left middle" }
	rule_np_2_lh_hard := { 2.1 }

	#######Attack Costs
	#cost_1_left := { x_left(if is_pokemon() then 24 else 35) }
	#cost_1_top := { y_top(top_height()+1) }
	#cost_1_width := { fun_expand_size(46) }
	#cost_1_height := { fun_expand_size(if is_pokemon() and not(is_ability_classic_1()) then divider_height_1()-top_height() else 0) }
	#cost_1_visible := { if is_pokemon() and not(is_ability_classic_1()) then true else false }
	#cost_2_left := { x_left(24) }
	#cost_2_top := { y_top(divider_height_1()+1) }
	#cost_2_width := { fun_expand_size(46) }
	#cost_2_height := { fun_expand_size(if is_pokemon() and not(is_ability_classic_2()) then divider_height_2()-divider_height_1() else 0) }
	#cost_2_visible := { if is_pokemon() and not(is_ability_classic_2()) then true else false }
	#cost_3_left := { x_left(24) }
	#cost_3_top := { y_top(divider_height_2()+1) }
	#cost_3_width := { fun_expand_size(46) }
	#cost_3_height := { fun_expand_size(if is_pokemon() and not(is_ability_classic_3()) and attack_no()>=2 then bottom_height()-divider_height_2() else 0) }
	#cost_3_visible := { if is_pokemon() and not(is_ability_classic_3()) and attack_no()>=2 then true else false }
	#cost_align := { "middle center" }
	#cost_symbol_font := { "pokemon-a-energy" }
	#cost_symbol_size := { fun_expand_size(21) }

	cost_1_left := { x_left(if is_pokemon() then 28 else 48) }
	cost_1_top := { y_top(if is_pokemon() then top_height()+ex_height() else if is_trainer() and contains(card.general_options_07, match: "Attack Field in Trainer") and card.trainer=="Tool" then 392-16*rule_line_1() else 0) }
	cost_1_width := { fun_expand_size(if (is_pokemon() and contains(card.general_options_07, match: "EX Pokemon") and not(stage()=="Basic")) or (is_trainer() and contains(card.general_options_07, match: "Attack Field in Trainer") and card.trainer=="Tool") then if card_style.cost_new_1.content_width>=fun_expand_size(91) then 115 else if card_style.cost_new_1.content_width>=fun_expand_size(72) then 91 else 72 else if cost_width()>=fun_expand_size(91) then 115 else if cost_width()>=fun_expand_size(72) then 91 else 72) }
	cost_1_height := { fun_expand_size(0) }
	cost_1_visible := { false }
	#cost_1_height := { fun_expand_size(if is_pokemon() then 23 else if is_trainer() and contains(card.general_options_07, match: "Attack Field in Trainer") and card.trainer=="Tool" then 23 else 0) }
	#cost_1_visible := { is_pokemon() or (is_trainer() and contains(card.general_options_07, match: "Attack Field in Trainer") and card.trainer=="Tool") }
	cost_2_left := { x_left(28) }
	cost_2_top := { y_top(if is_pokemon() then if attack_no_g7()==1 then bottom_rule()-23 else middle_height()+ex_height()) }
	cost_2_width := { fun_expand_size(if cost_width()>=fun_expand_size(91) then 115 else if cost_width()>=fun_expand_size(72) then 91 else 72) }
	cost_2_height := { fun_expand_size(0) }
	cost_2_visible := { false }
	#cost_2_height := { fun_expand_size(if is_pokemon() and not(contains(card.general_options_07, match: "EX Pokemon") and not(stage()=="Basic")) then 23 else 0) }
	#cost_2_visible := { is_pokemon() and not(contains(card.general_options_07, match: "EX Pokemon") and not(stage()=="Basic")) }
	cost_3_left := { x_left(28) }
	cost_3_top := { y_top( if attack_no_g7()<=2 then bottom_rule()-8 else bottom_height()) }
	cost_3_width := { fun_expand_size(if cost_width()>=fun_expand_size(91) then 115 else if cost_width()>=fun_expand_size(72) then 91 else 72) }
	cost_3_height := { fun_expand_size(0) }
	cost_3_visible := { false }
	#cost_3_height := { fun_expand_size(if is_pokemon() and not(attack_no_g7()==1 or (contains(card.general_options_07, match: "EX Pokemon") and not(stage()=="Basic"))) then if attack_no_g7()==2 then 8 else 23) }
	#cost_3_visible := { is_pokemon() and attack_no_g7()>=2 and not(contains(card.general_options_07, match: "EX Pokemon") and not(stage()=="Basic")) }
	cost_align := { "bottom left" }
	cost_symbol_font := { "pokemon-a-energy" }
	cost_symbol_size := { fun_expand_size(19) }

	##########Poke-Power / Poke-Body Titles
	#attack_1_left := { x_left(153) }
	#attack_1_top := { y_top(if is_pokemon() then divider_height_2() else if is_trainer() and card.trainer=="Tool" then 290+fun_decompress(special_rule_content_height()) else 0) }
	#attack_1_width := { fun_expand_size(155) }
	#attack_1_height := { fun_expand_size(if is_ability_classic_1() and (is_pokemon() or (is_trainer() and card.trainer=="Tool")) then 23 else 0) }
	#attack_1_visible := { if is_ability_classic_1() and (is_pokemon() or (is_trainer() and card.trainer=="Tool")) then true else false }
	#attack_1_outline_visible := { attack_1_visible() and is_outline() }
	#attack_2_left := { x_left(153) }
	#attack_2_top := { y_top(divider_height_1()) }
	#attack_2_width := { fun_expand_size(155) }
	#attack_2_height := { fun_expand_size(if is_ability_classic_2() and is_pokemon() and not(stage()=="Baby") then 23 else 0) }
	#attack_2_visible := { if is_ability_classic_2() and is_pokemon() and not(stage()=="Baby") then true else false }
	#attack_2_outline_visible := { attack_2_visible() and is_outline() }
	#attack_3_left := { x_left(153) }
	#attack_3_top := { y_top(top_height()) }
	#attack_3_width := { fun_expand_size(155) }
	#attack_3_height := { fun_expand_size(if is_ability_classic_3() and is_pokemon() and not(stage()=="Baby") and attack_no()>=2 then 23 else 0) }
	#attack_3_visible := { if is_ability_classic_3() and is_pokemon() and not(stage()=="Baby") and attack_no()>=2 then true else false }
	#attack_3_outline_visible := { attack_3_visible() and is_outline() }
	#attack_align := { "middle center" }
	#attack_font := { "GillSans" }
	#attack_weight := { "bold" }
	#attack_style := { "normal" }
	#attack_size := { fun_expand_font(11) }
	#attack_color := { ability_color() }

	attack_1_left := { x_left(if is_pokemon() then if contains(card.general_options_07, match: "EX Pokemon") and not(stage()=="Basic") then if card_style.cost_new_1.content_width>=fun_expand_size(91) then 144 else if card_style.cost_new_1.content_width>=fun_expand_size(72) then 120 else 101 else if cost_width()>=fun_expand_size(91) then 144 else if cost_width()>=fun_expand_size(72) then 120 else 101
			else if is_trainer() and contains(card.general_options_07, match: "Attack Field in Trainer") and card.trainer=="Tool" then if card_style.cost_new_1.content_width>=fun_expand_size(91) then 164 else if card_style.cost_new_1.content_width>=fun_expand_size(72) then 140 else 121 else 0) }
	attack_1_top := { y_top(if is_pokemon() then top_height()+2+ex_height()else if is_trainer() and contains(card.general_options_07, match: "Attack Field in Trainer") and card.trainer=="Tool" then 392-16*rule_line_1() else 0) }
	attack_1_width := { fun_expand_size(if is_pokemon() then if contains(card.general_options_07, match: "EX Pokemon") and not(stage()=="Basic") then if card_style.cost_new_1.content_width>=fun_expand_size(91) then 152 else if card_style.cost_new_1.content_width>=fun_expand_size(72) then 176 else 195 else if cost_width()>=fun_expand_size(91) then 152 else if cost_width()>=fun_expand_size(72) then 176 else 195
		else if is_trainer() and contains(card.general_options_07, match: "Attack Field in Trainer") and card.trainer=="Tool" then if card_style.cost_new_1.content_width>=fun_expand_size(91) then 117 else if card_style.cost_new_1.content_width>=fun_expand_size(72) then 141 else 160 else 0) }
	attack_1_height := { fun_expand_size(0) }
	attack_1_visible := { false }
	#attack_1_height := { fun_expand_size(if is_pokemon() then 23 else if is_trainer() and contains(card.general_options_07, match: "Attack Field in Trainer") and card.trainer=="Tool" then 23 else 0) }
	#attack_1_visible := { if is_pokemon() then true else if is_trainer() and contains(card.general_options_07, match: "Attack Field in Trainer") and card.trainer=="Tool" then true else false }
	attack_1_outline_visible := { attack_1_visible() and is_outline() and is_not_blur() }
	attack_1_outline_blur := { attack_1_visible() and is_outline() and not(is_not_blur()) }
	attack_1_color := { if is_ability_1() then ability_color() else if is_two_tone() then rgba(0,0,0,0) else if is_wt_text() then rgb(255,255,255) else rgb(0,0,0) }
	attack_2_left := { x_left(if cost_width()>=fun_expand_size(91) then 144 else if cost_width()>=fun_expand_size(72) then 120 else 101) }
	attack_2_top := { y_top(if attack_no_g7()==1 then bottom_rule()-23 else middle_height()-1+ex_height()) }
	attack_2_width := { fun_expand_size(if cost_width()>=fun_expand_size(91) then 152 else if cost_width()>=fun_expand_size(72) then 176 else 195) }
	attack_2_height := { fun_expand_size(0) }
	attack_2_visible := { false }
	#attack_2_height := { fun_expand_size(if is_pokemon() then if contains(card.general_options_07, match: "EX Pokemon") and not(stage()=="Basic") then 0 else 23 else 0) }
	#attack_2_visible := { if is_pokemon() and not(contains(card.general_options_07, match: "EX Pokemon") and not(stage()=="Basic")) then true else false }
	attack_2_outline_visible := { attack_2_visible() and is_outline() and is_not_blur() }
	attack_2_outline_blur := { attack_2_visible() and is_outline() and not(is_not_blur()) }
	attack_2_color := { if is_ability_2() then ability_color() else if is_two_tone() then rgba(0,0,0,0) else if is_wt_text() then rgb(255,255,255) else rgb(0,0,0) }
	attack_3_left := { x_left(if cost_width()>=fun_expand_size(91) then 144 else if cost_width()>=fun_expand_size(72) then 120 else 101) }
	attack_3_top := { y_top(if attack_no_g7()<=2 then bottom_rule()-8 else bottom_height()+1) }
	attack_3_width := { fun_expand_size(if cost_width()>=fun_expand_size(91) then 152 else if cost_width()>=fun_expand_size(72) then 176 else 195) }
	attack_3_height := { fun_expand_size(0) }
	attack_3_visible := { false }
	#attack_3_height := { fun_expand_size(if is_pokemon() then if attack_no_g7()==1 or (contains(card.general_options_07, match: "EX Pokemon") and not(stage()=="Basic")) then 0 else if attack_no_g7()==2 then 8 else 23 else 0) }
	#attack_3_visible := { if is_pokemon() and attack_no_g7()>=2 and not(contains(card.general_options_07, match: "EX Pokemon") and not(stage()=="Basic")) then true else false }
	attack_3_outline_visible := { attack_3_visible() and is_outline() and is_not_blur() }
	attack_3_outline_blur := { attack_3_visible() and is_outline() and not(is_not_blur()) }
	attack_3_color := { if is_ability_3() then ability_color() else if is_two_tone() then rgba(0,0,0,0) else if is_wt_text() then rgb(255,255,255) else rgb(0,0,0) }
	attack_align := { "bottom left shrink-overflow" }
	attack_font := { "GillSansCdn" }
	attack_weight := { "bold" }
	attack_style := { "normal" }
	attack_size := { fun_expand_font(14) }

	#######Attack Damage
	#damage_1_left := { x_left(297) }
	#damage_1_top := { y_top(top_height()+1) }
	#damage_1_width := { fun_expand_size(48) }
	#damage_1_height := { fun_expand_size(if is_pokemon() and not(is_ability_classic_1()) then divider_height_1()-top_height() else 0) }
	#damage_1_visible := { if is_pokemon() and not(is_ability_classic_1()) then true else false }
	#damage_1_outline_visible := { damage_1_visible() and is_outline() }
	#damage_2_left := { x_left(297) }
	#damage_2_top := { y_top(divider_height_1()+1) }
	#damage_2_width := { fun_expand_size(48) }
	#damage_2_height := { fun_expand_size(if is_pokemon() then if not(is_ability_classic_2()) then divider_height_2()-divider_height_1() else 0 else 0) }
	#damage_2_visible := { if is_pokemon() and not(is_ability_classic_2()) then true else false }
	#damage_2_outline_visible := { damage_2_visible() and is_outline() }
	#damage_3_left := { x_left(297) }
	#damage_3_top := { y_top(divider_height_2()+1) }
	#damage_3_width := { fun_expand_size(48) }
	#damage_3_height := { fun_expand_size(if is_pokemon() and attack_no()>=2 and not(is_ability_classic_3()) then bottom_height()-divider_height_2() else 0) }
	#damage_3_visible := { if is_pokemon() then if attack_no()>=2 and not(is_ability_classic_3()) then true else false }
	#damage_3_outline_visible := { damage_3_visible() and is_outline() }
	#damage_align := { "middle left" }
	#damage_font := { "GillSans" }
	#damage_weight := { "normal" }
	#damage_style := { "normal" }
	#damage_size := { fun_expand_font(20) }

	damage_1_left := { x_left(if is_pokemon() then 297 else 282) }
	damage_1_top := { y_top(if is_pokemon() then top_height()+1+ex_height() 
		else if is_trainer() and contains(card.general_options_07, match: "Attack Field in Trainer") and card.trainer=="Tool" then 392-16*rule_line_1() else 0) }
	damage_1_width := { fun_expand_size(if contains(card.damage_1, match:"+") or contains(card.damage_1, match:"x") then 47 else 37) }
	damage_1_height := { fun_expand_size(0) }
	damage_1_visible := { false }
	#damage_1_height := { fun_expand_size(if is_pokemon() then 23 else if is_trainer() and contains(card.general_options_07, match: "Attack Field in Trainer") and card.trainer=="Tool" then 23 else 0) }
	#damage_1_visible := { if is_pokemon() then true else if is_trainer() and contains(card.general_options_07, match: "Attack Field in Trainer") and card.trainer=="Tool" then true else false }
	damage_1_outline_visible := { damage_1_visible() and is_outline() and is_not_blur() }
	damage_1_outline_blur := { damage_1_visible() and is_outline() and not(is_not_blur()) }
	damage_2_left := { x_left(297) }
	damage_2_top := { y_top(if attack_no_g7()==1 then bottom_rule()-23 else middle_height()-1+ex_height()) }
	damage_2_width := { fun_expand_size(if contains(card.damage_2, match:"+") or contains(card.damage_2, match:"x") then 47 else 37) }
	damage_2_height := { fun_expand_size(0) }
	damage_2_visible := { false }
	#damage_2_height := { fun_expand_size(if is_pokemon() then if contains(card.general_options_07, match: "EX Pokemon") and not(stage()=="Basic") then 0 else 23 else 0) }
	#damage_2_visible := { if is_pokemon() and not(contains(card.general_options_07, match: "EX Pokemon") and not(stage()=="Basic")) then true else false }
	damage_2_outline_visible := { damage_2_visible() and is_outline() and is_not_blur() }
	damage_2_outline_blur := { damage_2_visible() and is_outline() and not(is_not_blur()) }
	damage_3_left := { x_left(297) }
	damage_3_top := { y_top(if attack_no_g7()<=2 then bottom_rule()-8 else bottom_height()+1) }
	damage_3_width := { fun_expand_size(if contains(card.damage_3, match:"+") or contains(card.damage_3, match:"x") then 47 else 37) }
	damage_3_height := { fun_expand_size(0) }
	damage_3_visible := { false }
	#damage_3_height := { fun_expand_size(if is_pokemon() then if attack_no_g7()==1 or (contains(card.general_options_07, match: "EX Pokemon") and not(stage()=="Basic")) then 0 else if attack_no_g7()==2 then 8 else 23 else 0) }
	#damage_3_visible := { if is_pokemon() then if attack_no_g7()>=2 and not(contains(card.general_options_07, match: "EX Pokemon") and not(stage()=="Basic")) then true else false }
	damage_3_outline_visible := { damage_3_visible() and is_outline() and is_not_blur() }
	damage_3_outline_blur := { damage_3_visible() and is_outline() and not(is_not_blur()) }
	damage_align := { "bottom right" }
	damage_font := { "PokeTitleXY" }
	damage_weight := { "normal" }
	damage_style := { "normal" }
	damage_size := { fun_expand_font(15) }

	#######Attack rules text and title
	#rule_1_left := { x_left(if is_ability_classic_1() then 50 else 72) }
	#rule_1_top := { y_top(top_height()+1) }
	#rule_1_width := { fun_expand_size(if is_pokemon() then if is_ability_classic_1() then 267 else 221 else 0) }
	#rule_1_height := { fun_expand_size(if is_pokemon() then divider_height_1()-top_height() else 0) }
	#rule_1_visible := { if is_pokemon() then true else false }
	#rule_1_align := { if rule_line_1()<=1 then "middle center" else "middle left" }
	#rule_1_outline_visible := { rule_1_visible() and is_outline() }
	#rule_2_left := { x_left(if is_ability_classic_2() then 50 else 72) }
	#rule_2_top := { y_top(divider_height_1()+1) }
	#rule_2_width := { fun_expand_size(if is_pokemon() then if is_ability_classic_2() then 267 else 221 else 0) }
	#rule_2_height := { fun_expand_size(if is_pokemon() then divider_height_2()-divider_height_1() else 0) }
	#rule_2_visible := { if is_pokemon() then true else false }
	#rule_2_outline_visible := { rule_2_visible() and is_outline() }
	#rule_2_align := { if rule_line_2()<=1 then "middle center" else "middle left justify" }
	#rule_3_left := { x_left(if is_ability_classic_3() then 50 else 72) }
	#rule_3_top := { y_top(divider_height_2()+1) }
	#rule_3_width := { fun_expand_size(if is_pokemon() then if is_ability_classic_3() then 267 else 221 else 0) }
	#rule_3_height := { fun_expand_size(if is_pokemon() and attack_no()>=2 then bottom_height()-divider_height_2() else 0) }
	#rule_3_visible := {if is_pokemon() and attack_no()>=2 then true else false }
	#rule_3_outline_visible := { rule_3_visible() and is_outline() }
	#rule_3_align := { if rule_line_3()<=1 then "middle center" else "middle left justify" }
	#rule_size := { fun_expand_font(13.7) }
	#rule_font := { "PokeRuleClassic" }
	#rule_weight := { "normal" }
	#rule_style := { "normal" }
	#rule_symbol_font := { "pokemon-a-rule" }
	#rule_symbol_size := { fun_expand_font(18) }
	#rule_lh_hard := { if is_energy() then 1 else 1.4 }
	#rule_lh_soft := { 1 }

	rule_1_left := { x_left(if is_pokemon() then 30 else if is_trainer() and contains(card.general_options_07, match: "Attack Field in Trainer") and card.trainer=="Tool" then 48 else 0) }
	rule_1_top := { y_top(if is_pokemon() then top_height()+24+ex_height() else if is_trainer() and contains(card.general_options_07, match: "Attack Field in Trainer") and card.trainer=="Tool" then 416-16*rule_line_1() else 0) }
	rule_1_width := { fun_expand_size(if is_pokemon() then 302 else if is_trainer() and contains(card.general_options_07, match: "Attack Field in Trainer") and card.trainer=="Tool" then 269 else 0) }
	rule_1_height := { fun_expand_size(0) }
	rule_1_visible := { false }
	#rule_1_height := { fun_expand_size(if is_pokemon() then rule_size_1() else if is_trainer() and contains(card.general_options_07, match: "Attack Field in Trainer") and card.trainer=="Tool" then 4+16*rule_line_1() else 0) }
	#rule_1_visible := { if is_pokemon() then true else if is_trainer() and contains(card.general_options_07, match: "Attack Field in Trainer") and card.trainer=="Tool" then true else false }
	rule_1_outline_visible := { rule_1_visible() and is_outline() and is_not_blur() }
	rule_1_outline_blur := { rule_1_visible() and is_outline() and not(is_not_blur()) }
	rule_1_align := { "left top" }
	rule_2_left := { x_left(30) }
	rule_2_top := { y_top(middle_height()+23+ex_height()) }
	rule_2_width := { fun_expand_size(302) }
	rule_2_height := { fun_expand_size(0) }
	rule_2_visible := { false }
	#rule_2_height := { fun_expand_size(if is_pokemon() then if attack_no_g7()== 1 or (contains(card.general_options_07, match: "EX Pokemon") and not(stage()=="Basic")) then 0 else rule_size_2() else 0) }
	#rule_2_visible := { if is_pokemon() then if attack_no_g7()>=2 and not(contains(card.general_options_07, match: "EX Pokemon") and not(stage()=="Basic")) then true else false }
	rule_2_outline_visible := { rule_2_visible() and is_outline() and is_not_blur() }
	rule_2_outline_blur := { rule_2_visible() and is_outline() and not(is_not_blur()) }
	rule_2_align := { "left top" }
	rule_3_left := { x_left(30) }
	rule_3_top := { y_top(bottom_height()+23) }
	rule_3_width := { fun_expand_size(302) }
	rule_3_height := { fun_expand_size(0) }
	rule_3_visible := { false }
	#rule_3_height := { fun_expand_size(if is_pokemon() then if attack_no_g7()<= 2 or (contains(card.general_options_07, match: "EX Pokemon") and not(stage()=="Basic")) then 0 else rule_size_3() else 0) }
	#rule_3_visible := {if is_pokemon() and attack_no_g7()==3 and not(contains(card.general_options_07, match: "EX Pokemon") and not(stage()=="Basic")) then true else false }
	rule_3_outline_visible := { rule_3_visible() and is_outline() and is_not_blur() }
	rule_3_outline_blur := { rule_3_visible() and is_outline() and not(is_not_blur()) }
	rule_3_align := { "left top" }
	rule_font := { "Humanist521BT" }
	rule_weight := { "normal" }
	rule_style := { "normal" }
	rule_size := { fun_expand_font(10.6) }
	rule_symbol_font := { "pokemon-a-rule" }
	rule_symbol_size := { fun_expand_font(20) }
	rule_lh_hard := { 1.4 }
	rule_lh_soft := { if is_pokemon() then 0.9 else 1 }
############################################################## Styling fields
#All Card Options
styling field:
	type: multiple choice
	name: General Choices
	choice: Test Image
	choice: Diagnostic Text
styling field:
	type: multiple choice
	name: Automated Text Usage
	choice: Stage Title
	choice: Evolution Reminder
	choice: EX Rule Reminder
	choice: Mega Rule Reminder
	choice: Trainer Play Rule Reminder
	choice: Tool Play Rule Reminder
	initial: Stage Title, Evolution Reminder, EX Rule Reminder, Mega Rule Reminder, Trainer Play Rule Reminder, Tool Play Rule Reminder
styling field:
	type: multiple choice
	name: Ability and Energy Icons
	choice: Use Black & White or XY Style Ability Icon
	choice: Use E-Card Poke-Body & Poke-Power Icons
	choice: Use Transparent Free Energy Icon (aka No Energy)
	initial: Use Black & White or XY Style Ability Icon
styling field:
	type: color
	name: User Input Team Color
	initial: rgb(150,150,150)
	description: The color used for backgrounds for basic energy designs
styling style:
	General Choices:
		render style: checklist
		direction: vertical
	Automated Text Usage:
		render style: checklist
		direction: vertical
	Ability and Energy Icons:
		render style: checklist
		direction: vertical
############################################################## Throughout this odd number layers are reserved for shading/covering up etc.
card style:
	######################## Hidden Layer -18
	######################## this layer provids a layer to place hidden buttons and images
	######################## Some of these items are found in the extra card fields
#########User defined color fields (there but not seen)
	energy color 1:
		left: { x_left(8) }
		top: { y_top(9) }
		width: { fun_expand_size(350) }
		height: { fun_expand_size(if (is_pokemon() and contains(card.general_options_07, match: "Team Plasma") and texture_type_1()=="User Image") or (is_trainer() and card.trainer=="User Defined") or ((is_energy() or is_pokemon()) and background_type_1()=="User Defined") then 495 else 0) }
		visible: { if (is_pokemon() and contains(card.general_options_07, match: "Team Plasma") and texture_type_1()=="User Image") or (is_trainer() and card.trainer=="User Defined") or ((is_energy() or is_pokemon()) and background_type_1()=="User Defined") then "yes" else "no" }
		mask:
			script: if is_energy() and basic_energy_meld()=="Generations" then "/pokemon-b-common.mse-include/mask-e-generations-1.png" 
				else if is_energy() and background_type_1()=="User Defined" then "/pokemon-b-common.mse-include/mask-top-bottom.png"
				else if background_type_1()=="User Defined" then if card.card_type=="Dual-Type" then dual_mask()
					else "/pokemon-b-common.mse-include/mask-blank.png"
				else if card.card_type=="Pokemon" then if contains(card.general_options_07, match: "Team Plasma") and texture_type_1()=="User Image" then "mask-p-plasma.png" else "/pokemon-b-common.mse-include/mask-blank.png"
				else if card.card_type=="Dual-Type" then if contains(card.general_options_07, match: "Team Plasma") and texture_type_1()=="User Image" then combine_blend(image1: "mask-p-plasma.png", image2: dual_mask(), combine: "multiply")
					else dual_mask()
				else if is_trainer() and card.trainer=="User Defined" and not(contains(card.general_options_07, match: "Retro Card Face")) then "mask-t-user-defined.png"
				else "/pokemon-b-common.mse-include/mask-blank.png"
		z index: -19
	energy color 2:
		left: { x_left(8) }
		top: { y_top(9) }
		width: { fun_expand_size(350) }
		height: { fun_expand_size(if (card.card_type=="Dual-Type" and (background_type_1()=="User Defined" or (contains(card.general_options_07, match: "Team Plasma") and texture_type_2()=="User Image"))) or (is_energy() and basic_energy_meld()=="Generations") then 495 else 0) }
		mask: 
			script: if is_energy() and basic_energy_meld()=="Generations" then "/pokemon-b-common.mse-include/mask-e-generations-2.png"
				else if card.card_type=="Dual-Type" and background_type_2()=="User Defined" then dual_mask_reverse()
				else if card.card_type=="Dual-Type" then if contains(card.general_options_07, match: "Team Plasma") and texture_type_2()=="User Image" then combine_blend(image1: "mask-p-plasma.png", image2: dual_mask_reverse(), combine: "multiply")
					else dual_mask_reverse()
				else "/pokemon-b-common.mse-include/mask-blank.png"
		visible: { if (card.card_type=="Dual-Type" and (background_type_1()=="User Defined" or (contains(card.general_options_07, match: "Team Plasma") and texture_type_2()=="User Image"))) or (is_energy() and basic_energy_meld()=="Generations") then "yes" else "no" }
		z index: -19
	energy color 3:
		left: { x_left(8) }
		top: { y_top(9) }
		width: { fun_expand_size(350) }
		height: { fun_expand_size(if is_energy() and basic_energy_meld()=="Generations" then 495 else 0) }
		mask: { if is_energy() and basic_energy_meld()=="Generations" then "/pokemon-b-common.mse-include/mask-e-generations-3.png" else "/pokemon-b-common.mse-include/mask-blank.png" }
		visible: { if is_energy() and basic_energy_meld()=="Generations" then "yes" else "no" }
		z index: -19
#########Image used for user defined background image
	background pic 1:
		left: { x_left(183)-350 }
		top: { y_top(257)-495 }
		width: { 700 }
		height: { if is_image_1() then 990 else 0 }
		visible: { if is_image_1() then "yes" else "no" }
		z index: -18
		mask:
			script: if card.card_type=="Pokemon" and contains(card.general_options_07, match: "Team Plasma") and texture_type_1()=="User Image" then "mask-pokemon-"+(if contains(card.general_options_07, match: "Retro Card Face") then "evo-" else "")+"plasma.png"
				else if card.card_type=="Dual-Type" then if contains(card.general_options_07, match: "Team Plasma") and texture_type_1()=="User Image" then combine_blend(image1: "mask-pokemon-"+(if contains(card.general_options_07, match: "Retro Card Face") then "evo-" else "")+"plasma.png", image2: dual_mask(), combine: "multiply")
					else dual_mask() 
				else if is_energy() and background_type_1()=="User Defined" then "/pokemon-b-common.mse-include/mask-bottom-top.png" 
				else "/pokemon-b-common.mse-include/mask-blank.png"
#########Image used for second user defined background image
	background pic 2:
		left: { x_left(183)-350 }
		top: { y_top(257)-495 }
		width: { 700 }
		height: { if is_image_2() then 990 else 0 }
		z index: -18
		visible: { if is_image_2() then "yes" else "no" }
		mask: { if contains(card.general_options_07, match: "Team Plasma") and texture_type_2()=="User Image" then combine_blend(image1: "mask-pokemon-"+(if contains(card.general_options_07, match: "Retro Card Face") then "evo-" else "")+"plasma.png", image2: dual_mask_reverse(), combine: "multiply") else dual_mask_reverse() }
	######################## Background Layer -14
	######################## this layer provids the background image modified slightly for dual type (changed some z-index)
#########Blank image to separate hidden images
	blank image:
		left: { x_left(0) }
		top: { y_top(0) }
		width: { fun_expand_size(368) }
		height: { fun_expand_size(513) }
		visible: { "yes" }
		z index: -17
		render style: image
		image: { "/pokemon-b-common.mse-include/mask-blank.png" }
#########Background image everything before this is hidden
	text popout image:
		left: { x_left(8) }
		top: { y_top(9) }
		width: { fun_expand_size(350) }
		height: { fun_expand_size(495) }
		visible: { if is_two_tone() then "yes" else "no" }
		z index: -15
		render style: image
		image: 
			script: set_combine(input: if is_dark_1() then if is_dark_2() then  "/pokemon-b-common.mse-include/mask-blank.png"
						else dual_mask()
					else if is_dark_2() then dual_mask_reverse()
					else "/pokemon-b-common.mse-include/mask-blank-reverse.png"
				, combine: "difference")
#########Primary Background Image and Background Image for Black portion of Two-Tone Text
	background:
		left: { x_left(8) }
		top: { y_top(9) }
		width: { fun_expand_size(350) }
		height: { fun_expand_size(495) }
		z index: -14
		render style: image
		mask: 
			script: if card.card_type=="Dual-Type" and is_two_tone() then if is_dark_1() and not(is_dark_2()) then	dual_mask_reverse()
					else if is_dark_2() and not(is_dark_1()) then						dual_mask()
					else "/pokemon-b-common.mse-include/mask-blank.png"
				else "/pokemon-b-common.mse-include/mask-blank.png"
		image:
			script: if card.card_type=="Pokemon" then masked_blend(light: "mask-box-image"+(if contains(card.general_options_07, match: "EX Pokemon") and ((stage()=="Stage 1" or stage()=="Stage 2") or (stage()=="Restored" and contains(card.general_options_07, match: "Mega Reminder Box for EX Restored"))) then "-mega" else if contains(card.general_options_07, match: "Retro Card Face") then "-retro" else "")+".png", dark: 
					if is_image_1() then masked_blend(light: card.background_pic_1, 
						dark: if contains(card.general_options_07, match: "Team Aqua") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else recolor_image(input: "watermark-pokemon-"+(if contains(card.general_options_07, match: "Retro Card Face") then "evo-" else "")+"colored-plasma.png", red: card.energy_color_1, green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255)), 
						mask: if contains(card.general_options_07, match: "Team Aqua") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else if contains(card.general_options_07, match: "Team Plasma") then "mask-pokemon-"+(if contains(card.general_options_07, match: "Retro Card Face") then "evo-" else "")+"plasma.png" else "/pokemon-b-common.mse-include/mask-blank.png")
					else if texture_type_1()=="Color" and not(background_type_1()=="User Defined") or (colored_pokemon_suffix_1()=="Color" and background_type_1()=="User Defined") then masked_blend(light: recolor_image(input: "/pokemon-b-common.mse-include/blank-color.png", red: texture_color_1(), green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255)), 
						dark: if contains(card.general_options_07, match: "Team Aqua") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else recolor_image(input: "watermark-pokemon-"+(if contains(card.general_options_07, match: "Retro Card Face") then "evo-" else "")+"colored-plasma.png", red: basic_color(), green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255)), 
						mask: if contains(card.general_options_07, match: "Team Aqua") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else if contains(card.general_options_07, match: "Team Plasma") then "mask-pokemon-"+(if contains(card.general_options_07, match: "Retro Card Face") then "evo-" else "")+"plasma.png" else "/pokemon-b-common.mse-include/mask-blank.png")
					else if background_type_1()=="User Defined" then masked_blend(light: recolor_image(input: "/pokemon-b-common.mse-include/back-p-colored-"+colored_pokemon_suffix_1()+".png", red: card.energy_color_1, green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255)), 
						dark: if contains(card.general_options_07, match: "Team Aqua") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else recolor_image(input: "watermark-pokemon-"+(if contains(card.general_options_07, match: "Retro Card Face") then "evo-" else "")+"user-plasma.png", red: card.energy_color_1, green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255)), 
						mask: if contains(card.general_options_07, match: "Team Aqua") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else if contains(card.general_options_07, match: "Team Plasma") then "mask-pokemon-"+(if contains(card.general_options_07, match: "Retro Card Face") then "evo-" else "")+"plasma.png" else "/pokemon-b-common.mse-include/mask-blank.png")
					else if contains(card.general_options_07, match: "Team Plasma")
						then masked_blend(light: "/pokemon-b-common.mse-include/back-p-"+texture_type_1()+"-"+background_type_1()+".png", dark: "watermark-pokemon"+(if contains(card.general_options_07, match: "Retro Card Face") then "-evo" else "")+plasma_type_1(), mask: "mask-pokemon-"+(if contains(card.general_options_07, match: "Retro Card Face") then "evo-" else "")+"plasma.png")
					else masked_blend(light: "/pokemon-b-common.mse-include/back-p-"+texture_type_1()+"-"+background_type_1()+".png", dark: if contains(card.general_options_07, match: "Team Aqua") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else "/pokemon-b-common.mse-include/blank.png", mask: if contains(card.general_options_07, match: "Team Aqua") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else "/pokemon-b-common.mse-include/mask-blank.png"),
					mask: if contains(card.text_options_3, match: "Body Fade Box") then "mask-box-fade"+(if contains(card.general_options_07, match: "EX Pokemon") and ((stage()=="Stage 1" or stage()=="Stage 2") or (stage()=="Restored" and contains(card.general_options_07, match: "Mega Reminder Box for EX Restored"))) then "-mega" else if contains(card.general_options_07, match: "Retro Card Face") then "-retro" else "")+".png" else "/pokemon-b-common.mse-include/mask-blank-reverse.png")
				else if card.card_type=="Dual-Type" then set_combine(input: masked_blend(light: "mask-box-image"+(if contains(card.general_options_07, match: "EX Pokemon") and ((stage()=="Stage 1" or stage()=="Stage 2") or (stage()=="Restored" and contains(card.general_options_07, match: "Mega Reminder Box for EX Restored"))) then "-mega" else if contains(card.general_options_07, match: "Retro Card Face") then "-retro" else "")+".png", dark: masked_blend(light:
						(if is_image_1() then masked_blend(light: card.background_pic_1, 
							dark: if contains(card.general_options_07, match: "Team Aqua") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else recolor_image(input: "watermark-pokemon-"+(if contains(card.general_options_07, match: "Retro Card Face") then "evo-" else "")+"colored-plasma.png", red: card.energy_color_1, green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255)), 
							mask: if contains(card.general_options_07, match: "Team Aqua") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else if contains(card.general_options_07, match: "Team Plasma") then "mask-pokemon-"+(if contains(card.general_options_07, match: "Retro Card Face") then "evo-" else "")+"plasma.png" else "/pokemon-b-common.mse-include/mask-blank.png")
						else if texture_type_1()=="Color" and not(background_type_1()=="User Defined") or (colored_pokemon_suffix_1()=="Color" and background_type_1()=="User Defined") then masked_blend(light: recolor_image(input: "/pokemon-b-common.mse-include/blank-color.png", red: texture_color_1(), green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255)), 
							dark: if contains(card.general_options_07, match: "Team Aqua") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else recolor_image(input: "watermark-pokemon-"+(if contains(card.general_options_07, match: "Retro Card Face") then "evo-" else "")+"colored-plasma.png", red: basic_color(), green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255)), 
							mask: if contains(card.general_options_07, match: "Team Aqua") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else if contains(card.general_options_07, match: "Team Plasma") then "mask-pokemon-"+(if contains(card.general_options_07, match: "Retro Card Face") then "evo-" else "")+"plasma.png" else "/pokemon-b-common.mse-include/mask-blank.png")
						else if background_type_1()=="User Defined" then masked_blend(light: recolor_image(input: "/pokemon-b-common.mse-include/back-p-colored-"+colored_pokemon_suffix_1()+".png", red: card.energy_color_1, green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255)), 
							dark: if contains(card.general_options_07, match: "Team Aqua") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else recolor_image(input: "watermark-pokemon-"+(if contains(card.general_options_07, match: "Retro Card Face") then "evo-" else "")+"user-plasma.png", red: card.energy_color_1, green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255)), 
							mask: if contains(card.general_options_07, match: "Team Aqua") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else if contains(card.general_options_07, match: "Team Plasma") then "mask-pokemon-"+(if contains(card.general_options_07, match: "Retro Card Face") then "evo-" else "")+"plasma.png" else "/pokemon-b-common.mse-include/mask-blank.png")
						else if contains(card.general_options_07, match: "Team Plasma")
							then masked_blend(light: "/pokemon-b-common.mse-include/back-p-"+texture_type_1()+"-"+background_type_1()+".png", dark: "watermark-pokemon"+(if contains(card.general_options_07, match: "Retro Card Face") then "-evo" else "")+plasma_type_1(), mask: "mask-pokemon-"+(if contains(card.general_options_07, match: "Retro Card Face") then "evo-" else "")+"plasma.png")
						else masked_blend(light: "/pokemon-b-common.mse-include/back-p-"+texture_type_1()+"-"+background_type_1()+".png", dark: if contains(card.general_options_07, match: "Team Aqua") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else "/pokemon-b-common.mse-include/blank.png", mask: if contains(card.general_options_07, match: "Team Aqua") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else "/pokemon-b-common.mse-include/mask-blank.png")),
					dark: (if is_image_2() then masked_blend(light: card.background_pic_2, 
							dark: if contains(card.general_options_07, match: "Team Aqua") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else recolor_image(input: "watermark-pokemon-"+(if contains(card.general_options_07, match: "Retro Card Face") then "evo-" else "")+"colored-plasma.png", red: card.energy_color_2, green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255)), 
							mask: if contains(card.general_options_07, match: "Team Aqua") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else if contains(card.general_options_07, match: "Team Plasma") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-plasma.png" else "/pokemon-b-common.mse-include/mask-blank.png")
						else if texture_type_2()=="Color" and not(background_type_2()=="User Defined") or (colored_pokemon_suffix_2()=="Color" and background_type_2()=="User Defined") then masked_blend(light: recolor_image(input: "/pokemon-b-common.mse-include/blank-color.png", red: texture_color_2(), green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255)), 
							dark: if contains(card.general_options_07, match: "Team Aqua") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else recolor_image(input: "watermark-pokemon-"+(if contains(card.general_options_07, match: "Retro Card Face") then "evo-" else "")+"colored-plasma.png", red: basic_color_2(), green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255)), 
							mask: if contains(card.general_options_07, match: "Team Aqua") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else if contains(card.general_options_07, match: "Team Plasma") then "mask-pokemon-"+(if contains(card.general_options_07, match: "Retro Card Face") then "evo-" else "")+"plasma.png" else "/pokemon-b-common.mse-include/mask-blank.png")
						else if background_type_2()=="User Defined" then masked_blend(light: recolor_image(input: "/pokemon-b-common.mse-include/back-p-colored-"+colored_pokemon_suffix_2()+".png", red: card.energy_color_2, green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255)), 
							dark: if contains(card.general_options_07, match: "Team Aqua") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else recolor_image(input: "watermark-pokemon-"+(if contains(card.general_options_07, match: "Retro Card Face") then "evo-" else "")+"user-plasma.png", red: card.energy_color_2, green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255)), 
							mask: if contains(card.general_options_07, match: "Team Aqua") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else if contains(card.general_options_07, match: "Team Plasma") then "mask-pokemon-"+(if contains(card.general_options_07, match: "Retro Card Face") then "evo-" else "")+"plasma.png" else "/pokemon-b-common.mse-include/mask-blank.png")
						else if contains(card.general_options_07, match: "Team Plasma")
							then masked_blend(light: "/pokemon-b-common.mse-include/back-p-"+texture_type_2()+"-"+background_type_2()+".png", dark: "watermark-pokemon"+(if contains(card.general_options_07, match: "Retro Card Face") then "-evo" else "")+plasma_type_2(), mask: "mask-pokemon-"+(if contains(card.general_options_07, match: "Retro Card Face") then "evo-" else "")+"plasma.png")
						else masked_blend(light: "/pokemon-b-common.mse-include/back-p-"+texture_type_2()+"-"+background_type_2()+".png", dark: if contains(card.general_options_07, match: "Team Aqua") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else "/pokemon-b-common.mse-include/blank.png", mask: if contains(card.general_options_07, match: "Team Aqua") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else "/pokemon-b-common.mse-include/mask-blank.png")),
					mask:	blend_mask()), mask: if contains(card.text_options_3, match: "Body Fade Box") then "mask-box-fade"+(if contains(card.general_options_07, match: "EX Pokemon") and ((stage()=="Stage 1" or stage()=="Stage 2") or (stage()=="Restored" and contains(card.general_options_07, match: "Mega Reminder Box for EX Restored"))) then "-mega" else if contains(card.general_options_07, match: "Retro Card Face") then "-retro" else "")+".png" else "/pokemon-b-common.mse-include/mask-blank-reverse.png"), combine: if is_two_tone() then "multiply" else "normal")
				else if is_trainer()
					then if contains(card.general_options_07, match: "Retro Card Face") then masked_blend(light: "back-t-evo.png", dark: if contains(card.general_options_07, match: "Team Aqua") then "watermark-energy-evo-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "watermark-energy-evo-magma.png" else "/pokemon-b-common.mse-include/blank.png", mask: if contains(card.general_options_07, match: "Team Aqua") then "mask-energy-evo-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "mask-energy-evo-magma.png" else "/pokemon-b-common.mse-include/mask-blank.png")
					else if contains(card.general_options_07, match: "User Defined Team") and contains(card.general_options_07, match: "Colored Inner Border") then masked_blend(light: recolor_image(input: "back-t-bwxy"+(if contains(card.general_options_07, match: "Ace Spec Trainer") then "-ace-spec" else "")+"-colored.png", red: styling.User_Input_Team_Color, green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255)), 
						dark: if contains(card.general_options_07, match: "Team Aqua") then if card.trainer=="Tool" then "watermark-tool-aqua.png" else "watermark-trainer-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then if card.trainer=="Tool" then "watermark-tool-magma.png" else "watermark-trainer-magma.png" else "/pokemon-b-common.mse-include/blank.png", 
						mask: if contains(card.general_options_07, match: "Team Aqua") then if card.trainer=="Tool" then "mask-tool-aqua.png" else "mask-trainer-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then if card.trainer=="Tool" then "mask-tool-magma.png" else "mask-trainer-magma.png" else "/pokemon-b-common.mse-include/mask-blank.png")
					else masked_blend(light: ("back-t-bwxy"+(if contains(card.general_options_07, match: "Ace Spec Trainer") then "-ace-spec" else "")+(if contains(card.general_options_07, match: "Team Plasma") then if card.trainer=="Tool" then "-plasma-tool" else "-plasma" else if contains(card.general_options_07, match: "Team Flare") then "-flare" else "")+".png"), 
						dark: if contains(card.general_options_07, match: "Team Aqua") then if card.trainer=="Tool" then "watermark-tool-aqua.png" else "watermark-trainer-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then if card.trainer=="Tool" then "watermark-tool-magma.png" else "watermark-trainer-magma.png" else "/pokemon-b-common.mse-include/blank.png", 
						mask: if contains(card.general_options_07, match: "Team Aqua") then if card.trainer=="Tool" then "mask-tool-aqua.png" else "mask-trainer-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then if card.trainer=="Tool" then "mask-tool-magma.png" else "mask-trainer-magma.png" else "/pokemon-b-common.mse-include/mask-blank.png")
				else if is_energy()
					then if card.energy_type=="Basic"
						then if basic_energy_meld()=="mix" 
							then if background_type_1()=="Metal" and (card.metal_texture=="Nintendo" or card.metal_texture=="Wizards") then masked_blend(light: "/pokemon-b-common.mse-include/mask-blank.png", dark: masked_blend(light: recolor_image(input: "/pokemon-b-common.mse-include/back-e-colored-"+basic_energy_suffix()+".png", red: basic_color(), green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255)), dark: "/pokemon-b-common.mse-include/mask-blank-reverse.png", mask: "/pokemon-b-common.mse-include/back-e-metal-"+card.metal_texture+".png"), mask: "/pokemon-b-common.mse-include/blend-e-"+basic_energy_suffix()+".png")
							else 						masked_blend(light: "/pokemon-b-common.mse-include/mask-blank.png", dark: recolor_image(input: "/pokemon-b-common.mse-include/back-e-colored-"+basic_energy_suffix()+".png", red: basic_color(), green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255)), mask: "/pokemon-b-common.mse-include/blend-e-"+basic_energy_suffix()+".png")
						else if basic_energy_meld()=="blend" then		masked_blend(light: "/pokemon-b-common.mse-include/mask-blank.png", dark: if background_type_1()=="Metal" and (card.metal_texture=="Nintendo" or card.metal_texture=="Wizards") then "/pokemon-b-common.mse-include/back-e-metal-"+card.metal_texture+".png" else recolor_image(input: "/pokemon-b-common.mse-include/blank-color.png", red: basic_color(), green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255)), mask: "/pokemon-b-common.mse-include/blend-e-"+basic_energy_suffix()+".png")
						else if basic_energy_meld()=="back" then		"/pokemon-b-common.mse-include/back-e-"+basic_energy_suffix()+"-"+background_type_1()+".png"
						else if basic_energy_meld()=="mask" then		masked_blend(light: "/pokemon-b-common.mse-include/mask-blank.png", dark: "/pokemon-b-common.mse-include/back-e-"+background_type_1()+".png", mask: "/pokemon-b-common.mse-include/blend-e-"+basic_energy_suffix()+".png")
						else if basic_energy_meld()=="Generations"
							then if background_type_1()=="Metal" and (card.metal_texture=="Nintendo" or card.metal_texture=="Wizards") then		masked_blend(light: "/pokemon-b-common.mse-include/mask-blank.png", dark: masked_blend(light: "/pokemon-b-common.mse-include/back-e-metal-"+card.metal_texture+".png" , dark: "/pokemon-b-common.mse-include/mask-blank-reverse.png", mask: recolor_image(input: "/pokemon-b-common.mse-include/back-e-colored-generations.png", red: basic_color(), green: basic_color_3(), blue: basic_color_2(), white: rgb(255,255,255))), mask: "/pokemon-b-common.mse-include/blend-e-classic.png")
							else						recolor_image(input: "/pokemon-b-common.mse-include/back-e-colored-generations.png", red: basic_color(), green: basic_color_3(), blue: basic_color_2(), white: rgb(255,255,255))
						else if basic_energy_meld()=="recolor"
							then if background_type_1()=="Metal" and (card.metal_texture=="Nintendo" or card.metal_texture=="Wizards") then		masked_blend(light: "/pokemon-b-common.mse-include/mask-blank.png", dark: "/pokemon-b-common.mse-include/back-e-metal-"+card.metal_texture+".png", mask: "/pokemon-b-common.mse-include/blend-e-special.png")
							else						recolor_image(input: "/pokemon-b-common.mse-include/back-e-colored-"+basic_energy_suffix()+".png", red: basic_color(), green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255))
						else if basic_energy_meld()=="image"
							then if contains(card.basic_user_image_type, match:"Monocolor") then	masked_blend(light: "/pokemon-b-common.mse-include/mask-blank.png", dark: recolor_image(input: recolor_image(input: card.background_pic_1, red: rgb(255,0,0), green: rgb(255,0,0), blue: rgb(255,0,0), white: rgb(255,64,64)), red: basic_color(), green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255)), mask: "/pokemon-b-common.mse-include/blend-e-user"+(if contains(card.basic_user_image_type, match:"Triburst") then "-triburst" else "")+(if contains(card.basic_user_image_type, match:"Sunburst") then "-sunburst" else "")+(if contains(card.basic_user_image_type, match:"Centered") then "-centered" else "")+".png")
							else 						masked_blend(light: "/pokemon-b-common.mse-include/mask-blank.png", dark: card.background_pic_1, mask: "/pokemon-b-common.mse-include/blend-e-user"+(if contains(card.basic_user_image_type, match:"Triburst") then "-triburst" else "")+(if contains(card.basic_user_image_type, match:"Sunburst") then "-sunburst" else "")+(if contains(card.basic_user_image_type, match:"Centered") then "-centered" else "")+".png")
						else "/pokemon-b-common.mse-include/mask-blank.png"
					else if contains(card.general_options_07, match: "Retro Card Face") then	masked_blend(light: "back-e-evo.png", dark: if contains(card.general_options_07, match: "Team Aqua") then "watermark-energy-evo-special-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "watermark-energy-evo-magma.png" else "/pokemon-b-common.mse-include/blank.png", mask: if contains(card.general_options_07, match: "Team Aqua") then "mask-energy-evo-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "mask-energy-evo-magma.png" else "/pokemon-b-common.mse-include/mask-blank.png")
					else masked_blend(light: "back-e-bwxy-energy.png", dark: if contains(card.general_options_07, match: "Team Aqua") then "watermark-energy-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "watermark-energy-magma.png" else "/pokemon-b-common.mse-include/blank.png", mask: if contains(card.general_options_07, match: "Team Aqua") then "mask-energy-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "mask-energy-magma.png" else "/pokemon-b-common.mse-include/mask-blank.png")
				else "/pokemon-b-common.mse-include/mask-blank.png"
#########Background Image for White portion of Two-Tone Text
	background 2:
		left: { x_left(8) }
		top: { y_top(9) }
		width: { fun_expand_size(350) }
		height: { fun_expand_size(if (card.card_type=="Dual-Type" and is_two_tone())or (is_trainer() and not(contains(card.general_options_07, match: "Retro Card Face"))) then 495 else 0) }
		visible: { if (card.card_type=="Dual-Type" and is_two_tone()) or (is_trainer() and not(contains(card.general_options_07, match: "Retro Card Face"))) then "yes" else "no" }
		z index: -13
		render style: image
		mask: 
			script: if card.card_type=="Dual-Type" and is_two_tone() then if is_dark_1() and not(is_dark_2()) then	dual_mask()
					else if is_dark_2() and not(is_dark_1()) then						dual_mask_reverse()
					else "/pokemon-b-common.mse-include/mask-blank.png"
				else "/pokemon-b-common.mse-include/mask-blank.png"
		image:
			script: if card.card_type=="Dual-Type" then set_combine(input: masked_blend(light: "mask-box-image"+(if contains(card.general_options_07, match: "EX Pokemon") and ((stage()=="Stage 1" or stage()=="Stage 2") or (stage()=="Restored" and contains(card.general_options_07, match: "Mega Reminder Box for EX Restored"))) then "-mega" else if contains(card.general_options_07, match: "Retro Card Face") then "-retro" else "")+".png", dark: masked_blend(light:
						(if is_image_1() then masked_blend(light: card.background_pic_1, 
							dark: if contains(card.general_options_07, match: "Team Aqua") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else recolor_image(input: "watermark-pokemon-"+(if contains(card.general_options_07, match: "Retro Card Face") then "evo-" else "")+"colored-plasma.png", red: card.energy_color_1, green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255)), 
							mask: if contains(card.general_options_07, match: "Team Aqua") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else if contains(card.general_options_07, match: "Team Plasma") then "mask-pokemon-"+(if contains(card.general_options_07, match: "Retro Card Face") then "evo-" else "")+"plasma.png" else "/pokemon-b-common.mse-include/mask-blank.png")
						else if texture_type_1()=="Color" and not(background_type_1()=="User Defined") or (colored_pokemon_suffix_1()=="Color" and background_type_1()=="User Defined") then masked_blend(light: recolor_image(input: "/pokemon-b-common.mse-include/blank-color.png", red: texture_color_1(), green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255)), 
							dark: if contains(card.general_options_07, match: "Team Aqua") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else recolor_image(input: "watermark-pokemon-"+(if contains(card.general_options_07, match: "Retro Card Face") then "evo-" else "")+"colored-plasma.png", red: basic_color(), green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255)), 
							mask: if contains(card.general_options_07, match: "Team Aqua") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else if contains(card.general_options_07, match: "Team Plasma") then "mask-pokemon-"+(if contains(card.general_options_07, match: "Retro Card Face") then "evo-" else "")+"plasma.png" else "/pokemon-b-common.mse-include/mask-blank.png")
						else if background_type_1()=="User Defined" then masked_blend(light: recolor_image(input: "/pokemon-b-common.mse-include/back-p-colored-"+colored_pokemon_suffix_1()+".png", red: card.energy_color_1, green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255)), 
							dark: if contains(card.general_options_07, match: "Team Aqua") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else recolor_image(input: "watermark-pokemon-"+(if contains(card.general_options_07, match: "Retro Card Face") then "evo-" else "")+"user-plasma.png", red: card.energy_color_1, green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255)), 
							mask: if contains(card.general_options_07, match: "Team Aqua") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else if contains(card.general_options_07, match: "Team Plasma") then "mask-pokemon-"+(if contains(card.general_options_07, match: "Retro Card Face") then "evo-" else "")+"plasma.png" else "/pokemon-b-common.mse-include/mask-blank.png")
						else if contains(card.general_options_07, match: "Team Plasma")
							then masked_blend(light: "/pokemon-b-common.mse-include/back-p-"+texture_type_1()+"-"+background_type_1()+".png", dark: "watermark-pokemon"+(if contains(card.general_options_07, match: "Retro Card Face") then "-evo" else "")+plasma_type_1(), mask: "mask-pokemon-"+(if contains(card.general_options_07, match: "Retro Card Face") then "evo-" else "")+"plasma.png")
						else masked_blend(light: "/pokemon-b-common.mse-include/back-p-"+texture_type_1()+"-"+background_type_1()+".png", dark: if contains(card.general_options_07, match: "Team Aqua") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else "/pokemon-b-common.mse-include/blank.png", mask: if contains(card.general_options_07, match: "Team Aqua") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else "/pokemon-b-common.mse-include/mask-blank.png")),
					dark:	(if is_image_2() then masked_blend(light: card.background_pic_2, 
							dark: if contains(card.general_options_07, match: "Team Aqua") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else recolor_image(input: "watermark-pokemon-"+(if contains(card.general_options_07, match: "Retro Card Face") then "evo-" else "")+"colored-plasma.png", red: card.energy_color_2, green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255)), 
							mask: if contains(card.general_options_07, match: "Team Aqua") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else if contains(card.general_options_07, match: "Team Plasma") then "mask-pokemon-"+(if contains(card.general_options_07, match: "Retro Card Face") then "evo-" else "")+"plasma.png" else "/pokemon-b-common.mse-include/mask-blank.png")
						else if texture_type_2()=="Color" and not(background_type_2()=="User Defined") or (colored_pokemon_suffix_2()=="Color" and background_type_2()=="User Defined") then masked_blend(light: recolor_image(input: "/pokemon-b-common.mse-include/blank-color.png", red: texture_color_2(), green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255)), 
							dark: if contains(card.general_options_07, match: "Team Aqua") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else recolor_image(input: "watermark-pokemon-"+(if contains(card.general_options_07, match: "Retro Card Face") then "evo-" else "")+"colored-plasma.png", red: basic_color_2(), green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255)), 
							mask: if contains(card.general_options_07, match: "Team Aqua") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else if contains(card.general_options_07, match: "Team Plasma") then "mask-pokemon-"+(if contains(card.general_options_07, match: "Retro Card Face") then "evo-" else "")+"plasma.png" else "/pokemon-b-common.mse-include/mask-blank.png")
						else if background_type_2()=="User Defined" then masked_blend(light: recolor_image(input: "/pokemon-b-common.mse-include/back-p-colored-"+colored_pokemon_suffix_2()+".png", red: card.energy_color_2, green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255)), 
							dark: if contains(card.general_options_07, match: "Team Aqua") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else recolor_image(input: "watermark-pokemon-"+(if contains(card.general_options_07, match: "Retro Card Face") then "evo-" else "")+"user-plasma.png", red: card.energy_color_2, green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255)), 
							mask: if contains(card.general_options_07, match: "Team Aqua") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else if contains(card.general_options_07, match: "Team Plasma") then "mask-pokemon-"+(if contains(card.general_options_07, match: "Retro Card Face") then "evo-" else "")+"plasma.png" else "/pokemon-b-common.mse-include/mask-blank.png")
						else if contains(card.general_options_07, match: "Team Plasma")
							then if background_type_2()=="User Defined" then recolor_image(input: "back-p-bw-colored-"+colored_pokemon_suffix_2()+"-plasma.png", red: card.energy_color_2, green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255))
							else masked_blend(light: "/pokemon-b-common.mse-include/back-p-"+texture_type_2()+"-"+background_type_2()+".png", dark: "watermark-pokemon"+(if contains(card.general_options_07, match: "Retro Card Face") then "-evo" else "")+plasma_type_2(), mask: "mask-pokemon-"+(if contains(card.general_options_07, match: "Retro Card Face") then "evo-" else "")+"plasma.png")
						else								masked_blend(light: "/pokemon-b-common.mse-include/back-p-"+texture_type_2()+"-"+background_type_2()+".png", dark: if contains(card.general_options_07, match: "Team Aqua") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "watermark-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else "/pokemon-b-common.mse-include/blank.png", mask: if contains(card.general_options_07, match: "Team Aqua") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-aqua.png" else if contains(card.general_options_07, match: "Team Magma") then "mask-"+(if contains(card.general_options_07, match: "Retro Card Face") then "pokemon-evo" else "pokemon")+"-magma.png" else "/pokemon-b-common.mse-include/mask-blank.png")),
					mask:	blend_mask()), mask: if contains(card.text_options_3, match: "Body Fade Box") then "mask-box-fade"+(if contains(card.general_options_07, match: "EX Pokemon") and ((stage()=="Stage 1" or stage()=="Stage 2") or (stage()=="Restored" and contains(card.general_options_07, match: "Mega Reminder Box for EX Restored"))) then "-mega" else if contains(card.general_options_07, match: "Retro Card Face") then "-retro" else "")+".png" else "/pokemon-b-common.mse-include/mask-blank-reverse.png"), combine: if is_two_tone() then "screen" else "normal")
				else if is_trainer() and not(contains(card.general_options_07, match: "Retro Card Face"))
					then if card.trainer=="User Defined" then 				recolor_image(input: "overlay-t-bwxy-"+(if contains(card.general_options_07, match: "Ace Spec Trainer") then "ace-" else "")+"colored.png", red: card.energy_color_1, green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255))
					else									("overlay-t-bwxy"+(if contains(card.general_options_07, match: "Ace Spec Trainer") then "-ace" else "")+trainer_color()+".png")
				else "/pokemon-b-common.mse-include/blank.png"
	######################## Frame Layer -12
	######################## This layer provides the image framework underneath the image
	window:
		left: { x_left(8) }
		top: { y_top(9) }
		width: { fun_expand_size(350) }
		height: { fun_expand_size(495) }
		z index: -12
		render style: image
		image:
			script: if is_pokemon()
					then if contains(card.general_options_07, match: "User Defined Team") and contains(card.general_options_07, match: "Colored Frame") then		recolor_image(input: "window-p"+(if contains(card.general_options_07, match: "Retro Card Face") then "-evo" else (""+(if stage()=="Basic" then "-basic" else "-stage")+(if contains(card.general_options_07, match: "EX Pokemon") then "-ex" else "")))+"-colored.png", red: styling.User_Input_Team_Color, green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255))
					else 																	("window-p"+(if contains(card.general_options_07, match: "Retro Card Face") then "-evo" else (""+(if stage()=="Basic" then "-basic" else "-stage")+(if contains(card.general_options_07, match: "EX Pokemon") then "-ex" else "")))+team_type()+".png")
				else if is_trainer()
					then if contains(card.general_options_07, match: "User Defined Team") and contains(card.general_options_07, match: "Colored Frame") then		recolor_image(input: "window-t"+(if contains(card.general_options_07, match: "Retro Card Face") then "-evo" else "")+"-colored.png", red: styling.User_Input_Team_Color, green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255))
					else																	("window-t"+(if contains(card.general_options_07, match: "Retro Card Face") then "-evo" else "")+team_type()+(if contains(card.general_options_07, match: "Ace Spec Trainer") and team_type()=="" and not(contains(card.general_options_07, match: "Retro Card Face")) then "-ace-spec" else "")+".png")
				else "/pokemon-b-common.mse-include/blank.png"
	######################## Image Layer -10
	######################## This layer is for the user input image
	card image:
		left:
			script: x_left(if contains(card.art_options, match: "Full Art") then 13
				else if is_pokemon() then if contains(card.general_options_07, match: "Retro Card Face") then 41 else 31
				else if is_trainer() 
					then if card.trainer=="Stadium" and contains(card.general_options_07, match: "Stadium Cards Split Top & Bottom") then 13
					else if contains(card.general_options_07, match: "Retro Card Face") then 35
					else 37 
				else if contains(card.general_options_07, match: "Retro Card Face") then 14
				else 15)
		top:
			script: y_top(if contains(card.art_options, match: "Full Art") then if is_energy() and contains(card.general_options_07, match: "Retro Card Face") then 78 else 13
				else if is_pokemon() then if contains(card.general_options_07, match: "Retro Card Face") then 71 else 54
				else if is_trainer() 
					then if card.trainer=="Stadium" and contains(card.general_options_07, match: "Stadium Cards Split Top & Bottom") then 13
					else if contains(card.general_options_07, match: "Retro Card Face") then 119
					else 83
				else if contains(card.general_options_07, match: "Retro Card Face") then 78
				else if card.energy_type=="Special" then 21
				else 48)
		width:
			script: fun_expand_size(if contains(card.art_options, match: "Full Art") then 339
				else if is_pokemon() then if contains(card.general_options_07, match: "Retro Card Face") then 282 else 303
				else if is_trainer() 
					then if card.trainer=="Stadium" and contains(card.general_options_07, match: "Stadium Cards Split Top & Bottom") then 339
					else if contains(card.general_options_07, match: "Retro Card Face") then 296
					else 291
				else 337)
		height:
			script: fun_expand_size(if contains(card.art_options, match: "Full Art") then if is_energy() and contains(card.general_options_07, match: "Retro Card Face") then 421 else 486
				else if is_pokemon() then if contains(card.general_options_07, match: "Retro Card Face") then 198
					else if contains(card.general_options_07, match: "EX Pokemon") and not(stage()=="Basic") then 224 
					else 201
				else if is_trainer() 
					then if card.trainer=="Stadium" and contains(card.general_options_07, match: "Stadium Cards Split Top & Bottom") then 486 
					else if contains(card.general_options_07, match: "Retro Card Face") then 166
					else 179 
				else if is_energy()
					then if contains(card.general_options_07, match: "Retro Card Face") then 246
					else if card.energy_type=="Special" then 303 
					else if basic_energy_suffix()=="Special" then 276
					else 0
				else 0)
		mask: { if contains(card.art_options, match: "Faded Full Art") then combine_blend(image1: if contains(card.general_options_07, match: "Retro Card Face") then "/pokemon-b-common.mse-include/mask-blank.png" else "mask-fade-bwxy.png", image2: "/pokemon-b-common.mse-include/mask-fade.png", combine: "multiply") else "/pokemon-b-common.mse-include/mask-blank.png" }
		z index: -10
	######################## Overimage Under Border Frame -8
	######################## This layer is for items between the image and the border (aka might need covered up by the border)
	image overlay:
		left: { x_left(8) }
		top: { y_top(9) }
		width: { fun_expand_size(350) }
		height: { fun_expand_size(495) }
		z index: -8
		render style: image
		image:
			script: if is_trainer() and not(contains(card.general_options_07, match: "Retro Card Face"))
					then if contains(card.art_options, match: "Full Art")
						then if card.trainer=="User Defined" then			recolor_image(input: "overlay-t-bwxy-full-colored.png", red: card.energy_color_1, green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255))
						else								("overlay-t-bwxy-full"+trainer_color()+".png")
					else if card.trainer=="Stadium" and contains(card.general_options_07, match: "Stadium Cards Split Top & Bottom") then "overlay-t-bwxy-split-stadium.png"
					else "/pokemon-b-common.mse-include/blank.png"
				else if is_energy() and card.energy_type=="Basic" and contains(card.general_options_07, match: "Retro Card Face") then recolor_image(input: "frame-e-evo.png", red: basic_color(), green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255))
				else if is_energy() and card.energy_type=="Basic" and contains(card.general_options_07, match: "Colored Bottom Bar (Basic Energy)") then recolor_image(input: "overlay-e-basicbw-colored.png", red: basic_color(), green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255))
				else if is_pokemon() and stage()=="Restored" and contains(card.general_options_07, match: "EX Pokemon") and contains(card.general_options_07, match: "Mega Reminder Box for EX Restored") and not(contains(card.general_options_07, match: "Retro Card Face"))
					then if contains(card.general_options_07, match: "User Defined Team") and contains(card.general_options_07, match: "Colored Frame") then recolor_image(input: "overlay-p-restored-ex-colored.png", red: styling.User_Input_Team_Color, green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255))
					else									("overlay-p-restored-ex"+team_type()+".png")
				else "/pokemon-b-common.mse-include/blank.png"
	team watermark:
		left: { x_left(if contains(card.general_options_07, match: "Retro Card Face") then 112 else if is_energy() or (is_trainer() and card.trainer=="Tool") then 100 else 87) }
		top: { y_top(if contains(card.general_options_07, match: "Retro Card Face") then if is_pokemon() then 308 else 329 else if is_energy() then 329 else if is_pokemon() then if is_pokemon() and contains(card.general_options_07, match: "EX Pokemon") and not(stage()=="Basic") then 280 else 271 else if card.trainer=="Tool" then 295 else 275) }
		width: { fun_expand_size(if contains(card.general_options_07, match: "Retro Card Face") then 145 else if is_energy() or (is_trainer() and card.trainer=="Tool") then 169 else 194) }
		height: { fun_expand_size(if contains(card.general_options_07, match: "User Defined Team") and contains(card.general_options_07, match: "Team Watermark Image") and not(contains(card.art_options, match: "Full Art")) then if contains(card.general_options_07, match: "Retro Card Face") then 126 else if is_energy() or (is_trainer() and (card.trainer=="Tool" or contains(card.general_options_07, match: "Retro Card Face"))) then 139 else 160 else 0) }
		z index: -7
		visible: { contains(card.general_options_07, match: "User Defined Team") and contains(card.general_options_07, match: "Team Watermark Image") and not(contains(card.art_options, match: "Full Art")) }
	######################## Border Layer -6
	######################## This layer is for the border
	border:
		left: { x_left(0) }
		top: { y_top(0) }
		width: { fun_expand_size(368) }
		height: { fun_expand_size(513) }
		z index: -6
		render style: image
		image:
			script: if contains(card.general_options_07, match: "Secret Rare (Gold)") or contains(card.general_options_07, match: "Team Plasma") or contains(card.general_options_07, match: "Team Flare") then "border"+team_type()+".png"
				else if contains(card.general_options_07, match: "User Defined Team") and contains(card.general_options_07, match: "Colored Border") then recolor_image(input: "border-colored.png", red: styling.User_Input_Team_Color, green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255))
				else if is_pokemon() and contains(card.general_options_07, match: "EX Pokemon") then if contains(card.general_options_07, match: "Retro Card Face") then "border-brown.png"
					else "border-dk-grey.png"
				else if is_trainer() and contains(card.general_options_07, match: "Ace Spec Trainer") then "border-dk-grey.png"
				else if is_trainer() and (contains(card.art_options, match: "Full Art") or contains(card.art_options, match: "Popout Art (for Advanced Users)")) then "border-lt-grey.png"
				else "/pokemon-b-common.mse-include/border-yellow.png"
	######################## Overborder Frame -4
	######################## This layer is for items over the border
#########This image provides the basic framework that overlays the border.
	border overlay:
		left: { x_left(8) }
		top: { y_top(9) }
		width: { fun_expand_size(350) }
		height: { fun_expand_size(495) }
		z index: -4
		render style: image
		mask: { if is_pokemon() and contains(card.general_options_07, match: "Retro Card Face") and not(stage()=="Basic") and contains(card.general_options_07, match: "Pokemon Ancient Ability") then "mask-evo-aa.png" else "/pokemon-b-common.mse-include/mask-blank.png" }
		image:
			script: if is_trainer()
					then if contains(card.general_options_07, match: "User Defined Team") and contains(card.general_options_07, match: "Colored Frame") then	recolor_image(input: "frame-t"+(if contains(card.general_options_07, match: "Retro Card Face") then "-evo" else "")+"-colored.png", red: styling.User_Input_Team_Color, green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255))
					else						("frame-t"+(if contains(card.general_options_07, match: "Retro Card Face") then "-evo" else "")+team_type()+".png")
				else if is_energy() and not(contains(card.general_options_07, match: "Retro Card Face"))
					then if contains(card.general_options_07, match: "User Defined Team") and contains(card.general_options_07, match: "Colored Frame") then	recolor_image(input: "frame-e"+(if card.energy_type=="Basic" then if not(contains(card.general_options_07, match: "Colored Bottom Bar (Basic Energy)")) then "-basicxy" else "-basicbw" else "")+"-colored.png", red: styling.User_Input_Team_Color, green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255))
					else						("frame-e"+(if card.energy_type=="Basic" then if not(contains(card.general_options_07, match: "Colored Bottom Bar (Basic Energy)")) then "-basicxy" else "-basicbw" else "")+team_type()+".png")
				else if is_pokemon()
					then if contains(card.general_options_07, match: "Retro Card Face") and stage()=="Restored" and (not(contains(card.general_options_07, match: "EX Pokemon")) or contains(card.general_options_07, match: "Mega Reminder Box for EX Restored"))
						then if contains(card.general_options_07, match: "User Defined Team") and contains(card.general_options_07, match: "Colored Frame") then recolor_image(input: "frame-p-evo-Stage 1"+(if contains(card.general_options_07, match: "EX Pokemon") then "-ex" else "")+"-colored.png", red: styling.User_Input_Team_Color, green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255))
						else				 	("frame-p-evo-Stage 1"+(if contains(card.general_options_07, match: "EX Pokemon") then "-ex" else "")+team_type()+".png")
					else if contains(card.general_options_07, match: "User Defined Team") and contains(card.general_options_07, match: "Colored Frame") then recolor_image(input: "frame-p"+(if contains(card.general_options_07, match: "Retro Card Face") then "-evo" else "")+"-"+to_lower(stage())+(if contains(card.general_options_07, match: "EX Pokemon") then "-ex" else "")+"-colored.png", red: styling.User_Input_Team_Color, green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255))
					else						("frame-p"+(if contains(card.general_options_07, match: "Retro Card Face") then "-evo" else "")+"-"+to_lower(stage())+(if contains(card.general_options_07, match: "EX Pokemon") then "-ex" else "")+team_type()+".png")
				else "/pokemon-b-common.mse-include/blank.png"
	######################## Part of these items are found in the extra card fields
#########The Pokedex entry field underneath the window frame placed here so that it is underneath the popout layer
#########The text listing the pokemon statistics found below the image window
	pokedex text 1:
		left: { pokedex1_left() }
		top: { pokedex1_top() }
		width: { pokedex1_width() }
		height: { pokedex1_height() }
		z index: -1
		alignment: { pokedex1_align() }
		visible: { pokedex1_visible() }
		font
			name: { pokedex1_font() }
			weight: { pokedex1_weight() }
			style: { pokedex1_style() }
			size: { pokedex1_size() }
			color: { pokedex1_color() }
	pokedex text 2:
		left: { pokedex2_left() }
		top: { pokedex2_top() }
		width: { pokedex2_width() }
		height: { pokedex2_height() }
		z index: 6
		alignment: { pokedex2_align() }
		visible: { pokedex2_visible() }
		font
			name: { pokedex2_font() }
			weight: { pokedex2_weight() }
			style: { pokedex2_style() }
			size: { pokedex2_size() }
			color: { pokedex2_color() }
	######################## Popout layers 0
	######################## This layer is for the popout image
	card popout:
		left: { x_left(0) }
		top: { y_top(0) }
		width: { fun_expand_size(368) }
		height: { fun_expand_size(if contains(card.art_options, match: "Popout Art (for Advanced Users)") then 513 else 0) }
		z index: 0
		mask:
			script: if contains(card.general_options_07, match: "Retro Card Face")
					then if is_pokemon() then	"mask-full-p-evo.png"
					else if is_trainer() then	"mask-full-t-evo.png"
					else				"mask-full-e-evo.png"
				else if is_energy() then		"mask-full-e-bwxy.png"
				else if is_trainer() then		"mask-full-t-bwxy.png"
				else if stage()=="Basic" then		"mask-full-p-bwxy.png"
				else					"mask-full-p-bwxy-evolved.png"
		visible: { contains(card.art_options, match: "Popout Art (for Advanced Users)") }
	######################## Choice layers 2
	######################## This for choice tabs
	card type:
		left: { x_left(0) }
		top: { y_top(493) }
		width: { fun_expand_size(184) }
		height: { fun_expand_size(20) }
		z index: 2
		render style: image
		popup style: in place
		image: /pokemon-b-common.mse-include/blank.png
	art options:
		left: { x_left(185) }
		top: { y_top(493) }
		width: { fun_expand_size(184) }
		height: { fun_expand_size(20) }
		z index: 2
		render style: image
		popup style: in place
		image: /pokemon-b-common.mse-include/blank.png
	text options 3:
		left: { x_left(185) }
		top: { y_top(0) }
		width: { fun_expand_size(184) }
		height: { fun_expand_size(20) }
		z index: 2
		render style: image
		popup style: in place
		image: /pokemon-b-common.mse-include/blank.png
	general options 07:
		left: { x_left(0) }
		top: { y_top(0) }
		width: { fun_expand_size(184) }
		height: { fun_expand_size(20) }
		z index: 2
		render style: image
		popup style: in place
		image: /pokemon-b-common.mse-include/blank.png
	stage restored:
		left: { x_left(0) }
		top: { y_top(20) }
		width: { fun_expand_size(70) }
		height: { if is_pokemon() then fun_expand_size(70) else 0 }
		z index: 2
		render style: image
		popup style: in place
		visible: { if is_pokemon() then "yes" else "no" }
		image: /pokemon-b-common.mse-include/blank.png
	trainer:
		left: { x_left(0) }
		top: { y_top(20) }
		width: { fun_expand_size(70) }
		height: { fun_expand_size(if is_trainer() then 70 else 0) }
		z index: 2
		render style: image
		popup style: in place
		visible: { if is_trainer() then "yes" else "no" }
		image: /pokemon-b-common.mse-include/blank.png
	energy type:
		left: { x_left(if contains(card.general_options_07, match: "Retro Card Face") then 298 else 0) }
		top: { y_top(20) }
		width: { fun_expand_size(70) }
		height: { fun_expand_size(if is_energy() then 70 else 0) }
		z index: 2
		render style: image
		popup style: in place
		visible: { if is_energy() then "yes" else "no" }
		image: /pokemon-b-common.mse-include/blank.png
	card color 1:
		left: { x_left(if card.card_type=="Dual-Type" then energy_left()-energy_left_difference() else energy_left()) }
		top: { y_top(0) }
		width: { fun_expand_size(energy_width()) }
		height: { fun_expand_size(if is_pokemon() or (is_energy() and card.energy_type=="Basic") then energy_top()+energy_width() else 0) }
		visible: { if is_pokemon() or is_energy() then "yes" else "no" }
		z index: 3
		render style: image
		popup style: in place
		image: /pokemon-b-common.mse-include/blank.png
	card color 2:
		left: { x_left(energy_left()+energy_right_difference()) }
		top: { y_top(0) }
		width: { fun_expand_size(energy_width()) }
		height: { fun_expand_size(if card.card_type=="Dual-Type" then energy_top()+energy_width() else 0) }
		visible: { if card.card_type=="Dual-Type" then "yes" else "no" }
		z index: 3
		render style: image
		popup style: in place
		image: /pokemon-b-common.mse-include/blank.png
	texture type 1:
		left: { x_left(0) }
		top: { y_top(413) }
		width: { fun_expand_size(20) }
		height: { fun_expand_size(if is_pokemon() and not(background_type_1()=="User Defined") then 80 else 0) }
		z index: 2
		render style: image
		popup style: in place
		visible: { if is_pokemon() and not(background_type_1()=="User Defined") then "yes" else "no" }
		image: /pokemon-b-common.mse-include/blank.png
	texture type 2:
		left: { x_left(348) }
		top: { y_top(413) }
		width: { fun_expand_size(20) }
		height: { fun_expand_size(if card.card_type=="Dual-Type" and not(background_type_2()=="User Defined") then 80 else 0) }
		z index: 2
		render style: image
		popup style: in place
		visible: { if card.card_type=="Dual-Type" and not(background_type_2()=="User Defined") then "yes" else "no" }
		image: /pokemon-b-common.mse-include/blank.png
	color texture 1:
		left: { x_left(0) }
		top: { y_top(413) }
		width: { fun_expand_size(20) }
		height: { fun_expand_size(if is_pokemon() and background_type_1()=="User Defined" then 80 else 0) }
		z index: 2
		render style: image
		popup style: in place
		visible: { if is_pokemon() and background_type_1()=="User Defined" then "yes" else "no" }
		image: /pokemon-b-common.mse-include/blank.png
	color texture 2:
		left: { x_left(348) }
		top: { y_top(413) }
		width: { fun_expand_size(20) }
		height: { fun_expand_size(if card.card_type=="Dual-Type" and background_type_2()=="User Defined" then 80 else 0) }
		z index: 2
		render style: image
		popup style: in place
		visible: { if card.card_type=="Dual-Type" and background_type_2()=="User Defined" then "yes" else "no" }
		image: /pokemon-b-common.mse-include/blank.png
	basic texture:
		left: { x_left(0) }
		top: { y_top(413) }
		width: { fun_expand_size(20) }
		height: { fun_expand_size(if is_energy() and card.energy_type=="Basic" then 80 else 0) }
		z index: 2
		render style: image
		popup style: in place
		visible: { if is_energy() and card.energy_type=="Basic" then "yes" else "no" }
		image: /pokemon-b-common.mse-include/blank.png
	metal texture:
		left: { x_left(348) }
		top: { y_top(413) }
		width: { fun_expand_size(20) }
		height: { fun_expand_size(if is_energy() and card.energy_type=="Basic" and card.card_color_1=="Metal" then 80 else 0) }
		z index: 2
		render style: image
		popup style: in place
		visible: { if is_energy() and card.energy_type=="Basic" and card.card_color_1=="Metal" then "yes" else "no" }
		image: /pokemon-b-common.mse-include/blank.png
	basic user image type:
		left: { x_left(348) }
		top: { y_top(413) }
		width: { fun_expand_size(20) }
		height: { fun_expand_size(if is_energy() and card.energy_type=="Basic" and basic_energy_suffix()=="User Image" then 80 else 0) }
		z index: 2
		render style: image
		popup style: in place
		visible: { if is_energy() and card.energy_type=="Basic" and basic_energy_suffix()=="User Image" then "yes" else "no" }
	dual blend type:
		left: { x_left(0) }
		top: { y_top(90) }
		width: { fun_expand_size(20) }
		height: { fun_expand_size(if card.card_type=="Dual-Type" then 80 else 0) }
		z index: 2
		render style: image
		popup style: in place
		visible: { if card.card_type=="Dual-Type" then "yes" else "no" }
		image: /pokemon-b-common.mse-include/blank.png
	######################## Overborder Frame 4
	######################## This layer is for items needed just before the user input text.

	######################## Also has materials found in the extra card fields
################# This is the image file used to for the user driven logo
	team logo:
		left: { x_left(if is_pokemon() then if contains(card.general_options_07, match: "Retro Card Face") then 220 else 235 else if is_energy() then if contains(card.general_options_07, match: "Retro Card Face") then 239 else 242 else if contains(card.general_options_07, match: "Retro Card Face") then 221 else 235) }
		top: 
			script: y_top(if is_pokemon() 
				then if contains(card.general_options_07, match: "Retro Card Face") then if contains(card.general_options_07, match: "Pokemon Ancient Ability") then 98 else 70 
				else if contains(card.general_options_07, match: "Pokemon Ancient Ability") then if stage()=="Basic" then 78 else 82 else if stage()=="Restored" then 58 else 48 
				else if is_energy() then if contains(card.general_options_07, match: "Retro Card Face") then 77 else 50 
				else if contains(card.general_options_07, match: "Retro Card Face") then 118 else 80)
		width: { fun_expand_size(110) }
		height: { fun_expand_size(if contains(card.general_options_07, match: "User Defined Team") and contains(card.general_options_07, match: "Team Logo") then 20 else 0) }
		z index: 4
		visible: { contains(card.general_options_07, match: "User Defined Team") and contains(card.general_options_07, match: "Team Logo") }

#########These two fields show the pokemon energy symbol.  It was converted to a symbol font to allow easy modification in the future to alternate symbols
	color text 1:
		left: { x_left(if card.card_type=="Dual-Type" then energy_left()-energy_left_difference() else energy_left()) }
		top: { y_top(energy_top()) }
		width: { fun_expand_size(energy_width()) }
		height: { fun_expand_size(if (is_pokemon() or (is_energy() and card.energy_type=="Basic")) and not(card.card_color_1=="User Defined") then energy_width() else 0) }
		visible: { if (is_pokemon() or (is_energy() and card.energy_type=="Basic")) and not(card.card_color_1=="User Defined") then "yes" else "no" }
		z index: 5
		always symbol: true
		symbol font:
			name: pokemon-a-color
			size: { fun_expand_font(energy_width()) }
	color text 1 dup:
		left: { x_left(basic_energy_left()) }
		top: { y_top(basic_energy_top()) }
		width: { fun_expand_size(basic_energy_width()) }
		height: { fun_expand_size(if is_energy() and card.energy_type=="Basic" and not(card.card_color_1=="User Defined") then basic_energy_width() else 0) }
		visible: { is_energy() and card.energy_type=="Basic" and not(card.card_color_1=="User Defined") }
		z index: 5
		always symbol: true
		symbol font:
			name: pokemon-a-lg-color
			size: { fun_expand_font(basic_energy_width()) }
	color text 2:
		left: { x_left(energy_left()+energy_right_difference()) }
		top: { y_top(energy_top()) }
		width: { fun_expand_size(energy_width()) }
		height: { fun_expand_size(if card.card_type=="Dual-Type" and not(card.card_color_2=="User Defined") then energy_width() else 0) }
		z index: 3
		visible: { if (card.card_type=="Dual-Type" and not(card.card_color_2=="User Defined")) then "yes" else "no" }
		always symbol: true
		symbol font:
			name: pokemon-a-color
			size: { fun_expand_font(energy_width()) }
##########This field allows a user input team leader image
	gym leader pic:
		left: { x_left(293) }
		top: { y_top(428) }
		width: { fun_expand_size(54) }
		height: { fun_expand_size(if contains(card.general_options_07, match: "User Defined Team") and contains(card.general_options_07, match: "Team Gym Leader Image") and is_pokemon() and (contains(card.art_options, match: "Faded Full Art") or not(contains(card.art_options, match: "Full Art"))) then 48 else 0) }
		z index: 4
		visible: { contains(card.general_options_07, match: "User Defined Team") and contains(card.general_options_07, match: "Team Gym Leader Image") and is_pokemon() and (contains(card.art_options, match: "Faded Full Art") or not(contains(card.art_options, match: "Full Art"))) }
#########These two fields allow a user input energy orb image
	energy orb pic 1:
		left: { x_left(if card.card_type=="Dual-Type" then energy_left()-energy_left_difference() else energy_left()) }
		top: { y_top(energy_top()) }
		width: { fun_expand_size(energy_width()) }
		height: { fun_expand_size(if ((is_pokemon() or (is_energy() and card.energy_type=="Basic")) and card.card_color_1=="User Defined") then energy_width() else 0) }
		visible: { if ((is_pokemon() or (is_energy() and card.energy_type=="Basic")) and card.card_color_1=="User Defined") then "yes" else "no" }
		z index: 6
	energy orb pic 2:
		left: { x_left(energy_left()+energy_right_difference()) }
		top: { y_top(energy_top()) }
		width: { fun_expand_size(energy_width()) }
		height: { fun_expand_size(if card.card_type=="Dual-Type" and card.card_color_2=="User Defined" then energy_width() else 0) }
		z index: 4
		visible: { if card.card_type=="Dual-Type" and card.card_color_2=="User Defined" then "yes" else "no" }
#########Title for EX Rule Reminder
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	title reminder 2 7:
		left: { title_2_left() }
		top: { title_2_top() }
		width: { title_2_width() }
		height: { title_rem_2_height() }
		z index: 4
		visible: { title_rem_2_visible() }
		alignment: { title_2_align() }
		font:
			name: { title_2_font() }
			weight: { title_2_weight() }
			style: { title_2_style() }
			size: { title_2_size() }
			color: { title_2_color() }
	title text 2:
		left: { title_2_left() }
		top: { title_2_top() }
		width: { title_2_width() }
		height: { title_txt_2_height() }
		z index: 4
		visible: { title_txt_2_visible() }
		alignment: { title_2_align() }
		font:
			name: { title_2_font() }
			weight: { title_2_weight() }
			style: { title_2_style() }
			size: { title_2_size() }
			color: { title_2_color() }
#########Title for Mega Rule Reminder
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	title reminder 3 7:
		left: { title_3_left() }
		top: { title_3_top() }
		width: { title_3_width() }
		height: { title_rem_3_height() }
		z index: 6
		visible: { title_rem_3_visible() }
		alignment: { title_3_align() }
		font:
			name: { title_3_font() }
			weight: { title_3_weight() }
			style: { title_3_style() }
			size: { title_3_size() }
			color: { title_3_color() }
	title text 3:
		left: { title_3_left() }
		top: { title_3_top() }
		width: { title_3_width() }
		height: { title_txt_3_height() }
		z index: 6
		visible: { title_txt_3_visible() }
		alignment: { title_3_align() }
		font:
			name: { title_3_font() }
			weight: { title_3_weight() }
			style: { title_3_style() }
			size: { title_3_size() }
			color: { title_3_color() }
#########Set Symbol
	set:
		left: { x_left(if contains(card.general_options_07, match: "Retro Card Face") then 332 else 326) }
		top: { y_top(477) }
		width: { fun_expand_size(22) }
		height: { fun_expand_size(22) }
		z index: 4
		visible: { contains(set.visibility_options, match: "Visible Set Symbol") and not(contains(set.visibility_options, match: "User image for set symbol")) }
		render style: image
		choice images:
			common: script: symbol_variation(symbol: set.symbol, border_radius: if set.include_border_on_set_symbol=="yes" then 0.1 else 0, fill_color: set.set_symbol_fill_color, border_color: set.set_symbol_border_color)
	set symbol:
		left: { x_left(if contains(card.general_options_07, match: "Retro Card Face") then 332 else 326) }
		top: { y_top(477) }
		width: { fun_expand_size(22) }
		height: { fun_expand_size(22) }
		z index: 4
		visible: { contains(set.visibility_options, match: "Visible Set Symbol") and contains(set.visibility_options, match: "User image for set symbol") }
		render style: image
		image: { set.symbol_image }
	######################## First Text Frame 6
	######################## This layer is for input text

	######################## Also has materials found in the extra card fields
#########card number
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	card number:
		left: { card_no_left() }
		top: { card_no_top() }
		width: { card_no_width() }
		height: { if contains(set.visibility_options, match: "Visible Card Numbers on all cards") then card_no_height() else 0 }
		z index: 6
		alignment: { card_no_align() }
		visible: { if contains(set.visibility_options, match: "Visible Card Numbers on all cards") then "yes" else "no" }
		font:
			name: { card_no_font() }
			size: { card_no_size() }
			weight: { card_no_weight() }
			style: { card_no_style() }
			color: { if is_two_tone() then rgba(0,0,0,0) else if is_wt_text() then rgb(255,255,255) else rgb(0,0,0) }
#########Illustrator name
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	illustrator:
		left: { ill_left() }
		top: { ill_top() }
		width: { ill_width() }
		height: { if contains(card.text_options_3, match: "Use Primary Set Artist") then 0 else ill_height() }
		z index: 6
		alignment: { ill_align() }
		visible: { if contains(card.text_options_3, match: "Use Primary Set Artist") then "no" else "yes" }
		font:
			name: { ill_font() }
			weight: { ill_weight() }
			style: { ill_style() }
			size: { ill_size() }
			color: { if is_two_tone() then rgba(0,0,0,0) else if is_wt_text() then rgb(255,255,255) else rgb(0,0,0) }
#########Copyright
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	copyright:
		left: { copy_left() }
		top: { copy_top() }
		width: { copy_width() }
		height: { if contains(set.visibility_options, match: "Visible Copyright on all cards") and not(contains(card.text_options_3, match: "Use Set Copyright")) then copy_height() else 0 }
		z index: 6
		alignment: { copy_align() }
		visible: { if contains(set.visibility_options, match: "Visible Copyright on all cards") and not(contains(card.text_options_3, match: "Use Set Copyright")) then "yes" else "no" }
		font:
			name: { copy_font() }
			size: { copy_size() }
			weight: { copy_weight() }
			style: { copy_style() }
			color: { if is_two_tone() then rgba(0,0,0,0) else if is_wt_text() then rgb(255,255,255) else rgb(0,0,0) }
#########Rarity Symbol
	rarity:
		left: { x_left((if contains(card.general_options_07, match: "Retro Card Face") then 323 else 317)-(if is_outline() then 2 else 0)) }
		top: { y_top((if contains(card.general_options_07, match: "Retro Card Face") then 487 else 484)-(if is_outline() then 2 else 0)) }
		height: { fun_expand_size(7+(if is_outline() then 4 else 0)) }
		width: { fun_expand_size(7+(if is_outline() then 4 else 0)) }
		z index: 6
		render style: image
		visible: { if contains(set.visibility_options, match: "Visible Rarity symbol on all cards") then "yes" else "no" }
		choice images:
			common:		{ if is_outline() then "/pokemon-b-common.mse-include/rarity-out-common.png" else if rarity_color() then "/pokemon-b-common.mse-include/rarity-wt-common.png" else "/pokemon-b-common.mse-include/rarity-bk-common.png" }
			uncommon:	{ if is_outline() then "/pokemon-b-common.mse-include/rarity-out-uncommon.png" else if rarity_color() then "/pokemon-b-common.mse-include/rarity-wt-uncommon.png" else "/pokemon-b-common.mse-include/rarity-bk-uncommon.png" }
			rare:		{ if is_outline() then "/pokemon-b-common.mse-include/rarity-out-rare.png" else if rarity_color() then "/pokemon-b-common.mse-include/rarity-wt-rare.png" else "/pokemon-b-common.mse-include/rarity-bk-rare.png" }
			extra rare:	{ if is_outline() then "/pokemon-b-common.mse-include/rarity-out-erare.png" else if rarity_color() then "/pokemon-b-common.mse-include/rarity-wt-erare.png" else "/pokemon-b-common.mse-include/rarity-bk-erare.png" }
#########Text overlay that says "weakness"
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	weakoverlay:
		left: { weak_ov_left() }
		top: { weak_ov_top() }
		width: { weak_ov_width() }
		height: { weak_ov_height() }
		z index: 6
		visible: { wrr_ov_visible() }
		alignment: { wrr_ov_align() }
		font:
			name: { wrr_ov_font() }
			weight: { wrr_ov_weight() }
			style: { wrr_ov_style() }
			size: { wrr_ov_size() }
			color: { if is_two_tone() then rgba(0,0,0,0) else if is_wt_text() then rgb(255,255,255) else rgb(0,0,0) }
#########Text overlay that says "resistance"
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	resoverlay:
		left: { res_ov_left() }
		top: { res_ov_top() }
		width: { res_ov_width() }
		height: { res_ov_height() }
		z index: 6
		visible: { wrr_ov_visible() }
		alignment: { wrr_ov_align() }
		font:
			name: { wrr_ov_font() }
			weight: { wrr_ov_weight() }
			style: { wrr_ov_style() }
			size: { wrr_ov_size() }
			color: { if is_two_tone() then rgba(0,0,0,0) else if is_wt_text() then rgb(255,255,255) else rgb(0,0,0) }
#########Text overlay that says "retreat cost"
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	retoverlay:
		left: { ret_ov_left() }
		top: { ret_ov_top() }
		width: { ret_ov_width() }
		height: { ret_ov_height() }
		z index: 6
		visible: { wrr_ov_visible() }
		alignment: { wrr_ov_align() }
		line height soft: { ret_ov_lsoft() }
		font:
			name: { wrr_ov_font() }
			weight: { wrr_ov_weight() }
			style: { wrr_ov_style() }
			size: { wrr_ov_size() }
			color: { if is_two_tone() then rgba(0,0,0,0) else if is_wt_text() then rgb(255,255,255) else rgb(0,0,0) }
#########Card Title
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	card name:
		left: { card_name_left() }
		top: { card_name_top() }
		width: { card_name_width() }
		height: { card_name_height() }
		visible: { card_name_visible() }
		z index: 6
		alignment: { card_name_align() }
		symbol font:
			name: { card_name_symbol_font() }
			size: { card_name_symbol_size() }
		font:
			name: { card_name_font() }
			weight: { card_name_weight() }
			style: { card_name_style() }
			size: { card_name_size() }
			color: { if is_wt_top() then rgb(255,255,255) else rgb(0,0,0) }
#########HP Text
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	hp:
		left: { hp_left() }
		top: { hp_top() }
		width: { hp_width() }
		height: { hp_height() }
		z index: 6
		alignment: { hp_align() }
		visible: { hp_visible() }
		font:
			name: { hp_font() }
			weight: { hp_weight() }
			style: { hp_style() }
			size: { hp_size() }
			color: { hp_color() }
#########The Weakness for pokemon and doubles as the top energy top marker for energy
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	weakness:
		left: { weak_left() }
		top: { weak_top() }
		width: { weak_width() }
		height: { weak_height() }
		z index: 6
		always symbol: true
		visible: { weak_visible() }
		alignment: { weak_align() }
		font:
			name: { weak_font() }
			size: { weak_size() }
			weight: { weak_weight() }
			style: { weak_style() }
			color: { if is_two_tone() then rgba(0,0,0,0) else if is_wt_text() then rgb(255,255,255) else rgb(0,0,0) }
		symbol font:
			name: { weak_symbol_font() }
			size: { weak_symbol_size() }
#########The resistance for pokemon
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	resistance:
		left: { resist_left() }
		top: { resist_top() }
		width: { resist_width() }
		height: { resist_height() }
		z index: 6
		always symbol: true
		visible: { resist_visible() }
		alignment: { resist_align() }
		font:
			name: { resist_font() }
			size: { resist_size() }
			weight: { resist_weight() }
			style: { resist_style() }
			color: { if is_two_tone() then rgba(0,0,0,0) else if is_wt_text() then rgb(255,255,255) else rgb(0,0,0) }
		symbol font:
			name: { resist_symbol_font() }
			size: { resist_symbol_size() }
#########The retreat cost for pokemon uses a poke-a-energy symbol font only,
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	retreat cost:
		left: { retreat_left() }
		top: { retreat_top() }
		width: { retreat_width() }
		height: { retreat_height() }
		z index: 6
		visible: { retreat_visible() }
		symbol font:
			name: { retreat_symbol_font() }
			size: { retreat_symbol_size() }
		always symbol: true
		alignment: { retreat_align() }
#########Flavor Text
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	flavor text:
		left: { flavor_left() }
		top: { flavor_top() }
		width: { flavor_width() }
		height: { flavor_height() }
		z index: 6
		visible: { flavor_visible() }
		alignment: { flavor_align() }
		line height soft: { flavor_lh_soft() }
		padding left: { flavor_pad_left() }
		mask: { flavor_mask() }
		font:
			name: { flavor_font() }
			scale down to: 6
			weight: { flavor_weight() }
			style: { flavor_style() }
			size: { flavor_size() }
			color: { if is_two_tone() then rgba(0,0,0,0) else if is_wt_text() then rgb(255,255,255) else rgb(0,0,0) }
#########The pokemon this one evolves from
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	evolution reminder 1:
		left: { evolution_left() }
		top: { evolution_top() }
		width: { evolution_width() }
		height: { evolution_rem_height() }
		alignment: { evolution_align() }
		z index: 6
		visible: { evolution_rem_visible() }
		font:
			name: { evolution_font() }
			weight: { evolution_weight() }
			style: { evolution_style() }
			size: { evolution_size() }
			color: { evolution_color() }
	evolution text 1:
		left: { evolution_left() }
		top: { evolution_top() }
		width: { evolution_width() }
		height: { evolution_txt_height() }
		alignment: { evolution_align() }
		z index: 6
		visible: { evolution_txt_visible() }
		font:
			name: { evolution_font() }
			weight: { evolution_weight() }
			style: { evolution_style() }
			size: { evolution_size() }
			color: { evolution_color() }
######### User input, the actual pokemon it is evolved from
	evolution entry:
		left: { evo_left() }
		top: { evolution_top() }
		width: { evo_width() }
		height: { evo_height() }
		alignment: { evolution_align() }
		z index: 6
		visible: { evo_visible() }
		font:
			name: { evolution_font() }
			weight: { evolution_weight() }
			style: { evolution_style() }
			size: { evolution_size() }
			color: { evolution_color() }
#########This is the reminder text explaining the action to take for this evolution
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	evolution reminder 2 7:
		left: { evorule_left() }
		top: { evorule_top() }
		width: { evorule_width() }
		height: { evorule_rem_height() }
		visible: { evorule_rem_visible() }
		alignment: { evorule_align() }
		z index: 6
		font:
			name: { evorule_font() }
			weight: { evorule_weight() }
			style: { evorule_style() }
			size: { evorule_size() }
			color: { evorule_color() }
	evolution text 2:
		left: { evorule_left() }
		top: { evorule_top() }
		width: { evorule_width() }
		height: { evorule_txt_height() }
		visible: { evorule_txt_visible() }
		alignment: { evorule_align() }
		z index: 6
		font:
			name: { evorule_font() }
			weight: { evorule_weight() }
			style: { evorule_style() }
			size: { evorule_size() }
			color: { evorule_color() }
#########Image showing the evolution line of the evolved pokemon
	evolution pic:
		left: { x_left(if is_energy() and card.energy_type=="Basic" and card.card_color_1=="User Defined" then basic_energy_left() else if is_pokemon() then if contains(card.general_options_07, match: "Retro Card Face") then 28 else 16 else 0) }
		top: { y_top(if is_energy() and card.energy_type=="Basic" and card.card_color_1=="User Defined" then basic_energy_top() else if is_pokemon() then if contains(card.general_options_07, match: "Retro Card Face") then 32 else 35 else 0) }
		width: { fun_expand_size(if is_energy() and card.energy_type=="Basic" and card.card_color_1=="User Defined" then basic_energy_width() else if is_pokemon() then if contains(card.general_options_07, match: "Retro Card Face") then 46 else 48 else 0) }
		height: { fun_expand_size(if is_energy() and card.energy_type=="Basic" and card.card_color_1=="User Defined" then basic_energy_width() else if is_pokemon() and not(stage()=="Basic") then if contains(card.general_options_07, match: "Retro Card Face") then 40 else 44 else 0) }
		z index: 6
		mask: 
			script: if is_energy() and card.energy_type=="Basic" and card.card_color_1=="User Defined" then "/pokemon-b-common.mse-include/mask-e-large.png" 
				else if is_pokemon() and not(contains(card.general_options_07, match: "Retro Card Face"))
					then if stage()=="Restored" and not(contains(card.general_options_07, match: "EX Pokemon")) then "mask-p-restored-evolution.png"
					else if not(stage()=="Basic") then "/pokemon-b-common.mse-include/mask-p-stage-evolution.png"
					else "/pokemon-b-common.mse-include/mask-blank.png"
				else "/pokemon-b-common.mse-include/mask-blank.png"
		visible: { (is_pokemon() and not(stage()=="Basic")) or (is_energy() and card.energy_type=="Basic" and card.card_color_1=="User Defined") }
#########Text on the stage bar & basic Pokemon
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	title reminder 1 7:
		left: { title_1_left() }
		top: { title_1_top() }
		width: { title_1_width() }
		height: { title_rem_1_height() }
		z index: 6
		visible: { title_rem_1_visible() }
		alignment: { title_1_align() }
		font:
			name: { title_1_font() }
			weight: { title_1_weight() }
			style: { title_1_style() }
			size: { title_1_size() }
			color: { title_1_color() }
	title text 1:
		left: { title_1_left() }
		top: { title_1_top() }
		width: { title_1_width() }
		height: { title_txt_1_height() }
		z index: 6
		visible: { title_txt_1_visible() }
		alignment: { title_1_align() }
		font:
			name: { title_1_font() }
			weight: { title_1_weight() }
			style: { title_1_style() }
			size: { title_1_size() }
			color: { title_1_color() }
#########This text explains the the rules of the trainers and the EX rule for Pokemon EX
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	special rule reminder 1 7:
		left: { special_rule_left() }
		top: { special_rule_top() }
		width: { special_rule_width() }
		height: { special_rule_rem_height() }
		z index: 6
		visible: { special_rule_rem_visible() }
		alignment: { special_rule_align() }
		line height soft: { special_rule_lh_soft() }
		line height hard: { special_rule_lh_hard() }
		padding left: { special_rule_pad_left() }
		padding bottom: { special_rule_pad_bottom() }
		padding right: { special_rule_pad_right() }
		mask: { special_rule_mask() }
		font:
			name: { special_rule_font() }
			weight: { special_rule_weight() }
			style: { special_rule_style() }
			size: { special_rule_size() }
			color: { special_rule_color() }
	special rule text 1:
		left: { special_rule_left() }
		top: { special_rule_top() }
		width: { special_rule_width() }
		height: { special_rule_txt_height() }
		z index: 6
		visible: { special_rule_txt_visible() }
		alignment: { special_rule_align() }
		line height soft: { special_rule_lh_soft() }
		line height hard: { special_rule_lh_hard() }
		padding left: { special_rule_pad_left() }
		padding bottom: { special_rule_pad_bottom() }
		padding right: { special_rule_pad_right() }
		mask: { special_rule_mask() }
		font:
			name: { special_rule_font() }
			weight: { special_rule_weight() }
			style: { special_rule_style() }
			size: { special_rule_size() }
			color: { special_rule_color() }
#########This text explains the the rules of the tools and the Mega rule for Pokemon EX
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	special rule reminder 2 7:
		left: { special_rule_2_left() }
		top: { special_rule_2_top() }
		width: { special_rule_2_width() }
		height: { special_rule_rem_2_height() }
		z index: 6
		visible: { special_rule_rem_2_visible() }
		alignment: { special_rule_2_align() }
		line height soft: { special_rule_2_lh_soft() }
		line height hard: { special_rule_2_lh_hard() }
		padding left: { special_rule_2_pad_left() }
		padding bottom: { special_rule_2_pad_bottom() }
		padding right: { special_rule_2_pad_right() }
		padding top: { special_rule_2_pad_top() }
		mask: { special_rule_2_mask() }
		font:
			name: { special_rule_2_font() }
			weight: { special_rule_2_weight() }
			style: { special_rule_2_style() }
			size: { special_rule_2_size() }
			color: { special_rule_2_color() }
	special rule text 2:
		left: { special_rule_2_left() }
		top: { special_rule_2_top() }
		width: { special_rule_2_width() }
		height: { special_rule_txt_2_height() }
		z index: 6
		visible: { special_rule_txt_2_visible() }
		alignment: { special_rule_2_align() }
		line height soft: { special_rule_2_lh_soft() }
		line height hard: { special_rule_2_lh_hard() }
		padding left: { special_rule_2_pad_left() }
		padding bottom: { special_rule_2_pad_bottom() }
		padding right: { special_rule_2_pad_right() }
		padding top: { special_rule_2_pad_top() }
		mask: { special_rule_2_mask() }
		font:
			name: { special_rule_2_font() }
			weight: { special_rule_2_weight() }
			style: { special_rule_2_style() }
			size: { special_rule_2_size() }
			color: { special_rule_2_color() }
#########This text gives the Ancient Ability Title
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	ability text 1:
		left: { ability_1_left() }
		top: { ability_1_top() }
		width: { ability_1_width() }
		height: { ability_txt_1_height() }
		alignment: { ability_1_align() }
		z index: 8
		visible: { ability_txt_1_visible() }
		font:
			name: { ability_1_font() }
			weight: { ability_1_weight() }
			style: { ability_1_style() }
			size: { ability_1_size() }
			color: { ability_1_color() }
	ability rule text 1:
		left: { ability_rule_1_left() }
		top: { ability_rule_1_top() }
		width: { ability_rule_1_width() }
		height: { ability_rule_1_height() }
		visible: { ability_rule_1_visible() }
		z index: 8
		alignment: { ability_rule_1_align() }
		line height hard: { ability_rule_1_lh_hard() }
		line height soft: { ability_rule_1_lh_soft() }
		font:
			name: { ability_rule_1_font() }
			weight: { ability_rule_1_weight() }
			style: { ability_rule_1_style() }
			size: { ability_rule_1_size() }
			scale down to: 6
			color: { ability_rule_1_color() }
######################## Rule Text everything that follows within this layer is Attack/Rule Text on the cards.
#########Rules text used by energy and trainers, kept separate from pokemon because of the scale down issue
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	rule np 1:
		left: { rule_np_1_left() }
		top: { rule_np_1_top() }
		width: { rule_np_1_width() }
		height: { rule_np_1_height() }
		z index: 6
		visible: { rule_np_1_visible() }
		alignment: { rule_np_1_align() }
		line height hard: { rule_np_1_lh_hard() }
		line height soft: { rule_np_1_lh_soft() }
		symbol font:
			name: { rule_np_1_symbol_font() }
			size: { rule_np_1_symbol_size() }
			alignment: middle center
		font:
			name: { rule_np_1_font() }
			size: { rule_np_1_size() }
			weight: { rule_np_1_weight() }
			style: { rule_np_1_style() }
			scale down to: 6
			color: { rgb(0,0,0) }
#########Rules text for split stadiums and duplicate text fields, this is the upside down text
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	rule np 2:
		left: { rule_np_2_left() }
		top: { rule_np_2_top() }
		width: { rule_np_2_width() }
		height: { rule_np_2_height() }
		angle: { rule_np_2_angle() }
		z index: 6
		visible: { rule_np_2_visible() }
		alignment: { rule_np_2_align() }
		line height hard: { rule_np_2_lh_hard() }
		symbol font:
			name: { rule_np_2_symbol_font() }
			size: { rule_np_2_symbol_size() }
		font:
			name: { rule_np_2_font() }
			size: { rule_np_2_size() }
			weight: { rule_np_2_weight() }
			style: { rule_np_2_style() }
			scale down to: 6
			color: rgb(0,0,0)
#########The next field lists the cost of the first attack
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	cost new 1:
		left: { cost_1_left() }
		top: { cost_1_top() }
		width: { cost_1_width() }
		height: { cost_1_height() }
		z index: 6
		visible: { cost_1_visible() }
		alignment: { cost_align() }
		always symbol: true
		symbol font:
			name: { cost_symbol_font() }
			size: { cost_symbol_size() }
#########This shows title of the 1st poke-power or body
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	attack 1:
		left: { attack_1_left() }
		top: { attack_1_top() }
		width: { attack_1_width() }
		height: { attack_1_height() }
		z index: 6
		visible: { attack_1_visible() }
		alignment: { attack_align() }
		font:
			name: { attack_font() }
			weight: { attack_weight() }
			style: { attack_style() }
			size: { attack_size() }
			color: { attack_1_color() }
#########This shows the 1st attacks damage
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	damage 1:
		left: { damage_1_left() }
		top: { damage_1_top() }
		width: { damage_1_width() }
		height: { damage_1_height() }
		z index: 6
		visible: { damage_1_visible() }
		alignment: { damage_align() }
		font:
			name: { damage_font() }
			weight: { damage_weight() }
			style: { damage_style() }
			size: { damage_size() }
			color: { if is_two_tone() then rgba(0,0,0,0) else if is_wt_text() then rgb(255,255,255) else rgb(0,0,0) }
#########This field is the title and rules text
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	rule text 1:
		left: { rule_1_left() }
		top: { rule_1_top() }
		width: { rule_1_width() }
		height: { rule_1_height() }
		z index: 6
		visible: { rule_1_visible() }
		alignment: { rule_1_align() }
		line height hard: { rule_lh_hard() }
		symbol font:
			name: { rule_symbol_font() }
			size: { rule_symbol_size() }
		font:
			name: { rule_font() }
			weight: { rule_weight() }
			style: { rule_style() }
			size: { rule_size() }
			scale down to: 6
			color: { if is_two_tone() then rgba(0,0,0,0) else if is_wt_text() then rgb(255,255,255) else rgb(0,0,0) }
#########The next fields lists the cost of the second attack
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	cost new 2:
		left: { cost_2_left() }
		top: { cost_2_top() }
		width: { cost_2_width() }
		height: { cost_2_height() }
		z index: 6
		visible: { cost_2_visible() }
		alignment: { cost_align() }
		always symbol: true
		symbol font:
			name: { cost_symbol_font() }
			size: { cost_symbol_size() }
#########This shows title of the 2nd poke-power or body
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	attack 2:
		left: { attack_2_left() }
		top: { attack_2_top() }
		width: { attack_2_width() }
		height: { attack_2_height() }
		z index: 6
		visible: { attack_2_visible() }
		alignment: { attack_align() }
		font:
			name: { attack_font() }
			weight: { attack_weight() }
			style: { attack_style() }
			size: { attack_size() }
			color: { attack_2_color() }
#########This shows the 2nd attacks damage
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	damage 2:
		left: { damage_2_left() }
		top: { damage_2_top() }
		width: { damage_2_width() }
		height: { damage_2_height() }
		z index: 6
		visible: { damage_2_visible() }
		alignment: { damage_align() }
		font:
			name: { damage_font() }
			weight: { damage_weight() }
			style: { damage_style() }
			size: { damage_size() }
			color: { if is_two_tone() then rgba(0,0,0,0) else if is_wt_text() then rgb(255,255,255) else rgb(0,0,0) }
#########This field is the title and rules text
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	rule text 2:
		left: { rule_2_left() }
		top: { rule_2_top() }
		width: { rule_2_width() }
		height: { rule_2_height() }
		z index: 6
		visible: { rule_2_visible() }
		alignment: { rule_2_align() }
		line height hard: { rule_lh_hard() }
		symbol font:
			name: { rule_symbol_font() }
			size: { rule_symbol_size() }
		font:
			name: { rule_font() }
			weight: { rule_weight() }
			style: { rule_style() }
			size: { rule_size() }
			scale down to: 6
			color: { if is_two_tone() then rgba(0,0,0,0) else if is_wt_text() then rgb(255,255,255) else rgb(0,0,0) }
#########The next field lists the cost of the third attack
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	cost new 3:
		left: { cost_3_left() }
		top: { cost_3_top() }
		width: { cost_3_width() }
		height: { cost_3_height() }
		z index: 6
		visible: { cost_3_visible() }
		alignment: { cost_align() }
		always symbol: true
		symbol font:
			name: { cost_symbol_font() }
			size: { cost_symbol_size() }
#########This shows title of the 3rd poke-power or body
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	attack 3:
		left: { attack_3_left() }
		top: { attack_3_top() }
		width: { attack_3_width() }
		height: { attack_3_height() }
		z index: 6
		visible: { attack_3_visible() }
		alignment: { attack_align() }
		font:
			name: { attack_font() }
			weight: { attack_weight() }
			style: { attack_style() }
			size: { attack_size() }
			color: { attack_3_color() }
#########This shows the 3rd attacks damage
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	damage 3:
		left: { damage_3_left() }
		top: { damage_3_top() }
		width: { damage_3_width() }
		height: { damage_3_height() }
		z index: 6
		visible: { damage_3_visible() }
		alignment: { damage_align() }
		font:
			name: { damage_font() }
			weight: { damage_weight() }
			style: { damage_style() }
			size: { damage_size() }
			color: { if is_two_tone() then rgba(0,0,0,0) else if is_wt_text() then rgb(255,255,255) else rgb(0,0,0) }
#########This field is the title and rules text
######### Do not change any values found in field specific function/variables these are used to keep the duplicate text fields the same, the duplicate fields are found in the extra card fields
	rule text 3:
		left: { rule_3_left() }
		top: { rule_3_top() }
		width: { rule_3_width() }
		height: { rule_3_height() }
		z index: 6
		visible: { rule_3_visible() }
		alignment: { rule_3_align() }
		line height hard: { rule_lh_hard() }
		symbol font:
			name: { rule_symbol_font() }
			size: { rule_symbol_size() }
		font:
			name: { rule_font() }
			weight: { rule_weight() }
			style: { rule_style() }
			size: { rule_size() }
			scale down to: 6
			color: { if is_two_tone() then rgba(0,0,0,0) else if is_wt_text() then rgb(255,255,255) else rgb(0,0,0) }

	######################## Choice layers 8
	######################## This layer displays the informational text for the use of this tool template
#########This is the image field to show the notification for the tournament placement
	place:
		left: { x_left(if contains(card.general_options_07, match: "Retro Card Face") then if is_pokemon() then 48 else if is_trainer() then 42 else 22	else if is_energy() then 20 else if is_trainer() then 48 else 40) }
		top: { y_top(if contains(card.general_options_07, match: "Retro Card Face") then if is_pokemon() then 251 else if is_trainer() then 270 else 301 else if is_trainer() then 420 else if is_energy() then 455 else 235) }
		width: { fun_expand_size(94) }
		height: { fun_expand_size(if contains(card.art_options, match: "Add Tournament Place Icons") then 14 else 0) }
		visible: { if contains(card.art_options, match: "Add Tournament Place Icons") then "yes" else "no" }
		z index: 8
		render style: image
		popup style: in place
		choice images:
			1st:	/pokemon-b-common.mse-include/place-1.png
			2nd:	/pokemon-b-common.mse-include/place-2.png
			3rd:	/pokemon-b-common.mse-include/place-3.png
			4th:	/pokemon-b-common.mse-include/place-4.png
			5th:	/pokemon-b-common.mse-include/place-5.png
			6th:	/pokemon-b-common.mse-include/place-6.png
			7th:	/pokemon-b-common.mse-include/place-7.png
			8th:	/pokemon-b-common.mse-include/place-8.png
############################################################## Extra Card Fields
############################# Non-User Input Choice Fields for Images
extra card field:
	type: choice
	name: shade
	show statistics: false
	card list allow: false
	save value: false
	editable: false
	choice: shade
extra card field:
	type: choice
	name: ancient ability
	show statistics: false
	card list allow: false
	description: Ancient Ability Color
	initial: red
	choice: red
	choice: purple
	choice: blue
	choice: green
extra card field:
	type: choice
	name: ex overlay
	show statistics: false
	card list allow: false
	save value: false
	editable: false
	choice: overlay
extra card field:
	type: choice
	name: ace overlay
	show statistics: false
	card list allow: false
	save value: false
	editable: false
	choice: overlay
extra card field:
	type: choice
	name: logo overlay
	show statistics: false
	card list allow: false
	save value: false
	editable: false
	choice: trainer overlay
extra card field:
	type: choice
	name: team logo grunt
	show statistics: false
	card list allow: false
	choice: 1
	choice: 2
extra card field:
	type: choice
	name: bar
	show statistics: false
	card list allow: false
	save value: false
	editable: false
	choice: bar
extra card field:
	type: choice
	name: bar_tt
	show statistics: false
	card list allow: false
	save value: false
	editable: false
	choice: bar
extra card field:
	type: choice
	name: bar_2
	show statistics: false
	card list allow: false
	save value: false
	editable: false
	choice: bar
extra card field:
	type: choice
	name: bar_2_tt
	show statistics: false
	card list allow: false
	save value: false
	editable: false
	choice: bar
extra card field:
	type: choice
	name: bar_3
	show statistics: false
	card list allow: false
	save value: false
	editable: false
	choice: bar
extra card field:
	type: choice
	name: bar_3_tt
	show statistics: false
	card list allow: false
	save value: false
	editable: false
	choice: bar
extra card field:
	type: choice
	name: bar_4
	show statistics: false
	card list allow: false
	save value: false
	editable: false
	choice: bar
extra card field:
	type: choice
	name: bar_4_tt
	show statistics: false
	card list allow: false
	save value: false
	editable: false
	choice: bar
extra card field:
	type: choice
	name: bar_5
	show statistics: false
	card list allow: false
	save value: false
	editable: false
	choice: bar
extra card field:
	type: choice
	name: bar_5_tt
	show statistics: false
	card list allow: false
	save value: false
	editable: false
	choice: bar
extra card field:
	type: choice
	name: tool frame
	show statistics: false
	card list allow: false
	save value: false
	editable: false
	choice: tool
extra card field:
	type: choice
	name: tool f
	show statistics: false
	card list allow: false
	save value: false
	editable: false
	choice: overlay
extra card style:
	######################## Background Layer -14
	######################## this layer provids the background image modified slightly for Dual-Type (changed some z-index)
	######################## Overborder Frame -4
	######################## This layer is for items over the border
#########The image that provides the shadow to the framework
	shade:
		left: { x_left(8) }
		top: { y_top(9) }
		width: { fun_expand_size(350) }
		height: { fun_expand_size(495) }
		z index: -5
		render style: image
		image:
			script: if is_pokemon() and not(contains(card.general_options_07, match: "Retro Card Face"))
					then if contains(card.general_options_07, match: "EX Pokemon")
						then if stage()=="Basic" then				("shading-p-basic-ex"+(if contains(card.art_options, match: "Full Art") then "-fa" else "")+".png")
						else							("shading-p-evolve-ex"+(if contains(card.art_options, match: "Full Art") then "-fa" else "")+".png")
					else								("shading-p-"+stage()+(if contains(card.art_options, match: "Full Art") then "-fa" else if team_type()=="-gold" then team_type() else "")+".png")
				else "/pokemon-b-common.mse-include/blank.png"
	######################## Choice layers -2
	######################## This for choice tabs for the ancient abilities
	ancient ability:
		left: { x_left(if contains(card.general_options_07, match: "Retro Card Face") then 34 else 41) }
		top: { y_top(if contains(card.general_options_07, match: "Retro Card Face") then 71 else if stage()=="Basic" then 49 else 53) }
		width: { fun_expand_size(if contains(card.general_options_07, match: "Retro Card Face") then 290 else 315) }
		height: { fun_expand_size(if is_pokemon() and contains(card.general_options_07, match: "Pokemon Ancient Ability") then if contains(card.general_options_07, match: "Retro Card Face") then 28 else 33 else 0) }
		visible: { is_pokemon() and contains(card.general_options_07, match: "Pokemon Ancient Ability") }
		z index: -5
		render style: image
		choice images:
			red:	{ if contains(card.general_options_07, match: "Retro Card Face") then "tab-p-g7-ancientb-red.png" else "tab-p-g7-ancienta-red.png" }
			purple:	{ if contains(card.general_options_07, match: "Retro Card Face") then "tab-p-g7-ancientb-purple.png" else "tab-p-g7-ancienta-purple.png" }
			blue:	{ if contains(card.general_options_07, match: "Retro Card Face") then "tab-p-g7-ancientb-blue.png" else "tab-p-g7-ancienta-blue.png" }
			green:	{ if contains(card.general_options_07, match: "Retro Card Face") then "tab-p-g7-ancientb-green.png" else "tab-p-g7-ancienta-green.png" }
	########################Frame -2
	######################## Overlay to put the non-colored portions of the EX overlays onto the user input team frames
	ex overlay:
		left: { x_left(8) }
		top: { y_top(9) }
		width: { fun_expand_size(350) }
		height: { fun_expand_size(if is_pokemon() and ((contains(card.general_options_07, match: "User Defined Team") and contains(card.general_options_07, match: "Colored Frame") and (contains(card.general_options_07, match: "EX Pokemon") or contains(card.general_options_07, match: "Retro Card Face"))) or contains(card.general_options_07, match: "Primal EX Pokemon")) then 495 else 0) }
		visible: { is_pokemon() and ((contains(card.general_options_07, match: "User Defined Team") and contains(card.general_options_07, match: "Colored Frame") and (contains(card.general_options_07, match: "EX Pokemon") or contains(card.general_options_07, match: "Retro Card Face"))) or contains(card.general_options_07, match: "Primal EX Pokemon")) }
		z index: -2
		render style: image
		image: 
			script: if is_pokemon()
					then if contains(card.general_options_07, match: "Retro Card Face")
						then if contains(card.general_options_07, match: "Primal EX Pokemon")
							then if stage()=="Basic" then "overlay-primal-evo-ex.png"
							else "overlay-primal-evo-mega.png"
						else if contains(card.general_options_07, match: "EX Pokemon")
							then if stage()=="Basic" then "overlay-evo-ex.png"
							else "overlay-evo-mega.png"
						else "overlay-evo.png"
					else if contains(card.general_options_07, match: "Primal EX Pokemon")
						then if stage()=="Basic" then if contains(card.art_options, match: "Full Art") then "overlay-primal-basic-fa.png"
							else "overlay-primal-basic.png"
						else if stage()=="Stage 1" then "overlay-primal-stage 1.png"
						else if stage()=="Stage 2" then "overlay-primal-stage 2.png"
						else if contains(card.general_options_07, match: "Mega Reminder Box for EX Restored") then "overlay-primal-restored-wmega.png"
						else if contains(card.art_options, match: "Full Art") then "overlay-primal-restored-fa.png"
						else "overlay-primal-restored.png"
					else if contains(card.general_options_07, match: "EX Pokemon")
						then if stage()=="Basic"
							then if contains(card.art_options, match: "Full Art") then "overlay-ex-noncolored-full.png"
							else "overlay-ex-noncolored.png"
						else if stage()=="Stage 1" then "overlay-mega-noncolored.png"
						else if stage()=="Stage 2" then "overlay-mega2-noncolored.png"
						else if stage()=="Restored"
							then if contains(card.general_options_07, match: "Mega Reminder Box for EX Restored") then "overlay-restored-wmega-noncolored.png"
							else "overlay-restored-noncolored.png"
						else "overlay-primal-colored.png"
					else "/pokemon-b-common.mse-include/blank.png"
				else "/pokemon-b-common.mse-include/blank.png"
	######################## Overborder Frame 4
	######################## The ACE SPEC Overlay
	ace overlay:
		left: { x_left(8) }
		top: { y_top(9) }
		width: { fun_expand_size(350) }
		height: { fun_expand_size(if is_trainer() and contains(card.general_options_07, match: "Ace Spec Trainer") then 495 else 0) }
		visible: { is_trainer() and contains(card.general_options_07, match: "Ace Spec Trainer") }
		z index: 3
		render style: image
		image: 
			script: if contains(card.general_options_07, match: "Retro Card Face") then "overlay-ace-evo.png"
				else if card.trainer=="Tool" then "overlay-ace-title-tool.png"
				else "overlay-ace-title.png"
	######################## This layer is for items needed just before the user input text.
	#	left:	else if is_energy() then 14  =246
	#	top:	else if is_energy() then 78
	#	width:	else if is_energy() then 337
#########This provides the item/stadium/supporter logo for trainers in g7 and the plasma and flare logo for pokemon
	logo overlay:
		left: { x_left(if is_trainer() then if contains(card.general_options_07, match: "Retro Card Face") then 226 else 239 else if is_pokemon() and (contains(card.general_options_07, match: "Team Plasma") or contains(card.general_options_07, match: "Team Flare")) then if contains(card.general_options_07, match: "Retro Card Face") then 226 else 241 else 246) }
		top: 
			script: y_top(if is_trainer() then if contains(card.general_options_07, match: "Retro Card Face") then 118 else 8 else if is_pokemon() and (contains(card.general_options_07, match: "Team Plasma") or contains(card.general_options_07, match: "Team Flare")) 
					then if contains(card.general_options_07, match: "Retro Card Face") then if contains(card.general_options_07, match: "Pokemon Ancient Ability") then 98 else 70
					else if contains(card.general_options_07, match: "Pokemon Ancient Ability") then if stage()=="Basic" then 78 else 82 else if stage()=="Restored" then 58 else 48 
				else 77)
		width: { fun_expand_size(120) }
		height: { fun_expand_size(26) }
		z index: 4
		render style: image
		visible: 
			script: (is_trainer() and (not(contains(card.general_options_07, match: "Retro Card Face")) or contains(card.general_options_07, match: "Team Plasma"))) or 
				(is_pokemon() and (contains(card.general_options_07, match: "Team Plasma") or contains(card.general_options_07, match: "Team Flare"))) or
				(is_energy() and contains(card.general_options_07, match: "Retro Card Face") and (contains(card.general_options_07, match: "Team Plasma") or contains(card.general_options_07, match: "Team Flare")))
		image:
			script: if is_trainer() and contains(card.general_options_07, match: "Team Plasma") and contains(card.general_options_07, match: "Retro Card Face") then "logo-p-plasma.png"
				else if is_trainer() and not(card.trainer=="User Defined") then if card.trainer=="Supporter" then "logo-t-supporter.png"
					else if card.trainer=="Stadium" then "logo-t-stadium.png"
					else "logo-t-item.png"
				else if (is_pokemon() or is_energy()) and contains(card.general_options_07, match: "Team Plasma") then "logo-p-plasma.png"
				else if (is_pokemon() or is_energy()) and contains(card.general_options_07, match: "Team Flare") then "logo-p-flare.png"
				else "/pokemon-b-common.mse-include/blank.png"
#########This shows the grunt logo for team aqua and magma and allows to choose between the two profiles
	team logo grunt:
		left: { x_left(293) }
		top: { y_top(428) }
		width: { fun_expand_size(54) }
		height: { fun_expand_size(if (contains(card.general_options_07, match: "Team Magma") or contains(card.general_options_07, match: "Team Aqua")) and is_pokemon() and (not(contains(card.art_options, match: "Full Art")) or contains(card.art_options, match: "Faded Full Art")) then 48 else 0) }
		z index: 4
		render style: image
		visible: { (contains(card.general_options_07, match: "Team Magma") or contains(card.general_options_07, match: "Team Aqua")) and is_pokemon() and (not(contains(card.art_options, match: "Full Art")) or contains(card.art_options, match: "Faded Full Art")) }
		choice images:
			1:	{ if contains(card.general_options_07, match: "Team Magma") then if contains(card.general_options_07, match: "Retro Card Face") then "logo-magma1-evo.png" else "logo-magma1.png" else if contains(card.general_options_07, match: "Team Aqua") then if contains(card.general_options_07, match: "Retro Card Face") then "logo-aqua1-evo.png" else "logo-aqua1.png" else "/pokemon-b-common.mse-include/blank.png" }
			2:	{ if contains(card.general_options_07, match: "Team Magma") then if contains(card.general_options_07, match: "Retro Card Face") then "logo-magma2-evo.png" else "logo-magma2.png" else if contains(card.general_options_07, match: "Team Aqua") then if contains(card.general_options_07, match: "Retro Card Face") then "logo-aqua2-evo.png" else "logo-aqua2.png" else "/pokemon-b-common.mse-include/blank.png" }
#########These bars used for various things
#########Bar used by normal BW & XY face in the special energy cards, in the retro face used by the trainer and special energy cards, in the retro face pokemon cards the very bottom line.
	bar:
		left: { x_left((if is_trainer() and contains(card.general_options_07, match: "Retro Card Face") then 57 else 30)-(if is_outline() then 2 else 0)) }
		top: { y_top((if not(contains(card.general_options_07, match: "Retro Card Face")) then 352 else if is_energy() then top_np()-6 else if is_pokemon() and contains(card.general_options_07, match: "Retro Card Face") then 481 else 451)-(if is_outline() then 2 else 0)) }
		width: { fun_expand_size((if is_trainer() and contains(card.general_options_07, match: "Retro Card Face") then 250 else if is_pokemon() and contains(card.general_options_07, match: "Retro Card Face") then 304 else 306)+(if is_outline() then 4 else 0)) }
		height: { fun_expand_size(if (is_energy() and card.energy_type=="Special") or (is_trainer() and contains(card.general_options_07, match: "Retro Card Face")) or (is_pokemon() and contains(card.general_options_07, match: "Retro Card Face")) then 4+(if is_outline() then 4 else 0) else 0) }
		visible: { (is_energy() and card.energy_type=="Special") or (is_trainer() and contains(card.general_options_07, match: "Retro Card Face")) or (is_pokemon() and contains(card.general_options_07, match: "Retro Card Face")) }
		z index: 4
		render style: image
		image: { if is_two_tone() then "/pokemon-b-common.mse-include/blank.png" else if is_outline() then "/pokemon-b-common.mse-include/bar-outline.png" else if is_wt_text() then "/pokemon-b-common.mse-include/bar-wt.png" else "/pokemon-b-common.mse-include/bar-bk.png" }
	bar_tt:
		left: { x_left(30) }
		top: { y_top(481) }
		width: { fun_expand_size(304) }
		height: { fun_expand_size(if (is_pokemon() and contains(card.general_options_07, match: "Retro Card Face") and is_two_tone()) then 4 else 0) }
		visible: { is_pokemon() and contains(card.general_options_07, match: "Retro Card Face") and is_two_tone() }
		z index: -16
		render style: image
		image: { "/pokemon-b-common.mse-include/bar-bk.png" }
#########Bar used by the retro face pokemon cards as small bar just above retreat cost
	bar_2:
		left: { x_left(30-(if is_outline() then 2 else 0)) }
		top: { y_top(459-(if is_outline() then 2 else 0)) }
		width: { fun_expand_size(164+(if is_outline() then 4 else 0)) }
		height: { fun_expand_size(if is_pokemon() and contains(card.general_options_07, match: "Retro Card Face") then 1+(if is_outline() then 4 else 0) else 0) }
		visible: { is_pokemon() and contains(card.general_options_07, match: "Retro Card Face") }
		z index: 4
		render style: image
		image: { if is_two_tone() then "/pokemon-b-common.mse-include/blank.png" else if is_outline() then "/pokemon-b-common.mse-include/bar-outline.png" else if is_wt_text() then "/pokemon-b-common.mse-include/bar-wt.png" else "/pokemon-b-common.mse-include/bar-bk.png" }
	bar_2_tt:
		left: { x_left(30) }
		top: { y_top(459) }
		width: { fun_expand_size(164) }
		height: { fun_expand_size(if is_pokemon() and contains(card.general_options_07, match: "Retro Card Face") and is_two_tone() then 1 else 0) }
		visible: { is_pokemon() and contains(card.general_options_07, match: "Retro Card Face") and is_two_tone() }
		z index: -16
		render style: image
		image: { "/pokemon-b-common.mse-include/bar-bk.png" }
#########Bar used by the retro face pokemon cards as small bar just above weakness and resistance
	bar_3:
		left: { x_left(30-(if is_outline() then 2 else 0)) }
		top: { y_top(434-(if is_outline() then 2 else 0)) }
		width: { fun_expand_size(164+(if is_outline() then 4 else 0)) }
		height: { fun_expand_size(if is_pokemon() and contains(card.general_options_07, match: "Retro Card Face") then 4+(if is_outline() then 4 else 0) else 0) }
		visible: { is_pokemon() and contains(card.general_options_07, match: "Retro Card Face") }
		z index: 4
		render style: image
		image: { if is_two_tone() then "/pokemon-b-common.mse-include/blank.png" else if is_outline() then "/pokemon-b-common.mse-include/bar-outline.png" else if is_wt_text() then "/pokemon-b-common.mse-include/bar-wt.png" else "/pokemon-b-common.mse-include/bar-bk.png" }
	bar_3_tt:
		left: { x_left(30) }
		top: { y_top(434) }
		width: { fun_expand_size(164) }
		height: { fun_expand_size(if is_pokemon() and contains(card.general_options_07, match: "Retro Card Face") and is_two_tone() then 4 else 0) }
		visible: { is_pokemon() and contains(card.general_options_07, match: "Retro Card Face") and is_two_tone() }
		z index: -16
		render style: image
		image: { "/pokemon-b-common.mse-include/bar-bk.png" }
#########Bar used by the retro face pokemon cards to separate between first and second attack rows
#	bar_4:
#		left: { x_left(33-(if is_outline() then 2 else 0)) }
#		top: { y_top(-(if is_outline() then 2 else 0)) }
#		width: { fun_expand_size(160+(if is_outline() then 4 else 0)) }
#		height: { fun_expand_size(if is_pokemon() and contains(card.general_options_07, match: "Retro Card Face") then 1+(if is_outline() then 4 else 0) else 0) }
#		visible: { is_pokemon() and contains(card.general_options_07, match: "Retro Card Face") }
#		z index: 4
#		render style: image
#		image: { if is_two_tone() then "/pokemon-b-common.mse-include/blank.png" else if is_outline() then "/pokemon-b-common.mse-include/bar-outline.png" else if is_wt_text() then "/pokemon-b-common.mse-include/bar-wt.png" else "/pokemon-b-common.mse-include/bar-bk.png" }
#	bar_4_tt:
#		left: { x_left(33-(if is_outline() then 2 else 0)) }
#		top: { y_top(-(if is_outline() then 2 else 0)) }
#		width: { fun_expand_size(160+(if is_outline() then 4 else 0)) }
#		height: { fun_expand_size(if is_pokemon() and contains(card.general_options_07, match: "Retro Card Face") and is_two_tone() then 1 else 0) }
#		visible: { is_pokemon() and contains(card.general_options_07, match: "Retro Card Face") and is_two_tone() }
#		z index: -16
#		render style: image
#		image: { "/pokemon-b-common.mse-include/bar-bk.png" }
#########Bar used by the retro face pokemon cards to separate between second and third attack rows
#	bar_5:
#		left: { x_left(33-(if is_outline() then 2 else 0)) }
#		top: { y_top(-(if is_outline() then 2 else 0)) }
#		width: { fun_expand_size(160+(if is_outline() then 4 else 0)) }
#		height: { fun_expand_size(if is_pokemon() and contains(card.general_options_07, match: "Retro Card Face") then 1+(if is_outline() then 4 else 0) else 0) }
#		visible: { is_pokemon() and contains(card.general_options_07, match: "Retro Card Face") }
#		z index: 4
#		render style: image
#		image: { if is_two_tone() then "/pokemon-b-common.mse-include/blank.png" else if is_outline() then "/pokemon-b-common.mse-include/bar-outline.png" else if is_wt_text() then "/pokemon-b-common.mse-include/bar-wt.png" else "/pokemon-b-common.mse-include/bar-bk.png" }
#	bar_5_tt:
#		left: { x_left(33-(if is_outline() then 2 else 0)) }
#		top: { y_top(-(if is_outline() then 2 else 0)) }
#		width: { fun_expand_size(160+(if is_outline() then 4 else 0)) }
#		height: { fun_expand_size(if is_pokemon() and contains(card.general_options_07, match: "Retro Card Face") and is_two_tone() then 1 else 0) }
#		visible: { is_pokemon() and contains(card.general_options_07, match: "Retro Card Face") and is_two_tone() }
#		z index: -16
#		render style: image
#		image: { "/pokemon-b-common.mse-include/bar-bk.png" }
#########This provides the reminder text for tool cards
	tool frame:
		left: { x_left(if contains(card.general_options_07, match: "Retro Card Face") then 57 else 27) }
		top: { y_top(if contains(card.general_options_07, match: "Retro Card Face") then 344 else 257) }
		width: { fun_expand_size(if contains(card.general_options_07, match: "Retro Card Face") then 250 else 313) }
		height: { fun_expand_size(if is_trainer() and card.trainer=="Tool" then if contains(card.general_options_07, match: "Retro Card Face") then 2+(if is_outline() then 4 else 0) else 36 else 0) }
		z index: -3
		render style: image
		visible: { is_trainer() and card.trainer=="Tool" }
		image:
			script: if contains(card.general_options_07, match: "Retro Card Face") then if is_outline() then "/pokemon-b-common.mse-include/bar-outline.png" else "/pokemon-b-common.mse-include/bar-bk.png"
				else if contains(card.general_options_07, match: "User Defined Team") and contains(card.general_options_07, match: "Colored Frame") then recolor_image(input: "tool-t-colored.png", red: styling.User_Input_Team_Color, green: rgb(128,128,128), blue: rgb(128,128,128), white: rgb(255,255,255))
				else "tool-t"+team_type()+".png"
	tool f:
		left: { x_left(27) }
		top: { y_top(257) }
		width: { fun_expand_size(313) }
		height: { fun_expand_size(if is_trainer() and card.trainer=="Tool" and not(contains(card.general_options_07, match: "Retro Card Face")) then 36 else 0) }
		visible: { is_trainer() and card.trainer=="Tool" and not(contains(card.general_options_07, match: "Retro Card Face")) }
		z index: 4
		render style: image
		image: { if contains(card.general_options_07, match: "Hyper Flare Tool Card") then "logo-f.png" else "logo-no-f.png" }
############################# Duplicate text files found behind the Text Popout Image for two-tone text
extra card field:
	type: text
	name: illustrator dup
	show statistics: false
	default: set.artist
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: copyright dup
	show statistics: false
	default: set.copyright
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: card number 2t dup
	show statistics: false
	default: card.card_number
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: illustrator 2t dup
	show statistics: false
	default: ill_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: copyright 2t dup
	show statistics: false
	default: copy_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: weakoverlay 2t dup
	show statistics: false
	default: card.weakoverlay
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: resoverlay 2t dup
	show statistics: false
	default: card.resoverlay
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: retoverlay 2t dup
	show statistics: false
	default: card.retoverlay
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: weakness 2t dup
	show statistics: false
	default: card.weakness
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: resistance 2t dup
	show statistics: false
	default: card.resistance
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: flavor text 2t dup
	show statistics: false
	default: card.flavor_text
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: evolution 1 2t dup
	show statistics: false
	default: evolution_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: evolution entry 2t dup
	show statistics: false
	default: card.evolution_entry
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: evolution 2 2t dup
	show statistics: false
	default: evorule_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: pokedex text 2 2t dup
	show statistics: false
	default: card.pokedex_text_2
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: damage 1 2t dup
	show statistics: false
	default: card.damage_1
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: rule text 1 2t dup
	show statistics: false
	default: card.rule_text_1
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: damage 2 2t dup
	show statistics: false
	default: card.damage_2
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: rule text 2 2t dup
	show statistics: false
	default: card.rule_text_2
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: damage 3 2t dup
	show statistics: false
	default: card.damage_3
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: rule text 3 2t dup
	show statistics: false
	default: card.rule_text_3
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: attack 1 2t dup
	show statistics: false
	default: card.attack_1
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: attack 2 2t dup
	show statistics: false
	default: card.attack_2
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: attack 3 2t dup
	show statistics: false
	default: card.attack_3
	card list allow: false
	save value: false
	editable: false
extra card style:
#########Duplicate for when non-card input
	illustrator dup:
		left: { ill_left() }
		top: { ill_top() }
		width: { ill_width() }
		height: { if contains(card.text_options_3, match: "Use Primary Set Artist") then ill_height() else 0 }
		z index: 6
		alignment: { ill_align() }
		visible: { if contains(card.text_options_3, match: "Use Primary Set Artist") then "yes" else "no" }
		font:
			name: { ill_font() }
			weight: { ill_weight() }
			style: { ill_style() }
			size: { ill_size() }
			color: { if is_two_tone() then rgba(0,0,0,0) else if is_wt_text() then rgb(255,255,255) else rgb(0,0,0) }
#########Duplicate for when non-card input
	copyright dup:
		left: { copy_left() }
		top: { copy_top() }
		width: { copy_width() }
		height: { if contains(set.visibility_options, match: "Visible Copyright on all cards") and contains(card.text_options_3, match: "Use Set Copyright") then copy_height() else 0 }
		z index: 6
		alignment: { copy_align() }
		visible: { if contains(set.visibility_options, match: "Visible Copyright on all cards") and contains(card.text_options_3, match: "Use Set Copyright") then "yes" else "no" }
		font:
			name: { copy_font() }
			size: { copy_size() }
			weight: { copy_weight() }
			style: { copy_style() }
			color: { if is_two_tone() then rgba(0,0,0,0) else if is_wt_text() then rgb(255,255,255) else rgb(0,0,0) }
	card number 2t dup:
		left: { card_no_left() }
		top: { card_no_top() }
		width: { card_no_width() }
		height: { card_no_height() }
		z index: -16
		alignment: { card_no_align() }
		visible: { if contains(set.visibility_options, match: "Visible Card Numbers on all cards") then "yes" else "no" }
		font:
			name: { card_no_font() }
			size: { card_no_size() }
			weight: { card_no_weight() }
			style: { card_no_style() }
			color: rgb(0,0,0)
	illustrator 2t dup:
		left: { ill_left() }
		top: { ill_top() }
		width: { ill_width() }
		height: { ill_height() }
		z index: -16
		alignment: { ill_align() }
		visible: { "yes" }
		font:
			name: { ill_font() }
			weight: { ill_weight() }
			style: { ill_style() }
			size: { ill_size() }
			color: rgb(0,0,0)
	copyright 2t dup:
		left: { copy_left() }
		top: { copy_top() }
		width: { copy_width() }
		height: { copy_height() }
		z index: -16
		alignment: { copy_align() }
		visible: { if contains(set.visibility_options, match: "Visible Copyright on all cards") then "yes" else "no" }
		font:
			name: { copy_font() }
			size: { copy_size() }
			weight: { copy_weight() }
			style: { copy_style() }
			color: rgb(0,0,0)
	weakoverlay 2t dup:
		left: { weak_ov_left() }
		top: { weak_ov_top() }
		width: { weak_ov_width() }
		height: { weak_ov_height() }
		z index: -16
		visible: { is_two_tone() and wrr_ov_visible() }
		alignment: { wrr_ov_align() }
		font:
			name: { wrr_ov_font() }
			weight: { wrr_ov_weight() }
			style: { wrr_ov_style() }
			size: { wrr_ov_size() }
			color: rgb(0,0,0)
	resoverlay 2t dup:
		left: { res_ov_left() }
		top: { res_ov_top() }
		width: { res_ov_width() }
		height: { res_ov_height() }
		z index: -16
		visible: { is_two_tone() and wrr_ov_visible() }
		alignment: { wrr_ov_align() }
		font:
			name: { wrr_ov_font() }
			weight: { wrr_ov_weight() }
			style: { wrr_ov_style() }
			size: { wrr_ov_size() }
			color: rgb(0,0,0)
	retoverlay 2t dup:
		left: { ret_ov_left() }
		top: { ret_ov_top() }
		width: { ret_ov_width() }
		height: { ret_ov_height() }
		z index: -16
		visible: { is_two_tone() and wrr_ov_visible() }
		alignment: { wrr_ov_align() }
		line height soft: { ret_ov_lsoft() }
		font:
			name: { wrr_ov_font() }
			weight: { wrr_ov_weight() }
			style: { wrr_ov_style() }
			size: { wrr_ov_size() }
			color: rgb(0,0,0)
	weakness 2t dup:
		left: { weak_left() }
		top: { weak_top() }
		width: { weak_width() }
		height: { weak_height() }
		z index: -16
		always symbol: true
		visible: { is_two_tone() and weak_visible() }
		alignment: { weak_align() }
		font:
			name: { weak_font() }
			size: { weak_size() }
			weight: { weak_weight() }
			style: { weak_style() }
			color: rgb(0,0,0)
		symbol font:
			name: { weak_symbol_font() }
			size: { weak_symbol_size() }
	resistance 2t dup:
		left: { resist_left() }
		top: { resist_top() }
		width: { resist_width() }
		height: { resist_height() }
		z index: -16
		always symbol: true
		visible: { is_two_tone() and resist_visible() }
		alignment: { resist_align() }
		font:
			name: { resist_font() }
			size: { resist_size() }
			weight: { resist_weight() }
			style: { resist_style() }
			color: rgb(0,0,0)
		symbol font:
			name: { resist_symbol_font() }
			size: { resist_symbol_size() }
	flavor text 2t dup:
		left: { flavor_left() }
		top: { flavor_top() }
		width: { flavor_width() }
		height: { flavor_height() }
		z index: -16
		visible: { is_two_tone() and flavor_visible() }
		alignment: { flavor_align() }
		line height soft: { flavor_lh_soft() }
		padding left: { flavor_pad_left() }
		mask: { flavor_mask() }
		font:
			name: { flavor_font() }
			scale down to: 6
			weight: { flavor_weight() }
			style: { flavor_style() }
			size: { flavor_size() }
			color: { rgb(0,0,0) }
	evolution 1 2t dup:
		left: { evolution_left() }
		top: { evolution_top() }
		width: { evolution_width() }
		height: { evolution_height() }
		alignment: { evolution_align() }
		z index: -16
		visible: { evolution_two_tone_visible() }
		font:
			name: { evolution_font() }
			weight: { evolution_weight() }
			style: { evolution_style() }
			size: { evolution_size() }
			color: { rgb(0,0,0) }
	evolution entry 2t dup:
		left: { evo_left() }
		top: { evolution_top() }
		width: { evo_width() }
		height: { evo_height() }
		alignment: { evolution_align() }
		z index: -16
		visible: { is_two_tone() and evo_visible() }
		font:
			name: { evolution_font() }
			weight: { evolution_weight() }
			style: { evolution_style() }
			size: { evolution_size() }
			color: { rgb(0,0,0) }
	evolution 2 2t dup:
		left: { evorule_left() }
		top: { evorule_top() }
		width: { evorule_width() }
		height: { evorule_height() }
		visible: { evorule_two_tone_visible() }
		alignment: { evorule_align() }
		z index: -16
		font:
			name: { evorule_font() }
			weight: { evorule_weight() }
			style: { evorule_style() }
			size: { evorule_size() }
			color: { rgb(0,0,0) }
	pokedex text 2 2t dup:
		left: { pokedex2_left() }
		top: { pokedex2_top() }
		width: { pokedex2_width() }
		height: { pokedex2_height() }
		z index: -16
		alignment: { pokedex2_align() }
		visible: { pokedex2_two_tone_visible() }
		font
			name: { pokedex2_font() }
			weight: { pokedex2_weight() }
			style: { pokedex2_style() }
			size: { pokedex2_size() }
			color: rgb(0,0,0)
	damage 1 2t dup:
		left: { damage_1_left() }
		top: { damage_1_top() }
		width: { damage_1_width() }
		height: { damage_1_height() }
		z index: -16
		visible: { is_two_tone() and damage_1_visible() }
		alignment: { damage_align() }
		font:
			name: { damage_font() }
			weight: { damage_weight() }
			style: { damage_style() }
			size: { damage_size() }
			color: { rgb(0,0,0) }
	rule text 1 2t dup:
		left: { rule_1_left() }
		top: { rule_1_top() }
		width: { rule_1_width() }
		height: { rule_1_height() }
		z index: -16
		visible: { is_two_tone() and rule_1_visible() }
		alignment: { rule_1_align() }
		line height hard: { rule_lh_hard() }
		symbol font:
			name: { two_tone_font() }
			size: { rule_symbol_size() }
		font:
			name: { rule_font() }
			weight: { rule_weight() }
			style: { rule_style() }
			size: { rule_size() }
			scale down to: 6
			color: { rgb(0,0,0) }
	damage 2 2t dup:
		left: { damage_2_left() }
		top: { damage_2_top() }
		width: { damage_2_width() }
		height: { damage_2_height() }
		z index: -16
		visible: { is_two_tone() and damage_2_visible() }
		alignment: { damage_align() }
		font:
			name: { damage_font() }
			weight: { damage_weight() }
			style: { damage_style() }
			size: { damage_size() }
			color: { rgb(0,0,0) }
	rule text 2 2t dup:
		left: { rule_2_left() }
		top: { rule_2_top() }
		width: { rule_2_width() }
		height: { rule_2_height() }
		z index: -16
		visible: { is_two_tone() and rule_2_visible() }
		alignment: { rule_2_align() }
		line height hard: { rule_lh_hard() }
		symbol font:
			name: { two_tone_font() }
			size: { rule_symbol_size() }
		font:
			name: { rule_font() }
			weight: { rule_weight() }
			style: { rule_style() }
			size: { rule_size() }
			scale down to: 6
			color: { rgb(0,0,0) }
	damage 3 2t dup:
		left: { damage_3_left() }
		top: { damage_3_top() }
		width: { damage_3_width() }
		height: { damage_3_height() }
		z index: -16
		visible: { is_two_tone() and damage_3_visible() }
		alignment: { damage_align() }
		font:
			name: { damage_font() }
			weight: { damage_weight() }
			style: { damage_style() }
			size: { damage_size() }
			color: { rgb(0,0,0) }
	rule text 3 2t dup:
		left: { rule_3_left() }
		top: { rule_3_top() }
		width: { rule_3_width() }
		height: { rule_3_height() }
		z index: -16
		visible: { is_two_tone() and rule_3_visible() }
		alignment: { rule_3_align() }
		line height hard: { rule_lh_hard() }
		symbol font:
			name: { two_tone_font() }
			size: { rule_symbol_size() }
		font:
			name: { rule_font() }
			weight: { rule_weight() }
			style: { rule_style() }
			size: { rule_size() }
			scale down to: 6
			color: { rgb(0,0,0) }
	attack 1 2t dup:
		left: { attack_1_left() }
		top: { attack_1_top() }
		width: { attack_1_width() }
		height: { attack_1_height() }
		z index: -16
		visible: { is_two_tone() and attack_1_visible() }
		alignment: { attack_align() }
		font:
			name: { attack_font() }
			weight: { attack_weight() }
			style: { attack_style() }
			size: { attack_size() }
			color: { rgb(0,0,0) }
	attack 2 2t dup:
		left: { attack_2_left() }
		top: { attack_2_top() }
		width: { attack_2_width() }
		height: { attack_2_height() }
		z index: -16
		visible: { is_two_tone() and attack_2_visible() }
		alignment: { attack_align() }
		font:
			name: { attack_font() }
			weight: { attack_weight() }
			style: { attack_style() }
			size: { attack_size() }
			color: { rgb(0,0,0) }
	attack 3 2t dup:
		left: { attack_3_left() }
		top: { attack_3_top() }
		width: { attack_3_width() }
		height: { attack_3_height() }
		z index: -16
		visible: { is_two_tone() and attack_3_visible() }
		alignment: { attack_align() }
		font:
			name: { attack_font() }
			weight: { attack_weight() }
			style: { attack_style() }
			size: { attack_size() }
			color: { rgb(0,0,0) }
############################# Duplicate text fields for all outline text (regardless of file size, values for medium and small need to be changed to 2, from x: 2/x: -2/y: 2/y: -2 to x: 2/x: -2/y: 2/y: -2)
extra card field:
	type: text
	name: card number blur 01
	show statistics: false
	default: card.card_number
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: card number blur 02
	show statistics: false
	default: card.card_number
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: card number blur 03
	show statistics: false
	default: card.card_number
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: card number blur 04
	show statistics: false
	default: card.card_number
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: illustrator blur 01
	show statistics: false
	default: ill_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: illustrator blur 02
	show statistics: false
	default: ill_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: illustrator blur 03
	show statistics: false
	default: ill_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: illustrator blur 04
	show statistics: false
	default: ill_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: copyright blur 01
	show statistics: false
	default: copy_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: copyright blur 02
	show statistics: false
	default: copy_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: copyright blur 03
	show statistics: false
	default: copy_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: copyright blur 04
	show statistics: false
	default: copy_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: weakoverlay blur 01
	show statistics: false
	default: card.weakoverlay
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: weakoverlay blur 02
	show statistics: false
	default: card.weakoverlay
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: weakoverlay blur 03
	show statistics: false
	default: card.weakoverlay
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: weakoverlay blur 04
	show statistics: false
	default: card.weakoverlay
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: resoverlay blur 01
	show statistics: false
	default: card.resoverlay
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: resoverlay blur 02
	show statistics: false
	default: card.resoverlay
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: resoverlay blur 03
	show statistics: false
	default: card.resoverlay
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: resoverlay blur 04
	show statistics: false
	default: card.resoverlay
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: retoverlay blur 01
	show statistics: false
	default: card.retoverlay
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: retoverlay blur 02
	show statistics: false
	default: card.retoverlay
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: retoverlay blur 03
	show statistics: false
	default: card.retoverlay
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: retoverlay blur 04
	show statistics: false
	default: card.retoverlay
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: card name blur 01
	show statistics: false
	default: card.card_name
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: card name blur 02
	show statistics: false
	default: card.card_name
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: card name blur 03
	show statistics: false
	default: card.card_name
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: card name blur 04
	show statistics: false
	default: card.card_name
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: hp blur 01
	show statistics: false
	default: card.hp
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: hp blur 02
	show statistics: false
	default: card.hp
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: hp blur 03
	show statistics: false
	default: card.hp
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: hp blur 04
	show statistics: false
	default: card.hp
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: weakness blur 01
	show statistics: false
	default: card.weakness
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: weakness blur 02
	show statistics: false
	default: card.weakness
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: weakness blur 03
	show statistics: false
	default: card.weakness
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: weakness blur 04
	show statistics: false
	default: card.weakness
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: resistance blur 01
	show statistics: false
	default: card.resistance
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: resistance blur 02
	show statistics: false
	default: card.resistance
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: resistance blur 03
	show statistics: false
	default: card.resistance
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: resistance blur 04
	show statistics: false
	default: card.resistance
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: flavor text blur 01
	show statistics: false
	default: card.flavor_text
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: flavor text blur 02
	show statistics: false
	default: card.flavor_text
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: flavor text blur 03
	show statistics: false
	default: card.flavor_text
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: flavor text blur 04
	show statistics: false
	default: card.flavor_text
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: evolution 1 blur 01
	show statistics: false
	default: evolution_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: evolution 1 blur 02
	show statistics: false
	default: evolution_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: evolution 1 blur 03
	show statistics: false
	default: evolution_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: evolution 1 blur 04
	show statistics: false
	default: evolution_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: stuff blur 01
	show statistics: false
	default: reverse(set_filter("Extra Special Monster"))
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: evolution entry blur 01
	show statistics: false
	default: card.evolution_entry
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: evolution entry blur 02
	show statistics: false
	default: card.evolution_entry
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: evolution entry blur 03
	show statistics: false
	default: card.evolution_entry
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: evolution entry blur 04
	show statistics: false
	default: card.evolution_entry
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: evolution 2 blur 01
	show statistics: false
	default: evorule_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: evolution 2 blur 02
	show statistics: false
	default: evorule_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: evolution 2 blur 03
	show statistics: false
	default: evorule_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: evolution 2 blur 04
	show statistics: false
	default: evorule_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: title 1 blur 01
	show statistics: false
	default: title_1_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: title 1 blur 02
	show statistics: false
	default: title_1_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: title 1 blur 03
	show statistics: false
	default: title_1_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: title 1 blur 04
	show statistics: false
	default: title_1_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: title 2 blur 01
	show statistics: false
	default: title_2_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: title 2 blur 02
	show statistics: false
	default: title_2_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: title 2 blur 03
	show statistics: false
	default: title_2_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: title 2 blur 04
	show statistics: false
	default: title_2_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: title 3 blur 01
	show statistics: false
	default: title_3_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: title 3 blur 02
	show statistics: false
	default: title_3_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: title 3 blur 03
	show statistics: false
	default: title_3_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: title 3 blur 04
	show statistics: false
	default: title_3_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: pokedex text 2 blur 01
	show statistics: false
	default: card.pokedex_text_2
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: pokedex text 2 blur 02
	show statistics: false
	default: card.pokedex_text_2
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: pokedex text 2 blur 03
	show statistics: false
	default: card.pokedex_text_2
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: pokedex text 2 blur 04
	show statistics: false
	default: card.pokedex_text_2
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: ability 1 blur 01
	show statistics: false
	default: ability_1_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: ability 1 blur 02
	show statistics: false
	default: ability_1_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: ability 1 blur 03
	show statistics: false
	default: ability_1_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: ability 1 blur 04
	show statistics: false
	default: ability_1_outline_separator()
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: ability rule 1 blur 01
	show statistics: false
	default: card.ability_rule_text_1
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: ability rule 1 blur 02
	show statistics: false
	default: card.ability_rule_text_1
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: ability rule 1 blur 03
	show statistics: false
	default: card.ability_rule_text_1
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: ability rule 1 blur 04
	show statistics: false
	default: card.ability_rule_text_1
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: special rule 1 blur 01
	show statistics: false
	default: special_rule_outline_separator()
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: special rule 1 blur 02
	show statistics: false
	default: special_rule_outline_separator()
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: special rule 1 blur 03
	show statistics: false
	default: special_rule_outline_separator()
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: special rule 1 blur 04
	show statistics: false
	default: special_rule_outline_separator()
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: special rule 2 blur 01
	show statistics: false
	default: special_rule_2_outline_separator()
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: special rule 2 blur 02
	show statistics: false
	default: special_rule_2_outline_separator()
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: special rule 2 blur 03
	show statistics: false
	default: special_rule_2_outline_separator()
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: special rule 2 blur 04
	show statistics: false
	default: special_rule_2_outline_separator()
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: rule np 1 blur 01
	show statistics: false
	default: card.rule_np_1
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: rule np 1 blur 02
	show statistics: false
	default: card.rule_np_1
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: rule np 1 blur 03
	show statistics: false
	default: card.rule_np_1
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: rule np 1 blur 04
	show statistics: false
	default: card.rule_np_1
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: rule np 2 blur 01
	show statistics: false
	default: card.rule_np_2
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: rule np 2 blur 02
	show statistics: false
	default: card.rule_np_2
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: rule np 2 blur 03
	show statistics: false
	default: card.rule_np_2
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: rule np 2 blur 04
	show statistics: false
	default: card.rule_np_2
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: damage 1 blur 01
	show statistics: false
	default: card.damage_1
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: damage 1 blur 02
	show statistics: false
	default: card.damage_1
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: damage 1 blur 03
	show statistics: false
	default: card.damage_1
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: damage 1 blur 04
	show statistics: false
	default: card.damage_1
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: rule text 1 blur 01
	show statistics: false
	default: card.rule_text_1
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: rule text 1 blur 02
	show statistics: false
	default: card.rule_text_1
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: rule text 1 blur 03
	show statistics: false
	default: card.rule_text_1
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: rule text 1 blur 04
	show statistics: false
	default: card.rule_text_1
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: damage 2 blur 01
	show statistics: false
	default: card.damage_2
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: damage 2 blur 02
	show statistics: false
	default: card.damage_2
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: damage 2 blur 03
	show statistics: false
	default: card.damage_2
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: damage 2 blur 04
	show statistics: false
	default: card.damage_2
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: rule text 2 blur 01
	show statistics: false
	default: card.rule_text_2
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: rule text 2 blur 02
	show statistics: false
	default: card.rule_text_2
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: rule text 2 blur 03
	show statistics: false
	default: card.rule_text_2
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: rule text 2 blur 04
	show statistics: false
	default: card.rule_text_2
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: damage 3 blur 01
	show statistics: false
	default: card.damage_3
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: damage 3 blur 02
	show statistics: false
	default: card.damage_3
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: damage 3 blur 03
	show statistics: false
	default: card.damage_3
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: damage 3 blur 04
	show statistics: false
	default: card.damage_3
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: rule text 3 blur 01
	show statistics: false
	default: card.rule_text_3
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: rule text 3 blur 02
	show statistics: false
	default: card.rule_text_3
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: rule text 3 blur 03
	show statistics: false
	default: card.rule_text_3
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: rule text 3 blur 04
	show statistics: false
	default: card.rule_text_3
	card list allow: false
	save value: false
	editable: false
	multi line: true
extra card field:
	type: text
	name: attack 1 blur 01
	show statistics: false
	default: card.attack_1
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: attack 1 blur 02
	show statistics: false
	default: card.attack_1
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: attack 1 blur 03
	show statistics: false
	default: card.attack_1
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: attack 1 blur 04
	show statistics: false
	default: card.attack_1
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: attack 2 blur 01
	show statistics: false
	default: card.attack_2
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: attack 2 blur 02
	show statistics: false
	default: card.attack_2
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: attack 2 blur 03
	show statistics: false
	default: card.attack_2
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: attack 2 blur 04
	show statistics: false
	default: card.attack_2
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: attack 3 blur 01
	show statistics: false
	default: card.attack_3
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: attack 3 blur 02
	show statistics: false
	default: card.attack_3
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: attack 3 blur 03
	show statistics: false
	default: card.attack_3
	card list allow: false
	save value: false
	editable: false
extra card field:
	type: text
	name: attack 3 blur 04
	show statistics: false
	default: card.attack_3
	card list allow: false
	save value: false
	editable: false
extra card style:
	card number blur 01:
		left: { card_no_left() }
		top: { card_no_top() }
		width: { card_no_width() }
		height: { card_no_height() }
		z index: 5
		alignment: { card_no_align() }
		visible: { card_no_outline_blur() }
		font:
			name: { card_no_font() }
			size: { card_no_size() }
			weight: { card_no_weight() }
			style: { card_no_style() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	card number blur 02:
		left: { card_no_left() }
		top: { card_no_top() }
		width: { card_no_width() }
		height: { card_no_height() }
		z index: 5
		alignment: { card_no_align() }
		visible: { card_no_outline_blur() }
		font:
			name: { card_no_font() }
			size: { card_no_size() }
			weight: { card_no_weight() }
			style: { card_no_style() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	card number blur 03:
		left: { card_no_left() }
		top: { card_no_top() }
		width: { card_no_width() }
		height: { card_no_height() }
		z index: 5
		alignment: { card_no_align() }
		visible: { card_no_outline_blur() }
		font:
			name: { card_no_font() }
			size: { card_no_size() }
			weight: { card_no_weight() }
			style: { card_no_style() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	card number blur 04:
		left: { card_no_left() }
		top: { card_no_top() }
		width: { card_no_width() }
		height: { card_no_height() }
		z index: 5
		alignment: { card_no_align() }
		visible: { card_no_outline_blur() }
		font:
			name: { card_no_font() }
			size: { card_no_size() }
			weight: { card_no_weight() }
			style: { card_no_style() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	illustrator blur 01:
		left: { ill_left() }
		top: { ill_top() }
		width: { ill_width() }
		height: { ill_height() }
		z index: 5
		alignment: { ill_align() }
		visible: { ill_outline_blur() }
		font:
			name: { ill_font() }
			weight: { ill_weight() }
			style: { ill_style() }
			size: { ill_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	illustrator blur 02:
		left: { ill_left() }
		top: { ill_top() }
		width: { ill_width() }
		height: { ill_height() }
		z index: 5
		alignment: { ill_align() }
		visible: { ill_outline_blur() }
		font:
			name: { ill_font() }
			weight: { ill_weight() }
			style: { ill_style() }
			size: { ill_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	illustrator blur 03:
		left: { ill_left() }
		top: { ill_top() }
		width: { ill_width() }
		height: { ill_height() }
		z index: 5
		alignment: { ill_align() }
		visible: { ill_outline_blur() }
		font:
			name: { ill_font() }
			weight: { ill_weight() }
			style: { ill_style() }
			size: { ill_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	illustrator blur 04:
		left: { ill_left() }
		top: { ill_top() }
		width: { ill_width() }
		height: { ill_height() }
		z index: 5
		alignment: { ill_align() }
		visible: { ill_outline_blur() }
		font:
			name: { ill_font() }
			weight: { ill_weight() }
			style: { ill_style() }
			size: { ill_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	copyright blur 01:
		left: { copy_left() }
		top: { copy_top() }
		width: { copy_width() }
		height: { copy_height() }
		z index: 5
		alignment: { copy_align() }
		visible: { copy_outline_blur() }
		font:
			name: { copy_font() }
			size: { copy_size() }
			weight: { copy_weight() }
			style: { copy_style() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	copyright blur 02:
		left: { copy_left() }
		top: { copy_top() }
		width: { copy_width() }
		height: { copy_height() }
		z index: 5
		alignment: { copy_align() }
		visible: { copy_outline_blur() }
		font:
			name: { copy_font() }
			size: { copy_size() }
			weight: { copy_weight() }
			style: { copy_style() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	copyright blur 03:
		left: { copy_left() }
		top: { copy_top() }
		width: { copy_width() }
		height: { copy_height() }
		z index: 5
		alignment: { copy_align() }
		visible: { copy_outline_blur() }
		font:
			name: { copy_font() }
			size: { copy_size() }
			weight: { copy_weight() }
			style: { copy_style() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	copyright blur 04:
		left: { copy_left() }
		top: { copy_top() }
		width: { copy_width() }
		height: { copy_height() }
		z index: 5
		alignment: { copy_align() }
		visible: { copy_outline_blur() }
		font:
			name: { copy_font() }
			size: { copy_size() }
			weight: { copy_weight() }
			style: { copy_style() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	weakoverlay blur 01:
		left: { weak_ov_left() }
		top: { weak_ov_top() }
		width: { weak_ov_width() }
		height: { weak_ov_height() }
		z index: 5
		visible: { wrr_ov_outline_blur() }
		alignment: { wrr_ov_align() }
		font:
			name: { wrr_ov_font() }
			weight: { wrr_ov_weight() }
			style: { wrr_ov_style() }
			size: { wrr_ov_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	weakoverlay blur 02:
		left: { weak_ov_left() }
		top: { weak_ov_top() }
		width: { weak_ov_width() }
		height: { weak_ov_height() }
		z index: 5
		visible: { wrr_ov_outline_blur() }
		alignment: { wrr_ov_align() }
		font:
			name: { wrr_ov_font() }
			weight: { wrr_ov_weight() }
			style: { wrr_ov_style() }
			size: { wrr_ov_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	weakoverlay blur 03:
		left: { weak_ov_left() }
		top: { weak_ov_top() }
		width: { weak_ov_width() }
		height: { weak_ov_height() }
		z index: 5
		visible: { wrr_ov_outline_blur() }
		alignment: { wrr_ov_align() }
		font:
			name: { wrr_ov_font() }
			weight: { wrr_ov_weight() }
			style: { wrr_ov_style() }
			size: { wrr_ov_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	weakoverlay blur 04:
		left: { weak_ov_left() }
		top: { weak_ov_top() }
		width: { weak_ov_width() }
		height: { weak_ov_height() }
		z index: 5
		visible: { wrr_ov_outline_blur() }
		alignment: { wrr_ov_align() }
		font:
			name: { wrr_ov_font() }
			weight: { wrr_ov_weight() }
			style: { wrr_ov_style() }
			size: { wrr_ov_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	resoverlay blur 01:
		left: { res_ov_left() }
		top: { res_ov_top() }
		width: { res_ov_width() }
		height: { res_ov_height() }
		z index: 5
		visible: { wrr_ov_outline_blur() }
		alignment: { wrr_ov_align() }
		font:
			name: { wrr_ov_font() }
			weight: { wrr_ov_weight() }
			style: { wrr_ov_style() }
			size: { wrr_ov_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	resoverlay blur 02:
		left: { res_ov_left() }
		top: { res_ov_top() }
		width: { res_ov_width() }
		height: { res_ov_height() }
		z index: 5
		visible: { wrr_ov_outline_blur() }
		alignment: { wrr_ov_align() }
		font:
			name: { wrr_ov_font() }
			weight: { wrr_ov_weight() }
			style: { wrr_ov_style() }
			size: { wrr_ov_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	resoverlay blur 03:
		left: { res_ov_left() }
		top: { res_ov_top() }
		width: { res_ov_width() }
		height: { res_ov_height() }
		z index: 5
		visible: { wrr_ov_outline_blur() }
		alignment: { wrr_ov_align() }
		font:
			name: { wrr_ov_font() }
			weight: { wrr_ov_weight() }
			style: { wrr_ov_style() }
			size: { wrr_ov_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	resoverlay blur 04:
		left: { res_ov_left() }
		top: { res_ov_top() }
		width: { res_ov_width() }
		height: { res_ov_height() }
		z index: 5
		visible: { wrr_ov_outline_blur() }
		alignment: { wrr_ov_align() }
		font:
			name: { wrr_ov_font() }
			weight: { wrr_ov_weight() }
			style: { wrr_ov_style() }
			size: { wrr_ov_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	retoverlay blur 01:
		left: { ret_ov_left() }
		top: { ret_ov_top() }
		width: { ret_ov_width() }
		height: { ret_ov_height() }
		z index: 5
		visible: { wrr_ov_outline_blur() }
		alignment: { wrr_ov_align() }
		line height soft: { ret_ov_lsoft() }
		font:
			name: { wrr_ov_font() }
			weight: { wrr_ov_weight() }
			style: { wrr_ov_style() }
			size: { wrr_ov_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	retoverlay blur 02:
		left: { ret_ov_left() }
		top: { ret_ov_top() }
		width: { ret_ov_width() }
		height: { ret_ov_height() }
		z index: 5
		visible: { wrr_ov_outline_blur() }
		alignment: { wrr_ov_align() }
		line height soft: { ret_ov_lsoft() }
		font:
			name: { wrr_ov_font() }
			weight: { wrr_ov_weight() }
			style: { wrr_ov_style() }
			size: { wrr_ov_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	retoverlay blur 03:
		left: { ret_ov_left() }
		top: { ret_ov_top() }
		width: { ret_ov_width() }
		height: { ret_ov_height() }
		z index: 5
		visible: { wrr_ov_outline_blur() }
		alignment: { wrr_ov_align() }
		line height soft: { ret_ov_lsoft() }
		font:
			name: { wrr_ov_font() }
			weight: { wrr_ov_weight() }
			style: { wrr_ov_style() }
			size: { wrr_ov_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	retoverlay blur 04:
		left: { ret_ov_left() }
		top: { ret_ov_top() }
		width: { ret_ov_width() }
		height: { ret_ov_height() }
		z index: 5
		visible: { wrr_ov_outline_blur() }
		alignment: { wrr_ov_align() }
		line height soft: { ret_ov_lsoft() }
		font:
			name: { wrr_ov_font() }
			weight: { wrr_ov_weight() }
			style: { wrr_ov_style() }
			size: { wrr_ov_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	card name blur 01:
		left: { card_name_left() }
		top: { card_name_top() }
		width: { card_name_width() }
		height: { card_name_height() }
		visible: { card_name_outline_blur() }
		z index: 5
		alignment: { card_name_align() }
		symbol font:
			name: { card_name_symbol_font() }
			size: { card_name_symbol_size() }
		font:
			name: { card_name_font() }
			weight: { card_name_weight() }
			style: { card_name_style() }
			size: { card_name_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	card name blur 02:
		left: { card_name_left() }
		top: { card_name_top() }
		width: { card_name_width() }
		height: { card_name_height() }
		visible: { card_name_outline_blur() }
		z index: 5
		alignment: { card_name_align() }
		symbol font:
			name: { card_name_symbol_font() }
			size: { card_name_symbol_size() }
		font:
			name: { card_name_font() }
			weight: { card_name_weight() }
			style: { card_name_style() }
			size: { card_name_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	card name blur 03:
		left: { card_name_left() }
		top: { card_name_top() }
		width: { card_name_width() }
		height: { card_name_height() }
		visible: { card_name_outline_blur() }
		z index: 5
		alignment: { card_name_align() }
		symbol font:
			name: { card_name_symbol_font() }
			size: { card_name_symbol_size() }
		font:
			name: { card_name_font() }
			weight: { card_name_weight() }
			style: { card_name_style() }
			size: { card_name_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	card name blur 04:
		left: { card_name_left() }
		top: { card_name_top() }
		width: { card_name_width() }
		height: { card_name_height() }
		visible: { card_name_outline_blur() }
		z index: 5
		alignment: { card_name_align() }
		symbol font:
			name: { card_name_symbol_font() }
			size: { card_name_symbol_size() }
		font:
			name: { card_name_font() }
			weight: { card_name_weight() }
			style: { card_name_style() }
			size: { card_name_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	stuff blur 01:
		left: { x_left(322) }
		top: { y_top(496) }
		width: { fun_expand_size(33) }
		height: { fun_expand_size(14) }
		z index: 10
		font:
			name: "GillSansCdn"
			size: { fun_expand_font(12) }
			weight: "bold"
			color:
				script: if contains(card.general_options_07, match: "Secret Rare (Gold)") then rgb(255,220,55)
					else if contains(card.general_options_07, match: "Team Plasma") then rgb(17,116,180)
					else if contains(card.general_options_07, match: "Team Flare") then rgb(214,16,26)
					else if contains(card.general_options_07, match: "User Defined Team") and contains(card.general_options_07, match: "Colored Border") then rgb(191,186,47)
					else if is_pokemon() and contains(card.general_options_07, match: "EX Pokemon")
						then if contains(card.general_options_07, match: "Retro Card Face") then rgb(220,179,74)
						else rgb(78,76,74)
					else if is_trainer() and contains(card.general_options_07, match: "Ace Spec Trainer") then rgb(78,76,74)
					else if is_trainer() and (contains(card.art_options, match: "Full Art") or contains(card.art_options, match: "Popout Art (for Advanced Users)")) then rgb(171,166,162)
					else rgb(191,186,47)
	hp blur 01:
		left: { hp_left() }
		top: { hp_top() }
		width: { hp_width() }
		height: { hp_height() }
		z index: 5
		alignment: { hp_align() }
		visible: { hp_outline_blur() }
		font:
			name: { hp_font() }
			weight: { hp_weight() }
			style: { hp_style() }
			size: { hp_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	hp blur 02:
		left: { hp_left() }
		top: { hp_top() }
		width: { hp_width() }
		height: { hp_height() }
		z index: 5
		alignment: { hp_align() }
		visible: { hp_outline_blur() }
		font:
			name: { hp_font() }
			weight: { hp_weight() }
			style: { hp_style() }
			size: { hp_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	hp blur 03:
		left: { hp_left() }
		top: { hp_top() }
		width: { hp_width() }
		height: { hp_height() }
		z index: 5
		alignment: { hp_align() }
		visible: { hp_outline_blur() }
		font:
			name: { hp_font() }
			weight: { hp_weight() }
			style: { hp_style() }
			size: { hp_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	hp blur 04:
		left: { hp_left() }
		top: { hp_top() }
		width: { hp_width() }
		height: { hp_height() }
		z index: 5
		alignment: { hp_align() }
		visible: { hp_outline_blur() }
		font:
			name: { hp_font() }
			weight: { hp_weight() }
			style: { hp_style() }
			size: { hp_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	weakness blur 01:
		left: { weak_left() }
		top: { weak_top() }
		width: { weak_width() }
		height: { weak_height() }
		z index: 5
		always symbol: true
		visible: { weak_outline_blur() }
		alignment: { weak_align() }
		symbol font:
			name: { weak_symbol_font() }
			size: { weak_symbol_size() }
		font:
			name: { weak_font() }
			size: { weak_size() }
			weight: { weak_weight() }
			style: { weak_style() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	weakness blur 02:
		left: { weak_left() }
		top: { weak_top() }
		width: { weak_width() }
		height: { weak_height() }
		z index: 5
		always symbol: true
		visible: { weak_outline_blur() }
		alignment: { weak_align() }
		symbol font:
			name: { weak_symbol_font() }
			size: { weak_symbol_size() }
		font:
			name: { weak_font() }
			size: { weak_size() }
			weight: { weak_weight() }
			style: { weak_style() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	weakness blur 03:
		left: { weak_left() }
		top: { weak_top() }
		width: { weak_width() }
		height: { weak_height() }
		z index: 5
		always symbol: true
		visible: { weak_outline_blur() }
		alignment: { weak_align() }
		symbol font:
			name: { weak_symbol_font() }
			size: { weak_symbol_size() }
		font:
			name: { weak_font() }
			size: { weak_size() }
			weight: { weak_weight() }
			style: { weak_style() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	weakness blur 04:
		left: { weak_left() }
		top: { weak_top() }
		width: { weak_width() }
		height: { weak_height() }
		z index: 5
		always symbol: true
		visible: { weak_outline_blur() }
		alignment: { weak_align() }
		symbol font:
			name: { weak_symbol_font() }
			size: { weak_symbol_size() }
		font:
			name: { weak_font() }
			size: { weak_size() }
			weight: { weak_weight() }
			style: { weak_style() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	resistance blur 01:
		left: { resist_left() }
		top: { resist_top() }
		width: { resist_width() }
		height: { resist_height() }
		z index: 5
		always symbol: true
		visible: { resist_outline_blur() }
		alignment: { resist_align() }
		symbol font:
			name: { resist_symbol_font() }
			size: { resist_symbol_size() }
		font:
			name: { resist_font() }
			size: { resist_size() }
			weight: { resist_weight() }
			style: { resist_style() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	resistance blur 02:
		left: { resist_left() }
		top: { resist_top() }
		width: { resist_width() }
		height: { resist_height() }
		z index: 5
		always symbol: true
		visible: { resist_outline_blur() }
		alignment: { resist_align() }
		symbol font:
			name: { resist_symbol_font() }
			size: { resist_symbol_size() }
		font:
			name: { resist_font() }
			size: { resist_size() }
			weight: { resist_weight() }
			style: { resist_style() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	resistance blur 03:
		left: { resist_left() }
		top: { resist_top() }
		width: { resist_width() }
		height: { resist_height() }
		z index: 5
		always symbol: true
		visible: { resist_outline_blur() }
		alignment: { resist_align() }
		symbol font:
			name: { resist_symbol_font() }
			size: { resist_symbol_size() }
		font:
			name: { resist_font() }
			size: { resist_size() }
			weight: { resist_weight() }
			style: { resist_style() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	resistance blur 04:
		left: { resist_left() }
		top: { resist_top() }
		width: { resist_width() }
		height: { resist_height() }
		z index: 5
		always symbol: true
		visible: { resist_outline_blur() }
		alignment: { resist_align() }
		symbol font:
			name: { resist_symbol_font() }
			size: { resist_symbol_size() }
		font:
			name: { resist_font() }
			size: { resist_size() }
			weight: { resist_weight() }
			style: { resist_style() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	flavor text blur 01:
		left: { flavor_left() }
		top: { flavor_top() }
		width: { flavor_width() }
		height: { flavor_height() }
		z index: 5
		visible: { flavor_outline_blur() }
		alignment: { flavor_align() }
		line height soft: { flavor_lh_soft() }
		padding left: { flavor_pad_left() }
		mask: { flavor_mask() }
		font:
			name: { flavor_font() }
			scale down to: 6
			weight: { flavor_weight() }
			style: { flavor_style() }
			size: { flavor_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	flavor text blur 02:
		left: { flavor_left() }
		top: { flavor_top() }
		width: { flavor_width() }
		height: { flavor_height() }
		z index: 5
		visible: { flavor_outline_blur() }
		alignment: { flavor_align() }
		line height soft: { flavor_lh_soft() }
		padding left: { flavor_pad_left() }
		mask: { flavor_mask() }
		font:
			name: { flavor_font() }
			scale down to: 6
			weight: { flavor_weight() }
			style: { flavor_style() }
			size: { flavor_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	flavor text blur 03:
		left: { flavor_left() }
		top: { flavor_top() }
		width: { flavor_width() }
		height: { flavor_height() }
		z index: 5
		visible: { flavor_outline_blur() }
		alignment: { flavor_align() }
		line height soft: { flavor_lh_soft() }
		padding left: { flavor_pad_left() }
		mask: { flavor_mask() }
		font:
			name: { flavor_font() }
			scale down to: 6
			weight: { flavor_weight() }
			style: { flavor_style() }
			size: { flavor_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	flavor text blur 04:
		left: { flavor_left() }
		top: { flavor_top() }
		width: { flavor_width() }
		height: { flavor_height() }
		z index: 5
		visible: { flavor_outline_blur() }
		alignment: { flavor_align() }
		line height soft: { flavor_lh_soft() }
		padding left: { flavor_pad_left() }
		mask: { flavor_mask() }
		font:
			name: { flavor_font() }
			scale down to: 6
			weight: { flavor_weight() }
			style: { flavor_style() }
			size: { flavor_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	evolution 1 blur 01:
		left: { evolution_left() }
		top: { evolution_top() }
		width: { evolution_width() }
		height: { evolution_height() }
		alignment: { evolution_align() }
		z index: 5
		visible: { evolution_outline_blur() }
		font:
			name: { evolution_font() }
			weight: { evolution_weight() }
			style: { evolution_style() }
			size: { evolution_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	evolution 1 blur 02:
		left: { evolution_left() }
		top: { evolution_top() }
		width: { evolution_width() }
		height: { evolution_height() }
		alignment: { evolution_align() }
		z index: 5
		visible: { evolution_outline_blur() }
		font:
			name: { evolution_font() }
			weight: { evolution_weight() }
			style: { evolution_style() }
			size: { evolution_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	evolution 1 blur 03:
		left: { evolution_left() }
		top: { evolution_top() }
		width: { evolution_width() }
		height: { evolution_height() }
		alignment: { evolution_align() }
		z index: 5
		visible: { evolution_outline_blur() }
		font:
			name: { evolution_font() }
			weight: { evolution_weight() }
			style: { evolution_style() }
			size: { evolution_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	evolution 1 blur 04:
		left: { evolution_left() }
		top: { evolution_top() }
		width: { evolution_width() }
		height: { evolution_height() }
		alignment: { evolution_align() }
		z index: 5
		visible: { evolution_outline_blur() }
		font:
			name: { evolution_font() }
			weight: { evolution_weight() }
			style: { evolution_style() }
			size: { evolution_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	evolution entry blur 01:
		left: { evo_left() }
		top: { evolution_top() }
		width: { evo_width() }
		height: { evo_height() }
		alignment: { evolution_align() }
		z index: 5
		visible: { evo_outline_blur() }
		font:
			name: { evolution_font() }
			weight: { evolution_weight() }
			style: { evolution_style() }
			size: { evolution_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	evolution entry blur 02:
		left: { evo_left() }
		top: { evolution_top() }
		width: { evo_width() }
		height: { evo_height() }
		alignment: { evolution_align() }
		z index: 5
		visible: { evo_outline_blur() }
		font:
			name: { evolution_font() }
			weight: { evolution_weight() }
			style: { evolution_style() }
			size: { evolution_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	evolution entry blur 03:
		left: { evo_left() }
		top: { evolution_top() }
		width: { evo_width() }
		height: { evo_height() }
		alignment: { evolution_align() }
		z index: 5
		visible: { evo_outline_blur() }
		font:
			name: { evolution_font() }
			weight: { evolution_weight() }
			style: { evolution_style() }
			size: { evolution_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	evolution entry blur 04:
		left: { evo_left() }
		top: { evolution_top() }
		width: { evo_width() }
		height: { evo_height() }
		alignment: { evolution_align() }
		z index: 5
		visible: { evo_outline_blur() }
		font:
			name: { evolution_font() }
			weight: { evolution_weight() }
			style: { evolution_style() }
			size: { evolution_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	evolution 2 blur 01:
		left: { evorule_left() }
		top: { evorule_top() }
		width: { evorule_width() }
		height: { evorule_height() }
		visible: { evorule_outline_blur() }
		alignment: { evorule_align() }
		z index: 5
		font:
			name: { evorule_font() }
			weight: { evorule_weight() }
			style: { evorule_style() }
			size: { evorule_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	evolution 2 blur 02:
		left: { evorule_left() }
		top: { evorule_top() }
		width: { evorule_width() }
		height: { evorule_height() }
		visible: { evorule_outline_blur() }
		alignment: { evorule_align() }
		z index: 5
		font:
			name: { evorule_font() }
			weight: { evorule_weight() }
			style: { evorule_style() }
			size: { evorule_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	evolution 2 blur 03:
		left: { evorule_left() }
		top: { evorule_top() }
		width: { evorule_width() }
		height: { evorule_height() }
		visible: { evorule_outline_blur() }
		alignment: { evorule_align() }
		z index: 5
		font:
			name: { evorule_font() }
			weight: { evorule_weight() }
			style: { evorule_style() }
			size: { evorule_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	evolution 2 blur 04:
		left: { evorule_left() }
		top: { evorule_top() }
		width: { evorule_width() }
		height: { evorule_height() }
		visible: { evorule_outline_blur() }
		alignment: { evorule_align() }
		z index: 5
		font:
			name: { evorule_font() }
			weight: { evorule_weight() }
			style: { evorule_style() }
			size: { evorule_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	title 1 blur 01:
		left: { title_1_left() }
		top: { title_1_top() }
		width: { title_1_width() }
		height: { title_1_height() }
		z index: 5
		visible: { title_1_outline_blur() }
		alignment: { title_1_align() }
		font:
			name: { title_1_font() }
			weight: { title_1_weight() }
			style: { title_1_style() }
			size: { title_1_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	title 1 blur 02:
		left: { title_1_left() }
		top: { title_1_top() }
		width: { title_1_width() }
		height: { title_1_height() }
		z index: 5
		visible: { title_1_outline_blur() }
		alignment: { title_1_align() }
		font:
			name: { title_1_font() }
			weight: { title_1_weight() }
			style: { title_1_style() }
			size: { title_1_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	title 1 blur 03:
		left: { title_1_left() }
		top: { title_1_top() }
		width: { title_1_width() }
		height: { title_1_height() }
		z index: 5
		visible: { title_1_outline_blur() }
		alignment: { title_1_align() }
		font:
			name: { title_1_font() }
			weight: { title_1_weight() }
			style: { title_1_style() }
			size: { title_1_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	title 1 blur 04:
		left: { title_1_left() }
		top: { title_1_top() }
		width: { title_1_width() }
		height: { title_1_height() }
		z index: 5
		visible: { title_1_outline_blur() }
		alignment: { title_1_align() }
		font:
			name: { title_1_font() }
			weight: { title_1_weight() }
			style: { title_1_style() }
			size: { title_1_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	title 2 blur 01:
		left: { title_2_left() }
		top: { title_2_top() }
		width: { title_2_width() }
		height: { title_2_height() }
		z index: 3
		visible: { title_2_outline_blur() }
		alignment: { title_2_align() }
		font:
			name: { title_2_font() }
			weight: { title_2_weight() }
			style: { title_2_style() }
			size: { title_2_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	title 2 blur 02:
		left: { title_2_left() }
		top: { title_2_top() }
		width: { title_2_width() }
		height: { title_2_height() }
		z index: 3
		visible: { title_2_outline_blur() }
		alignment: { title_2_align() }
		font:
			name: { title_2_font() }
			weight: { title_2_weight() }
			style: { title_2_style() }
			size: { title_2_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	title 2 blur 03:
		left: { title_2_left() }
		top: { title_2_top() }
		width: { title_2_width() }
		height: { title_2_height() }
		z index: 3
		visible: { title_2_outline_blur() }
		alignment: { title_2_align() }
		font:
			name: { title_2_font() }
			weight: { title_2_weight() }
			style: { title_2_style() }
			size: { title_2_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	title 2 blur 04:
		left: { title_2_left() }
		top: { title_2_top() }
		width: { title_2_width() }
		height: { title_2_height() }
		z index: 3
		visible: { title_2_outline_blur() }
		alignment: { title_2_align() }
		font:
			name: { title_2_font() }
			weight: { title_2_weight() }
			style: { title_2_style() }
			size: { title_2_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	title 3 blur 01:
		left: { title_3_left() }
		top: { title_3_top() }
		width: { title_3_width() }
		height: { title_3_height() }
		z index: 4
		visible: { title_3_outline_blur() }
		alignment: { title_3_align() }
		font:
			name: { title_3_font() }
			weight: { title_3_weight() }
			style: { title_3_style() }
			size: { title_3_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	title 3 blur 02:
		left: { title_3_left() }
		top: { title_3_top() }
		width: { title_3_width() }
		height: { title_3_height() }
		z index: 4
		visible: { title_3_outline_blur() }
		alignment: { title_3_align() }
		font:
			name: { title_3_font() }
			weight: { title_3_weight() }
			style: { title_3_style() }
			size: { title_3_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	title 3 blur 03:
		left: { title_3_left() }
		top: { title_3_top() }
		width: { title_3_width() }
		height: { title_3_height() }
		z index: 4
		visible: { title_3_outline_blur() }
		alignment: { title_3_align() }
		font:
			name: { title_3_font() }
			weight: { title_3_weight() }
			style: { title_3_style() }
			size: { title_3_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	title 3 blur 04:
		left: { title_3_left() }
		top: { title_3_top() }
		width: { title_3_width() }
		height: { title_3_height() }
		z index: 4
		visible: { title_3_outline_blur() }
		alignment: { title_3_align() }
		font:
			name: { title_3_font() }
			weight: { title_3_weight() }
			style: { title_3_style() }
			size: { title_3_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	pokedex text 2 blur 01:
		left: { pokedex2_left() }
		top: { pokedex2_top() }
		width: { pokedex2_width() }
		height: { pokedex2_height() }
		z index: 5
		alignment: { pokedex2_align() }
		visible: { pokedex2_outline_blur() }
		font
			name: { pokedex2_font() }
			weight: { pokedex2_weight() }
			style: { pokedex2_style() }
			size: { pokedex2_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	pokedex text 2 blur 02:
		left: { pokedex2_left() }
		top: { pokedex2_top() }
		width: { pokedex2_width() }
		height: { pokedex2_height() }
		z index: 5
		alignment: { pokedex2_align() }
		visible: { pokedex2_outline_blur() }
		font
			name: { pokedex2_font() }
			weight: { pokedex2_weight() }
			style: { pokedex2_style() }
			size: { pokedex2_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	pokedex text 2 blur 03:
		left: { pokedex2_left() }
		top: { pokedex2_top() }
		width: { pokedex2_width() }
		height: { pokedex2_height() }
		z index: 5
		alignment: { pokedex2_align() }
		visible: { pokedex2_outline_blur() }
		font
			name: { pokedex2_font() }
			weight: { pokedex2_weight() }
			style: { pokedex2_style() }
			size: { pokedex2_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	pokedex text 2 blur 04:
		left: { pokedex2_left() }
		top: { pokedex2_top() }
		width: { pokedex2_width() }
		height: { pokedex2_height() }
		z index: 5
		alignment: { pokedex2_align() }
		visible: { pokedex2_outline_blur() }
		font
			name: { pokedex2_font() }
			weight: { pokedex2_weight() }
			style: { pokedex2_style() }
			size: { pokedex2_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	special rule 1 blur 01:
		left: { special_rule_left() }
		top: { special_rule_top() }
		width: { special_rule_width() }
		height: { special_rule_height() }
		z index: 5
		visible: { special_rule_outline_blur() }
		alignment: { special_rule_align() }
		line height soft: { special_rule_lh_soft() }
		line height hard: { special_rule_lh_hard() }
		padding left: { special_rule_pad_left() }
		padding bottom: { special_rule_pad_bottom() }
		padding right: { special_rule_pad_right() }
		mask: { special_rule_mask() }
		font:
			name: { special_rule_font() }
			weight: { special_rule_weight() }
			style: { special_rule_style() }
			size: { special_rule_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	special rule 1 blur 02:
		left: { special_rule_left() }
		top: { special_rule_top() }
		width: { special_rule_width() }
		height: { special_rule_height() }
		z index: 5
		visible: { special_rule_outline_blur() }
		alignment: { special_rule_align() }
		line height soft: { special_rule_lh_soft() }
		line height hard: { special_rule_lh_hard() }
		padding left: { special_rule_pad_left() }
		padding bottom: { special_rule_pad_bottom() }
		padding right: { special_rule_pad_right() }
		mask: { special_rule_mask() }
		font:
			name: { special_rule_font() }
			weight: { special_rule_weight() }
			style: { special_rule_style() }
			size: { special_rule_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	special rule 1 blur 03:
		left: { special_rule_left() }
		top: { special_rule_top() }
		width: { special_rule_width() }
		height: { special_rule_height() }
		z index: 5
		visible: { special_rule_outline_blur() }
		alignment: { special_rule_align() }
		line height soft: { special_rule_lh_soft() }
		line height hard: { special_rule_lh_hard() }
		padding left: { special_rule_pad_left() }
		padding bottom: { special_rule_pad_bottom() }
		padding right: { special_rule_pad_right() }
		mask: { special_rule_mask() }
		font:
			name: { special_rule_font() }
			weight: { special_rule_weight() }
			style: { special_rule_style() }
			size: { special_rule_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	special rule 1 blur 04:
		left: { special_rule_left() }
		top: { special_rule_top() }
		width: { special_rule_width() }
		height: { special_rule_height() }
		z index: 5
		visible: { special_rule_outline_blur() }
		alignment: { special_rule_align() }
		line height soft: { special_rule_lh_soft() }
		line height hard: { special_rule_lh_hard() }
		padding left: { special_rule_pad_left() }
		padding bottom: { special_rule_pad_bottom() }
		padding right: { special_rule_pad_right() }
		mask: { special_rule_mask() }
		font:
			name: { special_rule_font() }
			weight: { special_rule_weight() }
			style: { special_rule_style() }
			size: { special_rule_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	special rule 2 blur 01:
		left: { special_rule_2_left() }
		top: { special_rule_2_top() }
		width: { special_rule_2_width() }
		height: { special_rule_2_height() }
		z index: 5
		visible: { special_rule_2_outline_blur() }
		alignment: { special_rule_2_align() }
		line height soft: { special_rule_2_lh_soft() }
		line height hard: { special_rule_2_lh_hard() }
		padding left: { special_rule_2_pad_left() }
		padding bottom: { special_rule_2_pad_bottom() }
		padding right: { special_rule_2_pad_right() }
		padding top: { special_rule_2_pad_top() }
		mask: { special_rule_2_mask() }
		font:
			name: { special_rule_2_font() }
			weight: { special_rule_2_weight() }
			style: { special_rule_2_style() }
			size: { special_rule_2_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	special rule 2 blur 02:
		left: { special_rule_2_left() }
		top: { special_rule_2_top() }
		width: { special_rule_2_width() }
		height: { special_rule_2_height() }
		z index: 5
		visible: { special_rule_2_outline_blur() }
		alignment: { special_rule_2_align() }
		line height soft: { special_rule_2_lh_soft() }
		line height hard: { special_rule_2_lh_hard() }
		padding left: { special_rule_2_pad_left() }
		padding bottom: { special_rule_2_pad_bottom() }
		padding right: { special_rule_2_pad_right() }
		padding top: { special_rule_2_pad_top() }
		mask: { special_rule_2_mask() }
		font:
			name: { special_rule_2_font() }
			weight: { special_rule_2_weight() }
			style: { special_rule_2_style() }
			size: { special_rule_2_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	special rule 2 blur 03:
		left: { special_rule_2_left() }
		top: { special_rule_2_top() }
		width: { special_rule_2_width() }
		height: { special_rule_2_height() }
		z index: 5
		visible: { special_rule_2_outline_blur() }
		alignment: { special_rule_2_align() }
		line height soft: { special_rule_2_lh_soft() }
		line height hard: { special_rule_2_lh_hard() }
		padding left: { special_rule_2_pad_left() }
		padding bottom: { special_rule_2_pad_bottom() }
		padding right: { special_rule_2_pad_right() }
		padding top: { special_rule_2_pad_top() }
		mask: { special_rule_2_mask() }
		font:
			name: { special_rule_2_font() }
			weight: { special_rule_2_weight() }
			style: { special_rule_2_style() }
			size: { special_rule_2_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	special rule 2 blur 04:
		left: { special_rule_2_left() }
		top: { special_rule_2_top() }
		width: { special_rule_2_width() }
		height: { special_rule_2_height() }
		z index: 5
		visible: { special_rule_2_outline_blur() }
		alignment: { special_rule_2_align() }
		line height soft: { special_rule_2_lh_soft() }
		line height hard: { special_rule_2_lh_hard() }
		padding left: { special_rule_2_pad_left() }
		padding bottom: { special_rule_2_pad_bottom() }
		padding right: { special_rule_2_pad_right() }
		padding top: { special_rule_2_pad_top() }
		mask: { special_rule_2_mask() }
		font:
			name: { special_rule_2_font() }
			weight: { special_rule_2_weight() }
			style: { special_rule_2_style() }
			size: { special_rule_2_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	ability 1 blur 01:
		left: { ability_1_left() }
		top: { ability_1_top() }
		width: { ability_1_width() }
		height: { ability_1_height() }
		alignment: { ability_1_align() }
		z index: 7
		visible: { ability_1_outline_blur() }
		font:
			name: { ability_1_font() }
			weight: { ability_1_weight() }
			style: { ability_1_style() }
			size: { ability_1_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	ability 1 blur 02:
		left: { ability_1_left() }
		top: { ability_1_top() }
		width: { ability_1_width() }
		height: { ability_1_height() }
		alignment: { ability_1_align() }
		z index: 7
		visible: { ability_1_outline_blur() }
		font:
			name: { ability_1_font() }
			weight: { ability_1_weight() }
			style: { ability_1_style() }
			size: { ability_1_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	ability 1 blur 03:
		left: { ability_1_left() }
		top: { ability_1_top() }
		width: { ability_1_width() }
		height: { ability_1_height() }
		alignment: { ability_1_align() }
		z index: 7
		visible: { ability_1_outline_blur() }
		font:
			name: { ability_1_font() }
			weight: { ability_1_weight() }
			style: { ability_1_style() }
			size: { ability_1_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	ability 1 blur 04:
		left: { ability_1_left() }
		top: { ability_1_top() }
		width: { ability_1_width() }
		height: { ability_1_height() }
		alignment: { ability_1_align() }
		z index: 7
		visible: { ability_1_outline_blur() }
		font:
			name: { ability_1_font() }
			weight: { ability_1_weight() }
			style: { ability_1_style() }
			size: { ability_1_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	ability rule 1 blur 01:
		left: { ability_rule_1_left() }
		top: { ability_rule_1_top() }
		width: { ability_rule_1_width() }
		height: { ability_rule_1_height() }
		visible: { ability_rule_1_outline_blur() }
		z index: 7
		alignment: { ability_rule_1_align() }
		line height hard: { ability_rule_1_lh_hard() }
		line height soft: { ability_rule_1_lh_soft() }
		font:
			name: { ability_rule_1_font() }
			weight: { ability_rule_1_weight() }
			style: { ability_rule_1_style() }
			size: { ability_rule_1_size() }
			scale down to: 6
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	ability rule 1 blur 02:
		left: { ability_rule_1_left() }
		top: { ability_rule_1_top() }
		width: { ability_rule_1_width() }
		height: { ability_rule_1_height() }
		visible: { ability_rule_1_outline_blur() }
		z index: 7
		alignment: { ability_rule_1_align() }
		line height hard: { ability_rule_1_lh_hard() }
		line height soft: { ability_rule_1_lh_soft() }
		font:
			name: { ability_rule_1_font() }
			weight: { ability_rule_1_weight() }
			style: { ability_rule_1_style() }
			size: { ability_rule_1_size() }
			scale down to: 6
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	ability rule 1 blur 03:
		left: { ability_rule_1_left() }
		top: { ability_rule_1_top() }
		width: { ability_rule_1_width() }
		height: { ability_rule_1_height() }
		visible: { ability_rule_1_outline_blur() }
		z index: 7
		alignment: { ability_rule_1_align() }
		line height hard: { ability_rule_1_lh_hard() }
		line height soft: { ability_rule_1_lh_soft() }
		font:
			name: { ability_rule_1_font() }
			weight: { ability_rule_1_weight() }
			style: { ability_rule_1_style() }
			size: { ability_rule_1_size() }
			scale down to: 6
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	ability rule 1 blur 04:
		left: { ability_rule_1_left() }
		top: { ability_rule_1_top() }
		width: { ability_rule_1_width() }
		height: { ability_rule_1_height() }
		visible: { ability_rule_1_outline_blur() }
		z index: 7
		alignment: { ability_rule_1_align() }
		line height hard: { ability_rule_1_lh_hard() }
		line height soft: { ability_rule_1_lh_soft() }
		font:
			name: { ability_rule_1_font() }
			weight: { ability_rule_1_weight() }
			style: { ability_rule_1_style() }
			size: { ability_rule_1_size() }
			scale down to: 6
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	rule np 1 blur 01:
		left: { rule_np_1_left() }
		top: { rule_np_1_top() }
		width: { rule_np_1_width() }
		height: { rule_np_1_height() }
		z index: 5
		visible: { rule_np_1_outline_blur() }
		alignment: { rule_np_1_align() }
		line height hard: { rule_np_1_lh_hard() }
		line height soft: { rule_np_1_lh_soft() }
		symbol font:
			name: { rule_np_1_symbol_font() }
			size: { rule_np_1_symbol_size() }
			alignment: middle center
		font:
			name: { rule_np_1_font() }
			size: { rule_np_1_size() }
			weight: { rule_np_1_weight() }
			style: { rule_np_1_style() }
			scale down to: 6
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	rule np 1 blur 02:
		left: { rule_np_1_left() }
		top: { rule_np_1_top() }
		width: { rule_np_1_width() }
		height: { rule_np_1_height() }
		z index: 5
		visible: { rule_np_1_outline_blur() }
		alignment: { rule_np_1_align() }
		line height hard: { rule_np_1_lh_hard() }
		line height soft: { rule_np_1_lh_soft() }
		symbol font:
			name: { rule_np_1_symbol_font() }
			size: { rule_np_1_symbol_size() }
			alignment: middle center
		font:
			name: { rule_np_1_font() }
			size: { rule_np_1_size() }
			weight: { rule_np_1_weight() }
			style: { rule_np_1_style() }
			scale down to: 6
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	rule np 1 blur 03:
		left: { rule_np_1_left() }
		top: { rule_np_1_top() }
		width: { rule_np_1_width() }
		height: { rule_np_1_height() }
		z index: 5
		visible: { rule_np_1_outline_blur() }
		alignment: { rule_np_1_align() }
		line height hard: { rule_np_1_lh_hard() }
		line height soft: { rule_np_1_lh_soft() }
		symbol font:
			name: { rule_np_1_symbol_font() }
			size: { rule_np_1_symbol_size() }
			alignment: middle center
		font:
			name: { rule_np_1_font() }
			size: { rule_np_1_size() }
			weight: { rule_np_1_weight() }
			style: { rule_np_1_style() }
			scale down to: 6
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	rule np 1 blur 04:
		left: { rule_np_1_left() }
		top: { rule_np_1_top() }
		width: { rule_np_1_width() }
		height: { rule_np_1_height() }
		z index: 5
		visible: { rule_np_1_outline_blur() }
		alignment: { rule_np_1_align() }
		line height hard: { rule_np_1_lh_hard() }
		line height soft: { rule_np_1_lh_soft() }
		symbol font:
			name: { rule_np_1_symbol_font() }
			size: { rule_np_1_symbol_size() }
			alignment: middle center
		font:
			name: { rule_np_1_font() }
			size: { rule_np_1_size() }
			weight: { rule_np_1_weight() }
			style: { rule_np_1_style() }
			scale down to: 6
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	rule np 2 blur 01:
		left: { rule_np_2_left() }
		top: { rule_np_2_top() }
		width: { rule_np_2_width() }
		height: { rule_np_2_height() }
		angle: { rule_np_2_angle() }
		z index: 5
		visible: { rule_np_2_outline_blur() }
		alignment: { rule_np_2_align() }
		line height hard: { rule_np_2_lh_hard() }
		symbol font:
			name: { rule_np_2_symbol_font() }
			size: { rule_np_2_symbol_size() }
		font:
			name: { rule_np_2_font() }
			size: { rule_np_2_size() }
			weight: { rule_np_2_weight() }
			style: { rule_np_2_style() }
			scale down to: 6
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	rule np 2 blur 02:
		left: { rule_np_2_left() }
		top: { rule_np_2_top() }
		width: { rule_np_2_width() }
		height: { rule_np_2_height() }
		angle: { rule_np_2_angle() }
		z index: 5
		visible: { rule_np_2_outline_blur() }
		alignment: { rule_np_2_align() }
		line height hard: { rule_np_2_lh_hard() }
		symbol font:
			name: { rule_np_2_symbol_font() }
			size: { rule_np_2_symbol_size() }
		font:
			name: { rule_np_2_font() }
			size: { rule_np_2_size() }
			weight: { rule_np_2_weight() }
			style: { rule_np_2_style() }
			scale down to: 6
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	rule np 2 blur 03:
		left: { rule_np_2_left() }
		top: { rule_np_2_top() }
		width: { rule_np_2_width() }
		height: { rule_np_2_height() }
		angle: { rule_np_2_angle() }
		z index: 5
		visible: { rule_np_2_outline_blur() }
		alignment: { rule_np_2_align() }
		line height hard: { rule_np_2_lh_hard() }
		symbol font:
			name: { rule_np_2_symbol_font() }
			size: { rule_np_2_symbol_size() }
		font:
			name: { rule_np_2_font() }
			size: { rule_np_2_size() }
			weight: { rule_np_2_weight() }
			style: { rule_np_2_style() }
			scale down to: 6
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	rule np 2 blur 04:
		left: { rule_np_2_left() }
		top: { rule_np_2_top() }
		width: { rule_np_2_width() }
		height: { rule_np_2_height() }
		angle: { rule_np_2_angle() }
		z index: 5
		visible: { rule_np_2_outline_blur() }
		alignment: { rule_np_2_align() }
		line height hard: { rule_np_2_lh_hard() }
		symbol font:
			name: { rule_np_2_symbol_font() }
			size: { rule_np_2_symbol_size() }
		font:
			name: { rule_np_2_font() }
			size: { rule_np_2_size() }
			weight: { rule_np_2_weight() }
			style: { rule_np_2_style() }
			scale down to: 6
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	damage 1 blur 01:
		left: { damage_1_left() }
		top: { damage_1_top() }
		width: { damage_1_width() }
		height: { damage_1_height() }
		z index: 5
		visible: { damage_1_outline_blur() }
		alignment: { damage_align() }
		font:
			name: { damage_font() }
			weight: { damage_weight() }
			style: { damage_style() }
			size: { damage_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	damage 1 blur 02:
		left: { damage_1_left() }
		top: { damage_1_top() }
		width: { damage_1_width() }
		height: { damage_1_height() }
		z index: 5
		visible: { damage_1_outline_blur() }
		alignment: { damage_align() }
		font:
			name: { damage_font() }
			weight: { damage_weight() }
			style: { damage_style() }
			size: { damage_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	damage 1 blur 03:
		left: { damage_1_left() }
		top: { damage_1_top() }
		width: { damage_1_width() }
		height: { damage_1_height() }
		z index: 5
		visible: { damage_1_outline_blur() }
		alignment: { damage_align() }
		font:
			name: { damage_font() }
			weight: { damage_weight() }
			style: { damage_style() }
			size: { damage_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	damage 1 blur 04:
		left: { damage_1_left() }
		top: { damage_1_top() }
		width: { damage_1_width() }
		height: { damage_1_height() }
		z index: 5
		visible: { damage_1_outline_blur() }
		alignment: { damage_align() }
		font:
			name: { damage_font() }
			weight: { damage_weight() }
			style: { damage_style() }
			size: { damage_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	rule text 1 blur 01:
		left: { rule_1_left() }
		top: { rule_1_top() }
		width: { rule_1_width() }
		height: { rule_1_height() }
		z index: 5
		visible: { rule_1_outline_blur() }
		alignment: { rule_1_align() }
		line height hard: { rule_lh_hard() }
		symbol font:
			name: { rule_symbol_font() }
			size: { rule_symbol_size() }
		font:
			name: { rule_font() }
			weight: { rule_weight() }
			style: { rule_style() }
			size: { rule_size() }
			scale down to: 6
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	rule text 1 blur 02:
		left: { rule_1_left() }
		top: { rule_1_top() }
		width: { rule_1_width() }
		height: { rule_1_height() }
		z index: 5
		visible: { rule_1_outline_blur() }
		alignment: { rule_1_align() }
		line height hard: { rule_lh_hard() }
		symbol font:
			name: { rule_symbol_font() }
			size: { rule_symbol_size() }
		font:
			name: { rule_font() }
			weight: { rule_weight() }
			style: { rule_style() }
			size: { rule_size() }
			scale down to: 6
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	rule text 1 blur 03:
		left: { rule_1_left() }
		top: { rule_1_top() }
		width: { rule_1_width() }
		height: { rule_1_height() }
		z index: 5
		visible: { rule_1_outline_blur() }
		alignment: { rule_1_align() }
		line height hard: { rule_lh_hard() }
		symbol font:
			name: { rule_symbol_font() }
			size: { rule_symbol_size() }
		font:
			name: { rule_font() }
			weight: { rule_weight() }
			style: { rule_style() }
			size: { rule_size() }
			scale down to: 6
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	rule text 1 blur 04:
		left: { rule_1_left() }
		top: { rule_1_top() }
		width: { rule_1_width() }
		height: { rule_1_height() }
		z index: 5
		visible: { rule_1_outline_blur() }
		alignment: { rule_1_align() }
		line height hard: { rule_lh_hard() }
		symbol font:
			name: { rule_symbol_font() }
			size: { rule_symbol_size() }
		font:
			name: { rule_font() }
			weight: { rule_weight() }
			style: { rule_style() }
			size: { rule_size() }
			scale down to: 6
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	damage 2 blur 01:
		left: { damage_2_left() }
		top: { damage_2_top() }
		width: { damage_2_width() }
		height: { damage_2_height() }
		z index: 5
		visible: { damage_2_outline_blur() }
		alignment: { damage_align() }
		font:
			name: { damage_font() }
			weight: { damage_weight() }
			style: { damage_style() }
			size: { damage_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	damage 2 blur 02:
		left: { damage_2_left() }
		top: { damage_2_top() }
		width: { damage_2_width() }
		height: { damage_2_height() }
		z index: 5
		visible: { damage_2_outline_blur() }
		alignment: { damage_align() }
		font:
			name: { damage_font() }
			weight: { damage_weight() }
			style: { damage_style() }
			size: { damage_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	damage 2 blur 03:
		left: { damage_2_left() }
		top: { damage_2_top() }
		width: { damage_2_width() }
		height: { damage_2_height() }
		z index: 5
		visible: { damage_2_outline_blur() }
		alignment: { damage_align() }
		font:
			name: { damage_font() }
			weight: { damage_weight() }
			style: { damage_style() }
			size: { damage_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	damage 2 blur 04:
		left: { damage_2_left() }
		top: { damage_2_top() }
		width: { damage_2_width() }
		height: { damage_2_height() }
		z index: 5
		visible: { damage_2_outline_blur() }
		alignment: { damage_align() }
		font:
			name: { damage_font() }
			weight: { damage_weight() }
			style: { damage_style() }
			size: { damage_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	rule text 2 blur 01:
		left: { rule_2_left() }
		top: { rule_2_top() }
		width: { rule_2_width() }
		height: { rule_2_height() }
		z index: 5
		visible: { rule_2_outline_blur() }
		alignment: { rule_2_align() }
		line height hard: { rule_lh_hard() }
		symbol font:
			name: { rule_symbol_font() }
			size: { rule_symbol_size() }
		font:
			name: { rule_font() }
			weight: { rule_weight() }
			style: { rule_style() }
			size: { rule_size() }
			scale down to: 6
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	rule text 2 blur 02:
		left: { rule_2_left() }
		top: { rule_2_top() }
		width: { rule_2_width() }
		height: { rule_2_height() }
		z index: 5
		visible: { rule_2_outline_blur() }
		alignment: { rule_2_align() }
		line height hard: { rule_lh_hard() }
		symbol font:
			name: { rule_symbol_font() }
			size: { rule_symbol_size() }
		font:
			name: { rule_font() }
			weight: { rule_weight() }
			style: { rule_style() }
			size: { rule_size() }
			scale down to: 6
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	rule text 2 blur 03:
		left: { rule_2_left() }
		top: { rule_2_top() }
		width: { rule_2_width() }
		height: { rule_2_height() }
		z index: 5
		visible: { rule_2_outline_blur() }
		alignment: { rule_2_align() }
		line height hard: { rule_lh_hard() }
		symbol font:
			name: { rule_symbol_font() }
			size: { rule_symbol_size() }
		font:
			name: { rule_font() }
			weight: { rule_weight() }
			style: { rule_style() }
			size: { rule_size() }
			scale down to: 6
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	rule text 2 blur 04:
		left: { rule_2_left() }
		top: { rule_2_top() }
		width: { rule_2_width() }
		height: { rule_2_height() }
		z index: 5
		visible: { rule_2_outline_blur() }
		alignment: { rule_2_align() }
		line height hard: { rule_lh_hard() }
		symbol font:
			name: { rule_symbol_font() }
			size: { rule_symbol_size() }
		font:
			name: { rule_font() }
			weight: { rule_weight() }
			style: { rule_style() }
			size: { rule_size() }
			scale down to: 6
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	damage 3 blur 01:
		left: { damage_3_left() }
		top: { damage_3_top() }
		width: { damage_3_width() }
		height: { damage_3_height() }
		z index: 5
		visible: { damage_3_outline_blur() }
		alignment: { damage_align() }
		font:
			name: { damage_font() }
			weight: { damage_weight() }
			style: { damage_style() }
			size: { damage_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	damage 3 blur 02:
		left: { damage_3_left() }
		top: { damage_3_top() }
		width: { damage_3_width() }
		height: { damage_3_height() }
		z index: 5
		visible: { damage_3_outline_blur() }
		alignment: { damage_align() }
		font:
			name: { damage_font() }
			weight: { damage_weight() }
			style: { damage_style() }
			size: { damage_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	damage 3 blur 03:
		left: { damage_3_left() }
		top: { damage_3_top() }
		width: { damage_3_width() }
		height: { damage_3_height() }
		z index: 5
		visible: { damage_3_outline_blur() }
		alignment: { damage_align() }
		font:
			name: { damage_font() }
			weight: { damage_weight() }
			style: { damage_style() }
			size: { damage_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	damage 3 blur 04:
		left: { damage_3_left() }
		top: { damage_3_top() }
		width: { damage_3_width() }
		height: { damage_3_height() }
		z index: 5
		visible: { damage_3_outline_blur() }
		alignment: { damage_align() }
		font:
			name: { damage_font() }
			weight: { damage_weight() }
			style: { damage_style() }
			size: { damage_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	rule text 3 blur 01:
		left: { rule_3_left() }
		top: { rule_3_top() }
		width: { rule_3_width() }
		height: { rule_3_height() }
		z index: 5
		visible: { rule_3_outline_blur() }
		alignment: { rule_3_align() }
		line height hard: { rule_lh_hard() }
		symbol font:
			name: { rule_symbol_font() }
			size: { rule_symbol_size() }
		font:
			name: { rule_font() }
			weight: { rule_weight() }
			style: { rule_style() }
			size: { rule_size() }
			scale down to: 6
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	rule text 3 blur 02:
		left: { rule_3_left() }
		top: { rule_3_top() }
		width: { rule_3_width() }
		height: { rule_3_height() }
		z index: 5
		visible: { rule_3_outline_blur() }
		alignment: { rule_3_align() }
		line height hard: { rule_lh_hard() }
		symbol font:
			name: { rule_symbol_font() }
			size: { rule_symbol_size() }
		font:
			name: { rule_font() }
			weight: { rule_weight() }
			style: { rule_style() }
			size: { rule_size() }
			scale down to: 6
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	rule text 3 blur 03:
		left: { rule_3_left() }
		top: { rule_3_top() }
		width: { rule_3_width() }
		height: { rule_3_height() }
		z index: 5
		visible: { rule_3_outline_blur() }
		alignment: { rule_3_align() }
		line height hard: { rule_lh_hard() }
		symbol font:
			name: { rule_symbol_font() }
			size: { rule_symbol_size() }
		font:
			name: { rule_font() }
			weight: { rule_weight() }
			style: { rule_style() }
			size: { rule_size() }
			scale down to: 6
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	rule text 3 blur 04:
		left: { rule_3_left() }
		top: { rule_3_top() }
		width: { rule_3_width() }
		height: { rule_3_height() }
		z index: 5
		visible: { rule_3_outline_blur() }
		alignment: { rule_3_align() }
		line height hard: { rule_lh_hard() }
		symbol font:
			name: { rule_symbol_font() }
			size: { rule_symbol_size() }
		font:
			name: { rule_font() }
			weight: { rule_weight() }
			style: { rule_style() }
			size: { rule_size() }
			scale down to: 6
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	attack 1 blur 01:
		left: { attack_1_left() }
		top: { attack_1_top() }
		width: { attack_1_width() }
		height: { attack_1_height() }
		z index: 5
		visible: { attack_1_outline_blur() }
		alignment: { attack_align() }
		font:
			name: { attack_font() }
			weight: { attack_weight() }
			style: { attack_style() }
			size: { attack_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	attack 1 blur 02:
		left: { attack_1_left() }
		top: { attack_1_top() }
		width: { attack_1_width() }
		height: { attack_1_height() }
		z index: 5
		visible: { attack_1_outline_blur() }
		alignment: { attack_align() }
		font:
			name: { attack_font() }
			weight: { attack_weight() }
			style: { attack_style() }
			size: { attack_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	attack 1 blur 03:
		left: { attack_1_left() }
		top: { attack_1_top() }
		width: { attack_1_width() }
		height: { attack_1_height() }
		z index: 5
		visible: { attack_1_outline_blur() }
		alignment: { attack_align() }
		font:
			name: { attack_font() }
			weight: { attack_weight() }
			style: { attack_style() }
			size: { attack_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	attack 1 blur 04:
		left: { attack_1_left() }
		top: { attack_1_top() }
		width: { attack_1_width() }
		height: { attack_1_height() }
		z index: 5
		visible: { attack_1_outline_blur() }
		alignment: { attack_align() }
		font:
			name: { attack_font() }
			weight: { attack_weight() }
			style: { attack_style() }
			size: { attack_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	attack 2 blur 01:
		left: { attack_2_left() }
		top: { attack_2_top() }
		width: { attack_2_width() }
		height: { attack_2_height() }
		z index: 5
		visible: { attack_2_outline_blur() }
		alignment: { attack_align() }
		font:
			name: { attack_font() }
			weight: { attack_weight() }
			style: { attack_style() }
			size: { attack_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	attack 2 blur 02:
		left: { attack_2_left() }
		top: { attack_2_top() }
		width: { attack_2_width() }
		height: { attack_2_height() }
		z index: 5
		visible: { attack_2_outline_blur() }
		alignment: { attack_align() }
		font:
			name: { attack_font() }
			weight: { attack_weight() }
			style: { attack_style() }
			size: { attack_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	attack 2 blur 03:
		left: { attack_2_left() }
		top: { attack_2_top() }
		width: { attack_2_width() }
		height: { attack_2_height() }
		z index: 5
		visible: { attack_2_outline_blur() }
		alignment: { attack_align() }
		font:
			name: { attack_font() }
			weight: { attack_weight() }
			style: { attack_style() }
			size: { attack_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	attack 2 blur 04:
		left: { attack_2_left() }
		top: { attack_2_top() }
		width: { attack_2_width() }
		height: { attack_2_height() }
		z index: 5
		visible: { attack_2_outline_blur() }
		alignment: { attack_align() }
		font:
			name: { attack_font() }
			weight: { attack_weight() }
			style: { attack_style() }
			size: { attack_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
	attack 3 blur 01:
		left: { attack_3_left() }
		top: { attack_3_top() }
		width: { attack_3_width() }
		height: { attack_3_height() }
		z index: 5
		visible: { attack_3_outline_blur() }
		alignment: { attack_align() }
		font:
			name: { attack_font() }
			weight: { attack_weight() }
			style: { attack_style() }
			size: { attack_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: 1
			shadow blur: 2
	attack 3 blur 02:
		left: { attack_3_left() }
		top: { attack_3_top() }
		width: { attack_3_width() }
		height: { attack_3_height() }
		z index: 5
		visible: { attack_3_outline_blur() }
		alignment: { attack_align() }
		font:
			name: { attack_font() }
			weight: { attack_weight() }
			style: { attack_style() }
			size: { attack_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: -1
			shadow blur: 2
	attack 3 blur 03:
		left: { attack_3_left() }
		top: { attack_3_top() }
		width: { attack_3_width() }
		height: { attack_3_height() }
		z index: 5
		visible: { attack_3_outline_blur() }
		alignment: { attack_align() }
		font:
			name: { attack_font() }
			weight: { attack_weight() }
			style: { attack_style() }
			size: { attack_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 2
	attack 3 blur 04:
		left: { attack_3_left() }
		top: { attack_3_top() }
		width: { attack_3_width() }
		height: { attack_3_height() }
		z index: 5
		visible: { attack_3_outline_blur() }
		alignment: { attack_align() }
		font:
			name: { attack_font() }
			weight: { attack_weight() }
			style: { attack_style() }
			size: { attack_size() }
			color: rgb(255,255,255)
			shadow color: rgb(255,255,255)
			shadow displacement x: 1
			shadow displacement y: -1
			shadow blur: 2
extra card field:
	type: choice
	name: test image
	show statistics: false
	card list allow: false
	save value: false
	editable: false
	choice: trainer overlay
extra card field:
	type: text
	name: info text
	show statistics: false
	default: diagnostic()
	card list allow: false
	save value: false
	editable: false
extra card style:
	test image:
		left: { x_left(8) }
		top: { y_top(9) }
		width: { fun_expand_size(350) }
		height: { fun_expand_size(495) }
		visible: { contains(styling.General_Choices, match: "Test Image") }
		render style: image
		z index: 5
		image: { "!test-image.jpg" }
	info text:
		left: { x_left(50) }
		top: { y_top(225+50) }
		width: { fun_expand_size(200) }
		height: { fun_expand_size(50) }
		z index: 5
		visible: { contains(styling.General_Choices, match: "Diagnostic Text") }
		font:
			name: { "GillSans" }
			weight: { "bold" }
			style: { "normal" }
			size: { fun_expand_font(10) }
			color: rgb(255,0,0)
