mse version:		2.1.2
game:				magic
short name:			UB Leveler
full name:			Universes Beyond
icon:				card_sample.png
position hint:		095

version:			2021-02-16
depends on:
	package:			magic.mse-game
	version:			2014-06-25
depends on:
	package:			magic-default-image.mse-include
	version:			2007-09-23
depends on:
	package:			magic-watermarks.mse-include
	version:			2007-09-23
depends on:
	package:			magic-identity-new.mse-include
	version:			2012-01-22
depends on:
	package:			magic-mana-large.mse-symbol-font
	version:			2007-09-23
depends on:
	package:			magic-mana-small.mse-symbol-font
	version:			2007-09-23
depends on:
	package:			magic-mainframe-extras.mse-include
	version:			2007-09-23

card width:			750
card height:		1046
card dpi:			300


### blanks by Card Conjurer, Velvet Byrne, Rachel (the Touhou brainrot one) and GenevensiS
### code by GenevensiS


############################################################## Extra scripts

init script:
	template_prefix :=
	[
		card:					"card/",
		#pt:						"pt/",
		#pt2:					"pt2/",
		#pt3:					"pt3/",
		#pt4:					"pt4/",
		#level:					"level/",
		#level2:					"level2/",
		#level3:					"level3/",
		#level4:					"level4/",
		crown:					"crown/",
		identity:				"/magic-identity-new.mse-include/",
		stamp:					"stamp/",
		alias:					"alias/",
		stampbackground:		"stampbackground/"
		stampbackground2:		"stampbackground2/"
		stampbackground3:		"stampbackground3/"
		stampbackground4:		"stampbackground4/"
		nonstampbackground:		"nonstampbackground/"
		nonstampbackground2:	"nonstampbackground2/"
		nonstampbackground3:	"nonstampbackground3/"
		nonstampbackground4:	"nonstampbackground4/"
		textbox:				"textbox/"
		textbox2:				"textbox2/"
		textbox3:				"textbox3/"
		textbox4:				"textbox4/"
	]
	template_suffix :=
	[
		card:					"card.png",
		#pt:						"pt.png",
		#pt2:					"pt.png",
		#pt3:					"pt.png",
		#pt4:					"pt.png",
		#level:					"level.png",
		#level2:					"level.png",
		#level3:					"level.png",
		#level4:					"level.png",
		crown:					"crown.png",
		identity:				"identity.png"
		stamp:					"stamp.png",
		alias:					"alias.png",
		stampbackground:		"stampbackground.png"
		stampbackground2:		"stampbackground.png"
		stampbackground3:		"stampbackground.png"
		stampbackground4:		"stampbackground.png"
		nonstampbackground:		"nonstampbackground.png"
		nonstampbackground2:	"nonstampbackground.png"
		nonstampbackground3:	"nonstampbackground.png"
		nonstampbackground4:	"nonstampbackground.png"
		textbox:				"textbox.png"
		textbox2:				"textbox.png"
		textbox3:				"textbox.png"
		textbox4:				"textbox.png"
	]
	template :=
	{
		if		type == "pt"		then crop_safe("pt/" + input + "pt.png",		width: 750, height: 1046, offset_x: 0, offset_y: 1500 + 32 - textbox_middles(0) - pt_move(0))
		else if	type == "pt2"		then crop_safe("pt2/" + input + "pt.png",		width: 750, height: 1046, offset_x: 0, offset_y: 1500 + 32 - textbox_middles(1) - pt_move(1))
		else if	type == "pt3"		then crop_safe("pt3/" + input + "pt.png",		width: 750, height: 1046, offset_x: 0, offset_y: 1500 + 32 - textbox_middles(2) - pt_move(2))
		else if	type == "pt4"		then crop_safe("pt4/" + input + "pt.png",		width: 750, height: 1046, offset_x: 0, offset_y: 1500 + 32 - textbox_middles(3) - pt_move(3))
		else if	type == "level"		then crop_safe("level/" + input + "level.png",	width: 750, height: 1046, offset_x: 0, offset_y: 1500 + 38 - textbox_middles(0) - level_move(0))
		else if	type == "level2"	then crop_safe("level2/" + input + "level.png",	width: 750, height: 1046, offset_x: 0, offset_y: 1500 + 38 - textbox_middles(1) - level_move(1))
		else if	type == "level3"	then crop_safe("level3/" + input + "level.png",	width: 750, height: 1046, offset_x: 0, offset_y: 1500 + 38 - textbox_middles(2) - level_move(2))
		else if	type == "level4"	then crop_safe("level4/" + input + "level.png",	width: 750, height: 1046, offset_x: 0, offset_y: 1500 + 38 - textbox_middles(3) - level_move(3))
		else template_prefix[type] +
		(if input == "c" and is_clear() then (if type == "card" then "cclear" else if type != "pt" and not contains(type, match: "textbox")  and not contains(type, match: "stampbackground") then "a" else "c") else input) +
		template_suffix[type]
	}
	template :=
	{
		if		type == "pt"		then crop_safe("pt/" + input + "pt.png",		width: 750, height: 1046, offset_x: 0, offset_y: 1500 + 32 - textbox_middles(0) - pt_move(0))
		else if	type == "pt2"		then crop_safe("pt2/" + input + "pt.png",		width: 750, height: 1046, offset_x: 0, offset_y: 1500 + 32 - textbox_middles(1) - pt_move(1))
		else if	type == "pt3"		then crop_safe("pt3/" + input + "pt.png",		width: 750, height: 1046, offset_x: 0, offset_y: 1500 + 32 - textbox_middles(2) - pt_move(2))
		else if	type == "pt4"		then crop_safe("pt4/" + input + "pt.png",		width: 750, height: 1046, offset_x: 0, offset_y: 1500 + 32 - textbox_middles(3) - pt_move(3))
		else if	type == "level"		then crop_safe("level/" + input + "level.png",	width: 750, height: 1046, offset_x: 0, offset_y: 1500 + 38 - textbox_middles(0) - level_move(0))
		else if	type == "level2"	then crop_safe("level2/" + input + "level.png",	width: 750, height: 1046, offset_x: 0, offset_y: 1500 + 38 - textbox_middles(1) - level_move(1))
		else if	type == "level3"	then crop_safe("level3/" + input + "level.png",	width: 750, height: 1046, offset_x: 0, offset_y: 1500 + 38 - textbox_middles(2) - level_move(2))
		else if	type == "level4"	then crop_safe("level4/" + input + "level.png",	width: 750, height: 1046, offset_x: 0, offset_y: 1500 + 38 - textbox_middles(3) - level_move(3))
		else template_prefix[type] +
		(if input == "c" and is_clear() then (if type == "card" then "cclear" else if type != "pt" and not contains(type, match: "textbox")  and not contains(type, match: "stampbackground") then "a" else "c") else input) +
		template_suffix[type]
	}
	
	card_background :=				{ color_background(input: card.card_color, type: "card",				base_hybrid: card_hybrid)		}@(offset:0 )
	card_alias :=					{ color_background(input: card.card_color, type: "alias",				base_hybrid: card_hybrid)		}@(offset:0 )
	card_crown :=					{ color_background(input: card.card_color, type: "crown",				base_hybrid: card_hybrid)		}@(offset:0 )
	card_ptbox :=					{ color_background(input: card.card_color, type: "pt",					base_hybrid: card_hybrid)		}@(offset:0 )
	card_ptbox2 :=					{ color_background(input: card.card_color, type: "pt2",					base_hybrid: card_hybrid)		}@(offset:0 )
	card_ptbox3 :=					{ color_background(input: card.card_color, type: "pt3",					base_hybrid: card_hybrid)		}@(offset:0 )
	card_ptbox4 :=					{ color_background(input: card.card_color, type: "pt4",					base_hybrid: card_hybrid)		}@(offset:0 )
	card_level :=					{ color_background(input: card.card_color, type: "level",				base_hybrid: card_hybrid)		}@(offset:0 )
	card_level2 :=					{ color_background(input: card.card_color, type: "level2",				base_hybrid: card_hybrid)		}@(offset:0 )
	card_level3 :=					{ color_background(input: card.card_color, type: "level3",				base_hybrid: card_hybrid)		}@(offset:0 )
	card_level4 :=					{ color_background(input: card.card_color, type: "level4",				base_hybrid: card_hybrid)		}@(offset:0 )
	card_stamp :=					{ color_background(input: card.card_color, type: "stamp",				base_hybrid: card_hybrid)		}@(offset:0 )
	card_stamp_background :=		{ color_background(input: card.card_color, type: "stampbackground",		base_hybrid: card_hybrid)		}@(offset:0 )
	card_stamp_background2 :=		{ color_background(input: card.card_color, type: "stampbackground2",	base_hybrid: card_hybrid)		}@(offset:0 )
	card_stamp_background3 :=		{ color_background(input: card.card_color, type: "stampbackground3",	base_hybrid: card_hybrid)		}@(offset:0 )
	card_stamp_background4 :=		{ color_background(input: card.card_color, type: "stampbackground4",	base_hybrid: card_hybrid)		}@(offset:0 )
	card_nonstamp_background :=		{ color_background(input: card.card_color, type: "nonstampbackground",	base_hybrid: card_hybrid)		}@(offset:0 )
	card_nonstamp_background2 :=	{ color_background(input: card.card_color, type: "nonstampbackground2",	base_hybrid: card_hybrid)		}@(offset:0 )
	card_nonstamp_background3 :=	{ color_background(input: card.card_color, type: "nonstampbackground3",	base_hybrid: card_hybrid)		}@(offset:0 )
	card_nonstamp_background4 :=	{ color_background(input: card.card_color, type: "nonstampbackground4",	base_hybrid: card_hybrid)		}@(offset:0 )
	card_textbox :=					{ color_background(input: card.card_color, type: "textbox",				base_hybrid: card_hybrid)		}@(offset:0 )
	card_textbox2 :=				{ color_background(input: card.card_color, type: "textbox2",			base_hybrid: card_hybrid)		}@(offset:0 )
	card_textbox3 :=				{ color_background(input: card.card_color, type: "textbox3",			base_hybrid: card_hybrid)		}@(offset:0 )
	card_textbox4 :=				{ color_background(input: card.card_color, type: "textbox4",			base_hybrid: card_hybrid)		}@(offset:0 )
	
	pure_colors :=
	{
		sort_text(
			order: if card_is_wedge(input) then "(wbgur)" else "(wubrg)",
			(if chosen(card.card_color, choice:"white")	then "w") +
			(if chosen(card.card_color, choice:"blue")	then "u") +
			(if chosen(card.card_color, choice:"black")	then "b") +
			(if chosen(card.card_color, choice:"red")	then "r") +
			(if chosen(card.card_color, choice:"green")	then "g")
		)
	}
	
	mana_t :=
	{
		if      styling.tap_symbol == "old"        then "old"
		else if styling.tap_symbol == "diagonal T" then "older"
		else                                            "new"
	}
	guild_mana := { styling.use_guild_mana_symbols }
	ancestral_mana := { styling.use_ancestral_mana_symbols }
	
	has_identity := { styling.color_indicator_dot }
	has_identity_2 := { false }
	
	is_promo := { styling.promo }
	
	is_unsorted := { styling.remove_from_autocount }
	
	is_stamped := { card.card_stamp != "none" and (contains(styling.holofoil_stamps, match: "yes") or (styling.holofoil_stamps == "only rares and mythics" and is_rare()))}
	is_foil_stamped := { styling.holofoil_stamps == "yes, all foil" or is_rare() }
	
	is_aliased := { card.alias != "" }
	
	is_crowned := { styling.legend_crown == "yes" or (styling.legend_crown == "if legendary" and contains(card.super_type, match:"Legendary")) }
	
	is_land := { styling.land_frame == "yes" or (styling.land_frame == "if land" and contains(card.super_type, match:"Land")) }
	
	is_vehicle := { styling.vehicle_frame == "yes" or (styling.vehicle_frame == "if vehicle" and contains(card.sub_type, match:"Vehicle")) }
	
	frame_alpha :=
	{
		if styling.opacity_percentage == "" then
		(
			if pure_colors(card.card_color) == ""
			and	not contains(card.super_type, match:"Land")
			and	not contains(card.super_type, match:"Artifact")
			and	not contains(card.card_color, match:"artifact")
			and	not contains(card.card_color, match:"land")
			and	not contains(card.card_color, match:"hybrid")
			and	not contains(card.card_color, match:"multicolor")
			then 0.8
			else 1.0
		)
		else if styling.opacity_percentage == "100" then 1.0
		else clamp(to_number(styling.opacity_percentage)/100, minimum: 0.0, maximum: 1.0)
	}
	is_clear := { frame_alpha() <= 0.995 }
	clear_mask :=
	{
		grey := frame_alpha() * 255
		combine_blend(image1: recolor_image("clear_mask.png", color: rgb(grey,grey,grey)), image2: if is_crowned() then "opaque_crown_mask.png" else "opaque_mask.png", combine: "add")
	}
	
	level_label := { if styling.level_label == "" then "level" else pull_comma_array(styling.level_label, end:false, cell:input, default:styling.level_label) }
	
	chop_top :=		{ split := split_comma(styling.chop_rule_textbox); if length(split) > 0 and split.0 != "" and split.0 != "-" then clamp(to_number(split.0), maximum:1000, minimum:-1000) else 0 }
	chop_bottom :=	{ split := split_comma(styling.chop_rule_textbox); if length(split) > 1 and split.1 != "" and split.1 != "-" then clamp(to_number(split.1), maximum:1000, minimum:-1000) else 0 }
	
	shrink_type := { if styling.shrink_type_text != "" and styling.shrink_type_text != "-" then clamp(to_number(styling.shrink_type_text), maximum:24, minimum:-40) else 0 }
	shrink_name := { if styling.shrink_name_text != "" and styling.shrink_name_text != "-" then clamp(to_number(styling.shrink_name_text), maximum:28, minimum:-40) else 0 }
	
	use_main_rarity := { contains(set.mainframe_rarity_name, match: ".png") }
	
	alt_rarity := { styling.alt_rarity_color != "" }
	alt_rarity_color :=
	{
		string := "83,67,53:177,150,131:0,0,0:0,0,0:0.07:"
		if match(styling.alt_rarity_color, match:":$") then string := styling.alt_rarity_color
		colons := length(filter_text(string, match:":"))
		output := split_text(string, match:",|:")
		splits := split_text(string, match:":")
		if colons == 4
			then output := split_text(string+"0.07:", match:",|:")
		if colons == 3
			then output := split_text(string+splits[2]+"0.07:", match:",|:")
		else if colons == 2
			then output := split_text(string+"0,0,0:0,0,0:0.07:", match:",|:")
		else if colons == 1
			then output := split_text(string+splits[0]+":0,0,0:0,0,0:0.07:", match:",|:")
		output
	}
	alt_symbol :=
	{
		colors := alt_rarity_color()
		symbol_variation(
			symbol:			set.symbol,
			border_radius:	colors.12,
			fill_type:		"linear gradient",
			fill_color_1:	rgb(colors.0, colors.1, colors.2),
			fill_color_2:	rgb(colors.3, colors.4, colors.5),
			border_color_1:	rgb(colors.6, colors.7, colors.8),
			border_color_2:	rgb(colors.9, colors.10, colors.11),
			center_x:		0.5,
			center_y:		0.5,
			end_x:			1,
			end_y:			1
		)
	}
	
	rarity_right :=	{ split := split_comma(styling.rarity_coordinates); if length(split) > 0 and split.0 != "" and split.0 != "-" then clamp(split.0, maximum:1000, minimum:0) else 687 }
	rarity_top :=	{ split := split_comma(styling.rarity_coordinates); if length(split) > 1 and split.1 != "" and split.1 != "-" then clamp(split.1, maximum:1500, minimum:0) else 593 }
	rarity_size :=	{ split := split_comma(styling.rarity_coordinates); if length(split) > 2 and split.2 != "" and split.2 != "-" then clamp(split.2, maximum:1500, minimum:0) else 52 }
	rarity_left :=	{ rarity_right() - rarity_size() }
	
	popout_left :=		{ split := split_comma(styling.popout_image_coordinates); if length(split) > 3 and split.0 != "" and split.0 != "-" then clamp(split.0, maximum:1500, minimum:-500) else 0 }
	popout_top :=		{ split := split_comma(styling.popout_image_coordinates); if length(split) > 3 and split.1 != "" and split.1 != "-" then clamp(split.1, maximum:2000, minimum:-500) else 0 }
	popout_width :=		{ split := split_comma(styling.popout_image_coordinates); if length(split) > 3 and split.2 != "" and split.2 != "-" then clamp(split.2, maximum:1500, minimum:0) else 0 }
	popout_height :=	{ split := split_comma(styling.popout_image_coordinates); if length(split) > 3 and split.3 != "" and split.3 != "-" then clamp(split.3, maximum:2000, minimum:0) else 0 }
	
	split_comma := split_text@(match: " *, *")
	
	un_png := replace@(match:".png", replace: "")
	
	special_text2 := { value }
	
	clamp :=
	{
		if input < minimum then minimum
		else if input > maximum then maximum
		else input
	}
	
	crop_safe :=
	{
		if		offset_x < 0
			or	offset_y < 0
			or	width <= 0
			or	height <= 0
			or	offset_x + width > 750
			or	offset_y + height > 3046
		then ""
		else crop(input, offset_x: offset_x, offset_y: offset_y, width: width, height: height)
	}
	
	pt_move :=				{ clamp((to_int(pull_comma_array(styling.move_PTs, cell:input, end:0, default:0)) or else 0), minimum: -500, maximum: 500) }
	
	level_move :=			{ clamp((to_int(pull_comma_array(styling.move_level_arrows, cell:input, end:0, default:0)) or else 0), minimum: -500, maximum: 500) }
	
	font_size :=
	{
		if styling.font_size == "" then 26 else to_number(styling.font_size) or else 26
	}
	
	active_abilities :=		{ styling.number_of_levels-1 }
	outmap :=				1200
	
	line_height_hard :=		{ 1.2 }
	line_height_line :=		{ 1.5 }
	line_height_soft :=		{ 0.9 }
	
	textbox_top :=			{ 664 + chop_top()}
	textbox_bottom :=		{ (if is_stamped() then 947 else 958) - chop_bottom() }
	
	separator_heights :=	{ 2 }		# may depend on an input
	separator_move :=		{ clamp((to_int(pull_comma_array(styling.move_separators, cell:input-1, end:0, default:0)) or else 0), minimum: -500, maximum: 500) }
	
	textbox_lefts :=
	{
		pt := if input == 0 then card.pt else card["pt_" + (input+1)]
		if styling.center_rule_text and pt != "" then 178 else if card["level_" + input] == "" then 64 else 152
	}
	textbox_rights :=
	{
		if input > active_abilities() then textbox_lefts() else (
		pt := if input == 0 then card.pt else card["pt_" + (input+1)]
		if pt == "" then (if styling.center_rule_text and card["level_" + input] != "" then 598 else 686) else 572)
	}
	textbox_heights_array :=
	{
		if styling.level_height_behavior == "fixed" then textbox_heights_array_fixed() else textbox_heights_array_dynamic()
	}
	textbox_heights_array_fixed :=
	{
		active_count := active_abilities()
		total_separator_height :=	if active_count == 0 then 0 else for x from 0 to active_count-1 do separator_heights(x)
		total_pixel_height :=		(textbox_bottom() - textbox_top()) - total_separator_height
		textbox_pixel_heights :=	total_pixel_height/(active_count+1)
		[textbox_pixel_heights, textbox_pixel_heights, textbox_pixel_heights, textbox_pixel_heights, textbox_pixel_heights, textbox_pixel_heights, textbox_pixel_heights, textbox_pixel_heights]
	}
	textbox_heights_array_dynamic :=
	{
		###force proper initialization of card_style values
		hack_to_force_update := card_style.level_1_text.content_width
		
		active_count := active_abilities()
		
		hard_line_height := 1.555 * line_height_hard()
		soft_line_height := 1.555 * line_height_soft()
		last_line_height := 1.222
		
		content_line_counts :=	for x from 0 to active_count do [card_style["level_" + (x+1) + "_text"].content_lines]
		hard_line_counts :=		for x from 0 to active_count do [length(card_style["level_" + (x+1) + "_text"].layout.paragraphs)-1]
		soft_line_counts :=		for x from 0 to active_count do [content_line_counts[x] - hard_line_counts[x] - 1]
		
		textbox_desired_heights :=	for x from 0 to active_count do [hard_line_counts[x] * hard_line_height + soft_line_counts[x] * soft_line_height + last_line_height]
		total_desired_height :=		for x from 0 to active_count do textbox_desired_heights[x]
		total_separator_height :=	if active_count == 0 then 0 else for x from 0 to active_count-1 do separator_heights(x)
		total_pixel_height :=		(textbox_bottom() - textbox_top()) - total_separator_height
		textbox_pixel_heights :=	for x from 0 to active_count do [textbox_desired_heights[x]/total_desired_height * total_pixel_height]
		
		#trace("content_line_counts "						+ (for x from 0 to active_count do (to_string(content_line_counts[x]) + " ")))
		#trace("hard_line_counts "							+ (for x from 0 to active_count do (to_string(hard_line_counts[x]) + " ")))
		#trace("soft_line_counts "							+ (for x from 0 to active_count do (to_string(soft_line_counts[x]) + " ")))
		#trace("textbox_desired_heights "					+ (for x from 0 to active_count do (to_string(textbox_desired_heights[x]) + " ")))
		#trace("textbox_pixel_heights "					+ (for x from 0 to active_count do (to_string(textbox_pixel_heights[x]) + " ")))
		
		textbox_pixel_heights
	}
	textbox_tops :=
	{
		if input == 0 then textbox_top() else (
		if input > active_abilities() then outmap else (
		heights := textbox_heights_array()
		accumulator := textbox_top()
		for x from 0 to input-1 do (accumulator := accumulator + heights[x] + separator_heights(x); "")
		accumulator + separator_move(input)))
	}
	textbox_bottoms :=
	{
		active_count := active_abilities()
		if input == active_count then textbox_bottom() else (
		if input > active_count then outmap else (
		heights := textbox_heights_array()
		accumulator := textbox_top() + heights[0]
		for x from 1 to input do (accumulator := accumulator + heights[x] + separator_heights(x-1); "")
		accumulator + separator_move(input+1)))
	}
	textbox_middles :=
	{
		if input > active_abilities() then outmap else (
		heights := textbox_heights_array()
		accumulator := textbox_top()
		for x from 0 to input-1 do (accumulator := accumulator + heights[x] + separator_heights(x); "")
		accumulator + heights[input]/2)
	}


############################################################## Set info fields

set info style:
	symbol:
		variation:
			name:				invertedcommon
			border radius:		0.10
			fill type:			solid
			fill color:			rgb(255,255,255)
			border color:		rgb(0,0,0)


############################################################## Extra style options

styling field:
	type:			text
	name:			font size
	description:	Sets the font size of ability textboxes. MUST BE CHANGED MANUALLY IF THERE IS NOT ENOUGH ROOM ON THE CARD. Default is 26.
styling field:
	type:			text
	name:			popout image coordinates
	description:	The coordinates for the popout image field, formatted as "left,top,width,height". Used to make the illustration jump in front of the frame.
styling field:
	type:			boolean
	name:			stretch image to whole card
	description:	Make the image span the whole card instead of just the visible part. Use this to help make popout effects.
	initial:		no
styling field:
	type:			text
	name:			shrink name text
	description:	Shrinks name X pixels.
styling field:
	type:			text
	name:			shrink type text
	description:	Shrinks type X pixels.
styling field:
	type:			choice
	name:			number of levels
	description:	How many level textboxes are on the card?
	choice:			1
	choice:			2
	choice:			3
	choice:			4
	initial:		3
styling field:
	type:			text
	name:			level label
	description:	Change the level label. default is "LEVEL". Secondary lables can be added after a comma, "1,2,3,4"
styling field:
	type:			choice
	name:			level height behavior
	description:	Should level height automatically adapt to text height?
	choice:			fixed
	choice:			dynamic
	initial:		dynamic
styling field:
	type:			text
	name:			move level arrows
	description:	Moves the level arrow boxes down by this many pixels. Use negatives to move up. Formatted as "1,2,3,4"
styling field:
	type:			text
	name:			move PTs
	description:	Moves the pt boxes down by this many pixels. Use negatives to move up. Formatted as "1,2,3,4"
styling field:
	type:			text
	name:			move separators
	description:	Moves the limits between levels down by this many pixels. Use negatives to move up. Formatted as "1,2,3"
styling field:
	type:			text
	name:			chop rule textbox
	description:	Formatted as "X,Y". Shrinks textbox X pixels from the top and Y from the bottom.
styling field:
	type:			boolean
	name:			center rule text
	description:	Center the rules text?
	initial:		no
styling field:
	type:			choice
	name:			PT color scheme
	description:	Use the selected color scheme for the PT box on two color cards
	choice:			gold
	choice:			blend
	initial:		gold
styling field:
	type:			choice
	name:			legend crown
	description:	Use the legend crown?
	choice:			yes
	choice:			if legendary
	choice:			no
	initial:		if legendary
styling field:
	type:			choice
	name:			vehicle frame
	description:	Use the vehicle frame overlay?
	choice:			yes
	choice:			if vehicle
	choice:			no
	initial:		if vehicle
styling field:
	type:			choice
	name:			land frame
	description:	Use the land frame overlay?
	choice:			yes
	choice:			if land
	choice:			no
	initial:		if land
styling field:
	type:			text
	name:			opacity percentage
	description:	Use a clear frame with the given opacity. Default is 80 for colorless non-artifact cards, and 100 for all other cards.
styling field:
	type:			boolean
	name:			color indicator dot
	description:	Use a dot in the typeline to indicate card color?
	initial:		no
styling field:
	type:			choice
	name:			holofoil stamps
	description:	Use the security holofoil stamps?
	choice:			yes, all foil
	choice:			yes, un/commons not foil
	choice:			only rares and mythics
	choice:			no
	initial:		yes, un/commons not foil
styling field:
	type:			package choice
	name:			overlay
	description:	Should there be an overlay applied, such as foil?
	match:			magic-overlay-*.mse-include
	required:		false
styling field:
	type:			choice
	name:			corners
	description:	What should the corners of the card look like?
	choice:			rounded and antialiased
	choice:			rounded
	choice:			none
	initial:		rounded and antialiased
styling field:
	type:			boolean
	name:			inverted common symbol
	description:	Should the common rarity symbol be inverted, like in Coldsnap?
	initial:		no
styling field:
	type:			text
	name:			alt rarity color
	description:	Use a custom color for the rarity symbol. Formatted as "R1,G1,B1:R2,G2,B2:..." 1 and 2 are fill color, 3 and 4 border color
styling field:
	type:			text
	name:			rarity coordinates
	description:	The coordinates for the set symbol, formatted as "right,top,size". Default is 687,593,52.
styling field:
	type:			boolean
	name:			remove from autocount
	description:	Removes the automatic card number for specific cards, to allow for overcounted cards like in Planeswalker Decks.
	initial:		no
styling field:
	type:			boolean
	name:			promo
	description:	Is this card a promo card, with the "P" rarity?
	initial:		no
styling field:
	type:			color
	name:			copyright text color
	description:	Color of the copyright, illustrator, and set code text.
	choice:			white
	choice:			black
	initial:		white
	allow custom:	true
styling field:
	type:			boolean
	name:			use ancestral mana symbols
	description:	Enables ancestral's modified generic mana.
	initial:		no
styling field:
	type:			boolean
	name:			use guild mana symbols
	description:	Use the Ravnica guild symbols instead of the official half/half circles for hybrid mana.
	initial:		no
styling field:
	type:			choice
	name:			tap symbol
	description:	What tap and untap symbols should be used on cards?
	choice:			modern
	choice:			old
	choice:			diagonal T
	initial:		modern
styling field:
	type:			package choice
	name:			casting cost mana symbols
	description:	Symbols used in the casting cost.
	match:			magic-mana-*.mse-symbol-font
	initial:		magic-mana-large.mse-symbol-font
styling field:
	type:			package choice
	name:			text box mana symbols
	description:	Symbols used in the rule text and flavor text.
	match:			magic-mana-*.mse-symbol-font
	initial:		magic-mana-small.mse-symbol-font
styling field:
	type:			text
	name:			name font
	description:	Font used for the name and type. Hover your mouse over the font file to see it's details in a yellow popup, and write it's Title here.
styling field:
	type:			text
	name:			text font
	description:	Font used for the rule text. Hover your mouse over the font file to see it's details in a yellow popup, and write it's Title here.
styling field:
	type:			text
	name:			text italic font
	description:	Font used for the flavor text and reminder texts. Hover your mouse over the font file to see it's details in a yellow popup, and write it's Title here.
styling style:
	use guild mana symbols:
		choice images:
			yes:				/magic-mana-small.mse-symbol-font/mana_guild_rg.png
			no:					/magic-mana-small.mse-symbol-font/mana_rg.png
	tap symbol:
		render style:	both
		choice images:
			modern:				/magic-mana-large.mse-symbol-font/mana_t.png
			old:				/magic-mana-large.mse-symbol-font/mana_t_old.png
			diagonal T:			/magic-mana-large.mse-symbol-font/mana_t_older.png
	inverted common symbol:
		choice images:
			no:					{ symbol_variation(symbol: set.symbol, variation: "common") }
			yes:				{ symbol_variation(symbol: set.symbol, variation: "invertedcommon") }


############################################################## Card fields

card style:
	############################# Background stuff
	border color:
		left:				0
		top :				0
		width:				750
		height:				1046
		z index:			11
		mask:				border_mask.png
	card color:
		left:				0
		top:				0
		width:				750
		height:				1046
		z index:			10
		render style:		image
		popup style:		in place
		image:				{ card_background() }
		mask:				{ if is_clear() then clear_mask() else "card_mask.png" }
	############################# Name line
	name:
		left:				64
		top:				54
		right:				{ 686 - (if card_style.casting_cost.content_width == 0 then 0 else card_style.casting_cost.content_width + 7) }
		height:				52
		z index:			300
		alignment:			middle left shrink-overflow
		font:
			name:				{ if styling.name_font == "" then "Beleren Bold" else styling.name_font }
			size:				{ 30 - shrink_name() }
			color:				black
	casting cost:
		right:				693
		top:				54
		width:				{ max(70, card_style.casting_cost.content_width + 12) }
		height:				52
		z index:			310
		alignment:			middle right
		always symbol:		true
		font:
			name:				MPlantin
			size:				30
			color:				black
		symbol font:
			name:				{ styling.casting_cost_mana_symbols }
			size:				30
			#alignment:			middle right
	alias:
		left:				108
		top:				116
		right:				641
		height:				28
		z index:			300
		alignment:			middle center shrink-overflow
		font:
			name:				MPlantin-Italic
			size:				18
			color:				white
			weight:				bold
	############################# Image
	image:
		left:				{ if styling.stretch_image_to_whole_card then 0		else if is_clear() then 30	else 57 }
		top:				{ if styling.stretch_image_to_whole_card then 0		else if is_clear() then 29	else 118 }
		width:				{ if styling.stretch_image_to_whole_card then 750	else if is_clear() then 690	else 636 }
		height:				{ if styling.stretch_image_to_whole_card then 1046	else if is_clear() then 938	else 464 }
		z index:			0
	mainframe image:
		left:				{ popout_left() }
		top:				{ popout_top() }
		width:				{ popout_width() }
		height:				{ popout_height() }
		z index:			400
	############################# Card type
	indicator:
		left:				60
		top:				603
		width:				34
		height:				34
		z index:			110
		render style:		image
		visible:			{ has_identity() }
		image:				{ card_identity() }
	type:
		left:				{ if has_identity() then 100 else 63 }
		top:				591
		right:				{ if set.shorten_types_for_rarity then max(375,min(rarity_left()-7,687)) else 687 }
		height:				54
		z index:			110
		alignment:			middle left shrink-overflow
		font:
			name:				{ if styling.name_font == "" then "Beleren Bold" else styling.name_font }
			size:				{ 26 - shrink_type() }
			color:				black
			separator color:	red
	rarity:
		right:				{ rarity_right() }
		top:				{ rarity_top() }
		width:				{ rarity_size() }
		height:				{ rarity_size() }
		z index:			111
		alignment:			middle right
		render style:		image
		choice images:
			# Images based on the set symbol
			basic land:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "c.png"
					else if alt_rarity() then alt_symbol()
					else if styling.inverted_common_symbol then symbol_variation(symbol: set.symbol, variation: "invertedcommon")
					else symbol_variation(symbol: set.symbol, variation: "common")
			common:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "c.png"
					else if alt_rarity() then alt_symbol()
					else if styling.inverted_common_symbol then symbol_variation(symbol: set.symbol, variation: "invertedcommon")
					else symbol_variation(symbol: set.symbol, variation: "common")
			uncommon:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "u.png"
					else if alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "uncommon")
			rare:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "r.png"
					else if alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "rare")
			mythic rare:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "m.png"
					else if alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "mythic rare")
			special:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "s.png"
					else if alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "special")
			masterpiece:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "mp.png"
					else symbol_variation(symbol: set.masterpiece_symbol, variation: "mythic rare")
	############################# Text box
	level 1 text:
		left:				{ textbox_lefts(0) }
		top:				{ textbox_tops(0) }
		right:				{ textbox_rights(0) }
		bottom:				{ textbox_bottoms(0) }
		z index:			100
		font:
			name:				{ if styling.text_font == "" then "MPlantin" else styling.text_font }
			italic name:		{ if styling.text_italic_font == "" then "MPlantin-Italic" else styling.text_italic_font }
			size:				{ font_size() }
			scale down to:		16
			color:				black
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ font_size() }
		alignment:				{ if styling.center_rule_text then "middle center" else "middle left" }
		line height hard:		{ line_height_hard() }
		line height line:		{ line_height_line() }
		line height soft:		{ line_height_soft() }
		line height hard max:	1.3
		line height line max:	1.6
		line height soft max:	0.9
	level 2 text:
		left:				{ textbox_lefts(1) }
		top:				{ textbox_tops(1) }
		right:				{ textbox_rights(1) }
		bottom:				{ textbox_bottoms(1) }
		z index:			100
		font:
			name:				{ if styling.text_font == "" then "MPlantin" else styling.text_font }
			italic name:		{ if styling.text_italic_font == "" then "MPlantin-Italic" else styling.text_italic_font }
			size:				{ font_size() }
			scale down to:		16
			color:				black
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ font_size() }
		alignment:				{ if styling.center_rule_text then "middle center" else "middle left" }
		line height hard:		{ line_height_hard() }
		line height line:		{ line_height_line() }
		line height soft:		{ line_height_soft() }
		line height hard max:	1.3
		line height line max:	1.6
		line height soft max:	0.9
	level 3 text:
		left:				{ textbox_lefts(2) }
		top:				{ textbox_tops(2) }
		right:				{ textbox_rights(2) }
		bottom:				{ textbox_bottoms(2) }
		z index:			100
		font:
			name:				{ if styling.text_font == "" then "MPlantin" else styling.text_font }
			italic name:		{ if styling.text_italic_font == "" then "MPlantin-Italic" else styling.text_italic_font }
			size:				{ font_size() }
			scale down to:		16
			color:				black
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ font_size() }
		alignment:				{ if styling.center_rule_text then "middle center" else "middle left" }
		line height hard:		{ line_height_hard() }
		line height line:		{ line_height_line() }
		line height soft:		{ line_height_soft() }
		line height hard max:	1.3
		line height line max:	1.6
		line height soft max:	0.9
	level 4 text:
		left:				{ textbox_lefts(3) }
		top:				{ textbox_tops(3) }
		right:				{ textbox_rights(3) }
		bottom:				{ textbox_bottoms(3) }
		z index:			100
		font:
			name:				{ if styling.text_font == "" then "MPlantin" else styling.text_font }
			italic name:		{ if styling.text_italic_font == "" then "MPlantin-Italic" else styling.text_italic_font }
			size:				{ font_size() }
			scale down to:		16
			color:				black
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ font_size() }
		alignment:				{ if styling.center_rule_text then "middle center" else "middle left" }
		line height hard:		{ line_height_hard() }
		line height line:		{ line_height_line() }
		line height soft:		{ line_height_soft() }
		line height hard max:	1.3
		line height line max:	1.6
		line height soft max:	0.9
	watermark:
		left:				20
		top:				659
		right:				730
		bottom:				963
		z index:			28
		render style:		image
		popup style:		in place
		alignment:			middle center
		include file:		/magic-watermarks.mse-include/watermarks
	############################# PT and Levels
	level 0:
		left:				54
		top:				{ textbox_middles(0) - 10 + level_move(0) }
		width:				52
		height:				38
		z index:			110
		alignment:			center middle shrink-overflow
		font:
			name:				Beleren Bold
			size:				24
			scale down to:		20
			color:				{ if is_vehicle() then "white" else "black" }
			separator color:	red
	level 1:
		left:				54
		top:				{ textbox_middles(1) - 10 + level_move(1) }
		width:				{ if active_abilities() >= 1 then 52 else 0 }
		height:				38
		z index:			110
		alignment:			center middle shrink-overflow
		font:
			name:				Beleren Bold
			size:				24
			scale down to:		20
			color:				{ if is_vehicle() then "white" else "black" }
			separator color:	red
	level 2:
		left:				54
		top:				{ textbox_middles(2) - 10 + level_move(2) }
		width:				{ if active_abilities() >= 2 then 52 else 0 }
		height:				38
		z index:			110
		alignment:			center middle shrink-overflow
		font:
			name:				Beleren Bold
			size:				24
			scale down to:		20
			color:				{ if is_vehicle() then "white" else "black" }
			separator color:	red
	level 3:
		left:				54
		top:				{ textbox_middles(3) - 10 + level_move(3) }
		width:				{ if active_abilities() >= 3 then 52 else 0 }
		height:				38
		z index:			110
		alignment:			center middle shrink-overflow
		font:
			name:				Beleren Bold
			size:				24
			scale down to:		20
			color:				{ if is_vehicle() then "white" else "black" }
			separator color:	red
	pt:
		left:				599
		top:				{ textbox_middles(0) - 20 + pt_move(0) }
		width:				93
		height:				43
		z index:			110
		alignment:			center middle shrink-overflow
		font:
			name:				Beleren Bold
			size:				30
			color:				{ if is_vehicle() then "white" else "black" }
			separator color:	red
	pt 2:
		left:				599
		top:				{ textbox_middles(1) - 20 + pt_move(1) }
		width:				{ if active_abilities() >= 1 then 93 else 0 }
		height:				43
		z index:			110
		alignment:			center middle shrink-overflow
		font:
			name:				Beleren Bold
			size:				30
			color:				{ if is_vehicle() then "white" else "black" }
			separator color:	red
	pt 3:
		left:				599
		top:				{ textbox_middles(2) - 20 + pt_move(2) }
		width:				{ if active_abilities() >= 2 then 93 else 0 }
		height:				43
		z index:			110
		alignment:			center middle shrink-overflow
		font:
			name:				Beleren Bold
			size:				30
			color:				{ if is_vehicle() then "white" else "black" }
			separator color:	red
	pt 4:
		left:				599
		top:				{ textbox_middles(3) - 20 + pt_move(3) }
		width:				{ if active_abilities() >= 3 then 93 else 0 }
		height:				43
		z index:			110
		alignment:			center middle shrink-overflow
		font:
			name:				Beleren Bold
			size:				30
			color:				{ if is_vehicle() then "white" else "black" }
			separator color:	red
	############################# Copyright stuff
	card stamp:
		left:				0
		top:				0
		width:				750
		height:				1046
		z index:			32
		render style:		image
		popup style:		in place
		image:				{ if is_stamped() then (if is_foil_stamped() then "stamp_foil.png" else "stamp_non_foil.png") else "" }
		mask:				stamp_mask.png
	set code:
		left:				49
		top:				994
		width:				110
		height:				21
		z index:			100
		alignment:			middle left
		font:
			name:				Relay-Medium
			size:				12.5
			color:				{ styling.copyright_text_color }
			weight:				bold
	illustrator:
		left:				{ if card.set_code == "" then 71 else 84 + card_style.set_code.content_width }
		top:				995
		width:				220
		height:				21
		z index:			100
		alignment:			middle left
		font:
			name:				Beleren Small Caps Bold
			size:				13
			color:				{ styling.copyright_text_color }
	copyright:
		right:				698
		#top:				{ if card.pt != "" then 994 else 981 }
		top:				{ if card.pt != "" or card.special_text_2 != "" then 994 else 981 }
		width:				{ if set.automatic_copyright then 0 else 220 }
		height:				21
		z index:			100
		alignment:			middle right shrink-overflow
		font:
			name:				Matrix
			size:				12
			color:				{ styling.copyright_text_color }
			weight:				bold
	special text 2:
		left:				{ 511 - if length(card.special_text_2) > 6 then 20 else 0 }
		right:				{ if card.pt != "" then 570 else 698 }
		top:				975
		height:				21
		z index:			101
		alignment:			{ if card.pt != "" then "middle left shrink-overflow" else "middle right shrink-overflow" }
		font:
			name:				Matrix
			size:				12
			color:				{ styling.copyright_text_color }
			weight:				bold


############################################################## Extra card fields

extra card field:
	type:				text
	name:				card code
	save value:			false
	show statistics:	false
	script:
		if set.automatic_card_numbers and not styling.remove_from_autocount
		then forward_editor(prefix: card_number_m15() + "/" + card_count_m15() + " " + rarity_code() + " ", field: card.card_code_text)
		else combined_editor(field1: card.custom_card_number, separator: (if card.custom_card_number != "" then " " else "") + rarity_code() + " ", field2: card.card_code_text)
extra card field:
	type:				text
	name:				auto copyright
	script:				set.copyright
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				artist arrow
	editable:			false
	save value:			false
	show statistics:	false
	choice:				artist arrow
extra card field:
	type:				choice
	name:				pt box
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				pt box 2
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				pt box 3
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				pt box 4
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				level box
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				level box 2
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				level box 3
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				level box 4
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				text
	name:				lvl label 0
	editable:			false
	save value:			false
	script:				level_label(0)
extra card field:
	type:				text
	name:				lvl label 1
	editable:			false
	save value:			false
	script:				level_label(1)
extra card field:
	type:				text
	name:				lvl label 2
	editable:			false
	save value:			false
	script:				level_label(2)
extra card field:
	type:				text
	name:				lvl label 3
	editable:			false
	save value:			false
	script:				level_label(3)
extra card field:
	type:				choice
	name:				textbox
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				textbox 2
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				textbox 3
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				textbox 4
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				alias box
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				crown
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				crown clear shadow
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				color
	name:				crown border
	script:				card.border_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				foil layer
	editable:			false
	save value:			false
	show statistics:	false
	choice:				foil layer
extra card field:
	type:				choice
	name:				land overlay
	editable:			false
	save value:			false
	show statistics:	false
	choice:				land overlay
extra card field:
	type:				choice
	name:				vehicle overlay
	editable:			false
	save value:			false
	show statistics:	false
	choice:				vehicle overlay
extra card field:
	type:				choice
	name:				card stamp background
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				card stamp background 2
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				card stamp background 3
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				card stamp background 4
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				color
	name:				card stamp border
	script:				card.border_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				card stamp rim
	editable:			false
	save value:			false
	show statistics:	false
	choice:				card stamp rim
extra card field:
	type:				color
	name:				corners
	script:				rgb(255, 255, 255)
	editable:			false
	save value:			false
	show statistics:	false

extra card style:
	card code:
		left:				49
		top:				975
		width:				220
		height:				21
		z index:			100
		alignment:			middle left shrink-overflow
		font:
			name:				Relay-Medium
			size:				12.5
			color:				{ styling.copyright_text_color }
			weight:				bold
	auto copyright:
		right:				698
		#top:				{ if card.pt != "" then 994 else 981 }
		top:				{ if card.pt != "" or card.special_text_2 != "" then 994 else 981 }
		width:				{ if set.automatic_copyright then 220 else 0 }
		height:				21
		z index:			100
		alignment:			middle right shrink-overflow
		font:
			name:				Matrix
			size:				12
			color:				{ styling.copyright_text_color }
			weight:				bold
	artist arrow:
		left:				{ if card.set_code == "" then 49 else 62 + card_style.set_code.content_width }
		top:				998
		width:				20
		height:				13
		z index:			100
		render style:		image
		image:				{ recolor_image("artist_arrow.png", color: styling.copyright_text_color) }
	pt box:
		left:				0
		top:				0
		width:				750
		height:				1046
		z index:			40
		visible:			{ card.pt != "" }
		render style:		image
		image:
			script:
				pure := pure_colors()
				count := length(pure)
				if is_vehicle() then crop_safe("vpt.png", width: 750, height: 1046, offset_x: 0, offset_y: 1500 + 32 - textbox_middles(0) - pt_move(0))
				else if styling.PT_color_scheme == "gold" and count > 1 then template("m", type: "pt")
				else if styling.PT_color_scheme == "hybrid" and count == 2 then masked_blend(mask: "special_blend_pt.png", dark: template(pure.0, type: "pt"), light: template(pure.1, type: "pt"))
				else card_ptbox()
	pt box 2:
		left:				0
		top:				0
		width:				750
		height:				1046
		z index:			40
		visible:			{ card.pt_2 != "" and styling.number_of_levels > 1 }
		render style:		image
		image:
			script:
				pure := pure_colors()
				count := length(pure)
				if is_vehicle() then crop_safe("vpt.png", width: 750, height: 1046, offset_x: 0, offset_y: 1500 + 32 - textbox_middles(1) - pt_move(1))
				else if styling.PT_color_scheme == "gold" and count > 1 then template("m", type: "pt2")
				else if styling.PT_color_scheme == "hybrid" and count == 2 then masked_blend(mask: "special_blend_pt.png", dark: template(pure.0, type: "pt2"), light: template(pure.1, type: "pt2"))
				else card_ptbox2()
	pt box 3:
		left:				0
		top:				0
		width:				750
		height:				1046
		z index:			40
		visible:			{ card.pt_3 != "" and styling.number_of_levels > 2 }
		render style:		image
		image:
			script:
				pure := pure_colors()
				count := length(pure)
				if is_vehicle() then crop_safe("vpt.png", width: 750, height: 1046, offset_x: 0, offset_y: 1500 + 32 - textbox_middles(2) - pt_move(2))
				else if styling.PT_color_scheme == "gold" and count > 1 then template("m", type: "pt3")
				else if styling.PT_color_scheme == "hybrid" and count == 2 then masked_blend(mask: "special_blend_pt.png", dark: template(pure.0, type: "pt3"), light: template(pure.1, type: "pt3"))
				else card_ptbox3()
	pt box 4:
		left:				0
		top:				0
		width:				750
		height:				1046
		z index:			40
		visible:			{ card.pt_4 != "" and styling.number_of_levels > 3 }
		render style:		image
		image:
			script:
				pure := pure_colors()
				count := length(pure)
				if is_vehicle() then crop_safe("vpt.png", width: 750, height: 1046, offset_x: 0, offset_y: 1500 + 32 - textbox_middles(3) - pt_move(3))
				else if styling.PT_color_scheme == "gold" and count > 1 then template("m", type: "pt4")
				else if styling.PT_color_scheme == "hybrid" and count == 2 then masked_blend(mask: "special_blend_pt.png", dark: template(pure.0, type: "pt4"), light: template(pure.1, type: "pt4"))
				else card_ptbox4()
	level box:
		left:				0
		top:				0
		width:				750
		height:				1046
		z index:			40
		visible:			{ card.level_0 != "" }
		render style:		image
		image:
			script:
				pure := pure_colors()
				count := length(pure)
				if styling.PT_color_scheme == "gold" and count > 1 then template("m", type: "level")
				else if styling.PT_color_scheme == "hybrid" and count == 2 then masked_blend(mask: "special_blend_pt.png", dark: template(pure.0, type: "level"), light: template(pure.1, type: "level"))
				else card_level()
	level box 2:
		left:				0
		top:				0
		width:				750
		height:				1046
		z index:			40
		visible:			{ card.level_1 != "" and styling.number_of_levels > 1 }
		render style:		image
		image:
			script:
				pure := pure_colors()
				count := length(pure)
				if styling.PT_color_scheme == "gold" and count > 1 then template("m", type: "level2")
				else if styling.PT_color_scheme == "hybrid" and count == 2 then masked_blend(mask: "special_blend_pt.png", dark: template(pure.0, type: "level2"), light: template(pure.1, type: "level2"))
				else card_level2()
	level box 3:
		left:				0
		top:				0
		width:				750
		height:				1046
		z index:			40
		visible:			{ card.level_2 != "" and styling.number_of_levels > 2 }
		render style:		image
		image:
			script:
				pure := pure_colors()
				count := length(pure)
				if styling.PT_color_scheme == "gold" and count > 1 then template("m", type: "level3")
				else if styling.PT_color_scheme == "hybrid" and count == 2 then masked_blend(mask: "special_blend_pt.png", dark: template(pure.0, type: "level3"), light: template(pure.1, type: "level3"))
				else card_level3()
	level box 4:
		left:				0
		top:				0
		width:				750
		height:				1046
		z index:			40
		visible:			{ card.level_3 != "" and styling.number_of_levels > 3 }
		render style:		image
		image:
			script:
				pure := pure_colors()
				count := length(pure)
				if styling.PT_color_scheme == "gold" and count > 1 then template("m", type: "level4")
				else if styling.PT_color_scheme == "hybrid" and count == 2 then masked_blend(mask: "special_blend_pt.png", dark: template(pure.0, type: "level4"), light: template(pure.1, type: "level4"))
				else card_level4()
	lvl label 0:
		left:				54
		top:				{ textbox_middles(0) - 38 + level_move(0) }
		width:				52
		height:				38
		z index:			110
		visible:			{ card.level_0 != "" }
		alignment:			center middle shrink-overflow
		font:
			name:				Beleren Small Caps
			size:				15
			scale down to:		10
			color:				black
			weight:				bold
	lvl label 1:
		left:				54
		top:				{ textbox_middles(1) - 38 + level_move(1) }
		width:				52
		height:				38
		z index:			110
		visible:			{ card.level_1 != "" and styling.number_of_levels > 1 }
		alignment:			center middle shrink-overflow
		font:
			name:				Beleren Small Caps
			size:				15
			scale down to:		10
			color:				black
			weight:				bold
	lvl label 2:
		left:				54
		top:				{ textbox_middles(2) - 38 + level_move(2) }
		width:				52
		height:				38
		z index:			110
		visible:			{ card.level_2 != "" and styling.number_of_levels > 2 }
		alignment:			center middle shrink-overflow
		font:
			name:				Beleren Small Caps
			size:				15
			scale down to:		10
			color:				black
			weight:				bold
	lvl label 3:
		left:				54
		top:				{ textbox_middles(3) - 38 + level_move(3) }
		width:				52
		height:				38
		z index:			110
		visible:			{ card.level_3 != "" and styling.number_of_levels > 3 }
		alignment:			center middle shrink-overflow
		font:
			name:				Beleren Small Caps
			size:				15
			scale down to:		10
			color:				black
			weight:				bold
	textbox:
		left:				0
		top:				0
		width:				750
		height:				1046
		z index:			11
		render style:		image
		image:				{ card_textbox() }
		mask:				textbox_mask.png
	textbox 2:
		left:				0
		top:				0
		width:				750
		height:				1046
		z index:			11
		visible:			{ styling.number_of_levels > 1 }
		render style:		image
		image:				{ card_textbox2() }
		mask:				{ combine_blend(image1: "textbox_short_mask.png", image2: crop_safe("textbox_dynamic_mask.png", width: 750, height: 1046, offset_x: 0, offset_y: 1500 - textbox_tops(1)), combine: "multiply") }
	textbox 3:
		left:				0
		top:				0
		width:				750
		height:				1046
		z index:			11
		visible:			{ styling.number_of_levels > 2 }
		render style:		image
		image:				{ card_textbox3() }
		mask:				{ combine_blend(image1: "textbox_short_mask.png", image2: crop_safe("textbox_dynamic_mask.png", width: 750, height: 1046, offset_x: 0, offset_y: 1500 - textbox_tops(2)), combine: "multiply") }
	textbox 4:
		left:				0
		top:				0
		width:				750
		height:				1046
		z index:			11
		visible:			{ styling.number_of_levels > 3 }
		render style:		image
		image:				{ card_textbox4() }
		mask:				{ combine_blend(image1: "textbox_short_mask.png", image2: crop_safe("textbox_dynamic_mask.png", width: 750, height: 1046, offset_x: 0, offset_y: 1500 - textbox_tops(3)), combine: "multiply") }
	foil layer:
		left:				0
		top :				0
		width:				750
		height:				1046
		z index:			3000
		visible:			{ styling.overlay != "none" and styling.overlay != "" }
		render style:		image
		image:				{ if styling.overlay == "" then "" else styling.overlay + "/overlay.png" }
		mask:				{ "foil_mask" + (if is_stamped() then "_rare" else "") + (if card.pt != "" then "_pt" else "") + (if is_crowned() then "_crown" else "") + ".png"}
	land overlay:
		left:				0
		top:				0
		width:				750
		height:				1046
		z index:			38
		visible:			{ is_land() }
		render style:		image
		image:				loverlay.png
	vehicle overlay:
		left:				0
		top:				0
		width:				750
		height:				1046
		z index:			39
		visible:			{ is_vehicle() }
		render style:		image
		image:				voverlay.png
	alias box:
		left:				0
		top:				0
		width:				750
		height:				1046
		z index:			40
		visible:			{ is_aliased() }
		render style:		image
		image:				{ card_alias() }
	crown:
		left:				0
		top:				0
		width:				750
		height:				1046
		z index:			41
		visible:			{ is_crowned() }
		render style:		image
		image:				{ card_crown() }
	crown clear shadow:
		left:				0
		top:				0
		width:				750
		height:				1046
		z index:			42
		visible:			{ is_crowned() and is_clear() }
		render style:		image
		image:				shadow_clear_crown.png
	crown border:
		left:				0
		top:				0
		width:				750
		height:				1046
		z index:			40
		visible:			{ is_crowned() }
		mask:				crown_border_mask.png
	card stamp background:
		left:				0
		top:				0
		width:				750
		height:				1046
		z index:			27
		render style:		image
		image:				{ if is_stamped() then card_stamp_background() else card_nonstamp_background() }
		mask:				textbox_mask.png
	card stamp background 2:
		left:				0
		top:				0
		width:				750
		height:				1046
		z index:			27
		render style:		image
		image:				{ if is_stamped() then card_stamp_background2() else card_nonstamp_background2() }
		mask:				{ combine_blend(image1: "textbox_mask.png", image2: crop_safe("textbox_dynamic_mask.png", width: 750, height: 1046, offset_x: 0, offset_y: 1500 - textbox_tops(1)), combine: "multiply") }
	card stamp background 3:
		left:				0
		top:				0
		width:				750
		height:				1046
		z index:			27
		render style:		image
		image:				{ if is_stamped() then card_stamp_background3() else card_nonstamp_background3() }
		mask:				{ combine_blend(image1: "textbox_mask.png", image2: crop_safe("textbox_dynamic_mask.png", width: 750, height: 1046, offset_x: 0, offset_y: 1500 - textbox_tops(2)), combine: "multiply") }
	card stamp background 4:
		left:				0
		top:				0
		width:				750
		height:				1046
		z index:			27
		render style:		image
		image:				{ if is_stamped() then card_stamp_background4() else card_nonstamp_background4() }
		mask:				{ combine_blend(image1: "textbox_mask.png", image2: crop_safe("textbox_dynamic_mask.png", width: 750, height: 1046, offset_x: 0, offset_y: 1500 - textbox_tops(3)), combine: "multiply") }
	card stamp border:
		left:				0
		top:				0
		width:				750
		height:				1046
		z index:			29
		visible:			{ is_stamped() }
		mask:				stamp_border_mask.png
	card stamp rim:
		left:				0
		top:				0
		width:				750
		height:				1046
		z index:			30
		visible:			{ is_stamped() }
		render style:		image
		image:				{ card_stamp() }
		mask:				{ if is_clear() then "stamprim_clear_mask.png" else "" }
	corners:
		left:				0
		top :				0
		width:				750
		height:				1046
		z index:			4000
		visible:			{ styling.corners != "none" }
		mask:				{ if styling.corners == "rounded and antialiased" then "corners_rounded_antialiased_mask.png" else "corners_rounded_mask.png" }
